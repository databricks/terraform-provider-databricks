// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.
/* 
These generated types are for terraform plugin framework to interact with the terraform state conveniently.

These types follow the same structure as the types in go-sdk. 
The only difference is that the primitive types are no longer using the go-native types, but with tfsdk types. 
Plus the json tags get converted into tfsdk tags. 
We use go-native types for lists and maps intentionally for the ease for converting these types into the go-sdk types. 
*/

package {{.Name}}_tf

import (
	{{range .ImportedPackages}}
	"github.com/databricks/databricks-sdk-go/service/{{.}}"{{end}}
	"github.com/databricks/databricks-sdk-go/service/{{.Name}}"
	"io"
	"github.com/databricks/databricks-sdk-go/marshal"
  pluginfwcommon "github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/common"
  "github.com/hashicorp/terraform-plugin-framework/types"
  "github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)
{{range .Types}}
{{- if or .Fields .IsEmpty}}
{{.Comment "// " 80}}
type {{.PascalName}} struct {
    {{- range .Fields}}
    {{.Comment "    // " 80}}
	{{- $data := dict "field" . }}
	{{template "field" $data}}
  {{- if and .Entity.Terraform .Entity.Terraform.IsServiceProposedIfEmpty -}}
    {{- $data := dict "field" . "effective" true }}
    {{template "field" $data}}
  {{- end -}}
  {{end}}
}

func (newState *{{.PascalName}}) SyncEffectiveFieldsDuringCreateOrUpdate(plan {{.PascalName}}) {
  {{- range .Fields -}}
  {{- if and (and (ne .Entity.Terraform nil) .Entity.Terraform.IsServiceProposedIfEmpty) (or .Entity.IsString .Entity.IsBool .Entity.IsInt64 .Entity.IsFloat64 .Entity.IsInt .Entity.Enum)}}
  newState.Effective{{.PascalName}} = newState.{{.PascalName}}
  newState.{{.PascalName}} = plan.{{.PascalName}}
  {{- end}}
  {{- end}}
}

func (newState *{{.PascalName}}) SyncEffectiveFieldsDuringRead(existingState {{.PascalName}}) {
  {{- range .Fields -}}
  {{- if and (and (ne .Entity.Terraform nil) .Entity.Terraform.IsServiceProposedIfEmpty) (or .Entity.IsString .Entity.IsBool .Entity.IsInt64 .Entity.IsFloat64 .Entity.IsInt .Entity.Enum)}}
  {{- $type := "" -}}
  {{- if .Entity.IsString}}{{$type = "String"}}{{end}}
  {{- if .Entity.IsBool}}{{$type = "Bool"}}{{end}}
  {{- if .Entity.IsInt64}}{{$type = "Int64"}}{{end}}
  {{- if .Entity.IsFloat64}}{{$type = "Float64"}}{{end}}
  {{- if .Entity.IsInt}}{{$type = "Int64"}}{{end}}
  {{- if .Entity.Enum}}{{$type = "String"}}{{end}}
	newState.Effective{{.PascalName}} = existingState.Effective{{.PascalName}}
  if existingState.Effective{{.PascalName}}.Value{{$type}}() == newState.{{.PascalName}}.Value{{$type}}() {
    newState.{{.PascalName}} = existingState.{{.PascalName}}
  }
  {{- end}}
  {{- end}}
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in {{.PascalName}}.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (a {{.PascalName}}) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
  return map[string]reflect.Type{
    {{- range .Fields -}}
    {{- if or .Entity.IsObject .Entity.ArrayValue .Entity.MapValue}}
    {{ $data := dict "field" . -}}
    "{{template "tfsdk-name" $data}}": reflect.TypeOf({{ template "complex-field-value" .Entity }}),
    {{- end}}
    {{- end}}
  }
}

// TFSDK types also implement the ObjectValuable interface, so they can be used directly as objects
// and as elements in lists and maps.
var _ basetypes.ObjectValuable = {{.PascalName}}{}

// Equal implements basetypes.ObjectValuable.
func (o {{.PascalName}}) Equal(v attr.Value) bool {
	ov, d := o.ToObjectValue(context.Background())
	if d.HasError() {
		return false
	}
	return ov.Equal(v)
}

// IsNull implements basetypes.ObjectValuable.
func (o {{.PascalName}}) IsNull() bool {
	// TF SDK structures are never null.
	return false
}

// IsUnknown implements basetypes.ObjectValuable.
func (o {{.PascalName}}) IsUnknown() bool {
	// TF SDK structures are never unknown.
	return false
}

// String implements basetypes.ObjectValuable.
func (o {{.PascalName}}) String() string {
	return fmt.Sprintf("%#v", o)
}

// ToObjectValue implements basetypes.ObjectValuable.
func (o {{.PascalName}}) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	return types.ObjectValueFrom(
		ctx,
		o.Type(ctx).(basetypes.ObjectType).AttrTypes,
		o,
	)
}

// ToTerraformValue implements basetypes.ObjectValuable.
func (o {{.PascalName}}) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	ov, d := o.ToObjectValue(ctx)
	if d.HasError() {
		return tftypes.Value{}, fmt.Errorf("error converting to object value: %s", pluginfwcommon.DiagToString(d))
	}
	return ov.ToTerraformValue(ctx)
}

// Type implements basetypes.ObjectValuable.
func (o {{.PascalName}}) Type(ctx context.Context) attr.Type {
  return types.ObjectType{
    AttrTypes: map[string]attr.Type{
      {{ range .Fields -}}
      {{ $data := dict "field" . -}}
      "{{template "tfsdk-name" $data}}": {{ template "attr-type" .Entity }},
      {{ end}}
    },
  }
}

{{end}}
{{end}}

{{range .Types}}
{{- if .IsEnum}}
{{.Comment "// " 80}}

{{end}}
{{end}}

{{- define "complex-field-value" -}}
  {{- if .ArrayValue }}{{ template "complex-field-value" .ArrayValue }}
  {{- else if .MapValue }}{{ template "complex-field-value" .MapValue }}
  {{- else -}}
    {{- if .IsExternal -}}{{.Package.Name}}.{{- end -}}
    {{- if or .IsString .Enum -}}types.String{}
    {{- else if .IsBool -}}types.Bool{}
    {{- else if .IsInt64 -}}types.Int64{}
    {{- else if .IsFloat64 -}}types.Float64{}
    {{- else if .IsInt -}}types.Int64{}
    {{- else if .IsAny -}}struct{}{}
    {{- else if or .IsEmpty .IsObject -}}{{.PascalName}}{}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{/*
Jobs has a recursive structure: Tasks contain ForEachTasks, which contain Tasks.
Because of this, GetComplexFieldTypes and ToObjectType will never terminate.
TODO: capture visited types in the context to ensure these methods terminate,
even when they are called recursively.
*/}}
{{- define "attr-type" -}}
  {{- if .ArrayValue -}}
    {{- if .ArrayValue.IsObject -}}{{/* Objects are wraped in lists automatically. */}}
      {{ template "attr-type" .ArrayValue }}
    {{- else -}}
      basetypes.ListType{
        ElemType: {{ template "attr-type" .ArrayValue }},
      }
    {{- end -}}
  {{- else if .MapValue }}basetypes.MapType{
    ElemType: {{ template "attr-type" .MapValue }},
  }
  {{- else -}}
    {{- if or .IsString .Enum -}}types.StringType
    {{- else if .IsBool -}}types.BoolType
    {{- else if .IsInt64 -}}types.Int64Type
    {{- else if .IsFloat64 -}}types.Float64Type
    {{- else if .IsInt -}}types.Int64Type
    {{- else if .IsAny -}}types.ObjectType{}
    {{- else if .IsByteStream}}types.ObjectType{}
    {{- else if or .IsEmpty .IsObject -}}{{/* Objects are treated as lists from a TFSDK type perspective. */}}basetypes.ListType{
      ElemType: {{- if .IsExternal -}}{{.Package.Name}}_tf.{{- end -}}{{.PascalName}}{}.Type(ctx),
    }
    {{- end -}}
  {{- end -}}
{{- end -}}


{{- define "field" -}}
{{if .effective}}Effective{{end}}{{.field.PascalName}}{{if eq .field.PascalName "Type"}}_{{end}} {{template "type" .field.Entity}} `{{template "field-tag" . }}`
{{- end -}}

{{- define "field-tag" -}}
    {{- $annotations := "" -}}
	{{- if or .field.Entity.IsComputed .effective -}}
		{{- $annotations = (printf "%scomputed,optional," $annotations) -}}
	{{- else -}}
		{{- if not .field.Required -}}
 	       {{- $annotations = (printf "%soptional," $annotations) -}}
  	    {{- end -}}
		{{- if .field.Entity.IsObject -}}
 	       {{- $annotations = (printf "%sobject," $annotations) -}}
  	    {{- end -}}
	{{- end -}}
 	{{- if gt (len $annotations) 0 -}}
 	   {{- $annotations = (printf "%s" (trimSuffix "," $annotations)) -}}
 	{{- end -}}
	{{if .field.IsJson}}tfsdk:"{{ template "tfsdk-name" . }}" tf:"{{$annotations}}"{{else}}tfsdk:"-"{{end -}}
{{- end -}}

{{- define "tfsdk-name" -}}
{{- if and (ne .field.Entity.Terraform nil) (ne .field.Entity.Terraform.Alias "") -}}
{{.field.Entity.Terraform.Alias}}
{{- else -}}
{{if .effective}}effective_{{end}}{{.field.Name}}
{{- end -}}
{{- end -}}

{{- define "type" -}}
    {{- if not . }}any /* ERROR */
    {{- else if .IsExternal }}{{.Package.Name}}.{{.PascalName}}
    {{- else if .IsAny}}any
    {{- else if .IsEmpty}}types.List
    {{- else if .IsString}}types.String
    {{- else if .IsBool}}types.Bool
    {{- else if .IsInt64}}types.Int64
    {{- else if .IsFloat64}}types.Float64
    {{- else if .IsInt}}types.Int64
    {{- else if .IsByteStream}}io.ReadCloser
    {{- else if .ArrayValue }}types.List
    {{- else if .MapValue }}types.Map
    {{- else if .IsObject }}types.List{{/* Note: we use types.List for objects for now. TODO: change this to types.Object. */}}
    {{- else if .Enum }}types.String
    {{- else}}any /* MISSING TYPE */
    {{- end -}}
{{- end -}}
