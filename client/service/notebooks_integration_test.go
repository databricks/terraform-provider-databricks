package service

import (
	"archive/zip"
	"bufio"
	"bytes"
	"encoding/base64"
	"encoding/json"
	"hash/crc32"
	"io"
	"net/url"
	"sort"
	"strconv"
	"testing"

	"github.com/databrickslabs/databricks-terraform/client/model"
	"github.com/stretchr/testify/assert"
)

const fileContent string = ""

func TestNotebookCreate(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
	}

	path := "/demo-notebook-rbc"
	format := model.DBC
	language := model.Python

	client := GetIntegrationDBAPIClient()
	err := client.Notebooks().Create(path, fileContent, language, format, false)
	assert.NoError(t, err, err)

	defer func() {
		err := client.Notebooks().Delete(path, true)
		assert.NoError(t, err, err)
	}()

	notebookInfo, err := client.Notebooks().Read(path)
	assert.NoError(t, err, err)

	_, err = client.Notebooks().Export(path, format)
	assert.NoError(t, err, err)
	t.Log(notebookInfo)
}

func TestUri(t *testing.T) {
	uri := "https://sri-e2-test-workspace-3.cloud.databricks.com/api/2.0/workspace/export?format=DBC\u0026path=/demo-notebook-rbc"
	t.Log(url.PathUnescape(uri))
}
func TestNotebookUnzip(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
	}

	path := "/demo-notebook-rbc"
	format := model.DBC

	client := GetIntegrationDBAPIClient()

	err := client.Notebooks().Create(path, fileContent, model.Python, format, false)
	assert.NoError(t, err, err)

	defer func() {
		err := client.Notebooks().Delete(path, true)
		assert.NoError(t, err, err)
	}()

	export, err := client.Notebooks().Export(path, format)
	assert.NoError(t, err, err)
	exportCRC, err := convertBase64ToCheckSum(export)
	assert.NoError(t, err, err)
	expectedCRC, err := convertBase64ToCheckSum(fileContent)
	assert.NoError(t, err, err)
	assert.Equal(t, expectedCRC, exportCRC)
}

func convertBase64ToCheckSum(b64 string) (string, error) {
	dataArr, err := base64.StdEncoding.DecodeString(b64)
	if err != nil {
		return "error", err
	}
	checksum, err := convertZipBytesToCRC(dataArr)
	if err != nil {
		return strconv.Itoa(int(crc32.ChecksumIEEE(dataArr))), nil
	}
	return checksum, nil
}

func convertZipBytesToCRC(b64 []byte) (string, error) {
	r, err := zip.NewReader(bytes.NewReader(b64), int64(len(b64)))
	if err != nil {
		return "0", err
	}
	var totalSum int64
	for _, f := range r.File {
		if f.FileInfo().IsDir() == false {
			file, err := f.Open()
			if err != nil {
				return "", err
			}
			crc, err := getDBCCheckSumForCommands(file)
			if err != nil {
				return "", err
			}
			totalSum += int64(crc)
		}
	}
	return strconv.Itoa(int(totalSum)), nil
}

func getDBCCheckSumForCommands(fileIO io.Reader) (int, error) {
	var stringBuff bytes.Buffer
	scanner := bufio.NewScanner(fileIO)
	buf := make([]byte, 0, 64*1024)
	scanner.Buffer(buf, 1024*1024)
	for scanner.Scan() {
		stringBuff.WriteString(scanner.Text())
	}
	jsonString := stringBuff.Bytes()
	var notebook map[string]interface{}
	err := json.Unmarshal(jsonString, &notebook)
	if err != nil {
		return 0, err
	}
	var commandsBuffer bytes.Buffer
	commandsMap := map[int]string{}
	commands := notebook["commands"].([]interface{})
	for _, command := range commands {
		commandsMap[int(command.(map[string]interface{})["position"].(float64))] = command.(map[string]interface{})["command"].(string)
	}
	keys := make([]int, 0, len(commandsMap))
	for k := range commandsMap {
		keys = append(keys, k)
	}
	sort.Ints(keys)
	for _, k := range keys {
		commandsBuffer.WriteString(commandsMap[k])
	}
	return int(crc32.ChecksumIEEE(commandsBuffer.Bytes())), nil
}
