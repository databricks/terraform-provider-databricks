// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

package budget_policy

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/databricks/databricks-sdk-go/apierr"
	"github.com/databricks/databricks-sdk-go/service/billing"
	"github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/autogen"
	pluginfwcommon "github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/common"
	pluginfwcontext "github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/context"
	"github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/converters"
	"github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/tfschema"
	"github.com/databricks/terraform-provider-databricks/internal/service/compute_tf"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

const resourceName = "budget_policy"

var _ resource.ResourceWithConfigure = &BudgetPolicyResource{}

func ResourceBudgetPolicy() resource.Resource {
	return &BudgetPolicyResource{}
}

type BudgetPolicyResource struct {
	Client *autogen.DatabricksClient
}

// BudgetPolicy extends the main model with additional fields.
type BudgetPolicy struct {
	// List of workspaces that this budget policy will be exclusively bound to.
	// An empty binding implies that this budget policy is open to any workspace
	// in the account.
	BindingWorkspaceIds types.List `tfsdk:"binding_workspace_ids"`
	// A list of tags defined by the customer. At most 20 entries are allowed
	// per policy.
	CustomTags types.List `tfsdk:"custom_tags"`
	// The Id of the policy. This field is generated by Databricks and globally
	// unique.
	PolicyId types.String `tfsdk:"policy_id"`
	// The name of the policy. - Must be unique among active policies. - Can
	// contain only characters from the ISO 8859-1 (latin1) set. - Can't start
	// with reserved keywords such as `databricks:default-policy`.
	PolicyName types.String `tfsdk:"policy_name"`
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in the extended
// BudgetPolicy struct. Container types (types.Map, types.List, types.Set) and
// object types (types.Object) do not carry the type information of their elements in the Go
// type system. This function provides a way to retrieve the type information of the elements in
// complex fields at runtime. The values of the map are the reflected types of the contained elements.
// They must be either primitive values from the plugin framework type system
// (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF SDK values.
func (m BudgetPolicy) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"binding_workspace_ids": reflect.TypeOf(types.Int64{}),
		"custom_tags":           reflect.TypeOf(compute_tf.CustomPolicyTag{}),
	}
}

// ToObjectValue returns the object value for the resource, combining attributes from the
// embedded TFSDK model and contains additional fields.
//
// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, BudgetPolicy
// only implements ToObjectValue() and Type().
func (m BudgetPolicy) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{"binding_workspace_ids": m.BindingWorkspaceIds,
			"custom_tags": m.CustomTags,
			"policy_id":   m.PolicyId,
			"policy_name": m.PolicyName,
		},
	)
}

// Type returns the object type with attributes from both the embedded TFSDK model
// and contains additional fields.
func (m BudgetPolicy) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{"binding_workspace_ids": basetypes.ListType{
			ElemType: types.Int64Type,
		},
			"custom_tags": basetypes.ListType{
				ElemType: compute_tf.CustomPolicyTag{}.Type(ctx),
			},
			"policy_id":   types.StringType,
			"policy_name": types.StringType,
		},
	}
}

// SyncFieldsDuringCreateOrUpdate copies values from the plan into the receiver,
// including both embedded model fields and additional fields. This method is called
// during create and update.
func (to *BudgetPolicy) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from BudgetPolicy) {
	if !from.BindingWorkspaceIds.IsNull() && !from.BindingWorkspaceIds.IsUnknown() && to.BindingWorkspaceIds.IsNull() && len(from.BindingWorkspaceIds.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for BindingWorkspaceIds, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.BindingWorkspaceIds = from.BindingWorkspaceIds
	}
	if !from.CustomTags.IsNull() && !from.CustomTags.IsUnknown() && to.CustomTags.IsNull() && len(from.CustomTags.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomTags, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomTags = from.CustomTags
	}
}

// SyncFieldsDuringRead copies values from the existing state into the receiver,
// including both embedded model fields and additional fields. This method is called
// during read.
func (to *BudgetPolicy) SyncFieldsDuringRead(ctx context.Context, from BudgetPolicy) {
	if !from.BindingWorkspaceIds.IsNull() && !from.BindingWorkspaceIds.IsUnknown() && to.BindingWorkspaceIds.IsNull() && len(from.BindingWorkspaceIds.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for BindingWorkspaceIds, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.BindingWorkspaceIds = from.BindingWorkspaceIds
	}
	if !from.CustomTags.IsNull() && !from.CustomTags.IsUnknown() && to.CustomTags.IsNull() && len(from.CustomTags.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomTags, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomTags = from.CustomTags
	}
}

func (m BudgetPolicy) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["binding_workspace_ids"] = attrs["binding_workspace_ids"].SetOptional()
	attrs["custom_tags"] = attrs["custom_tags"].SetOptional()
	attrs["policy_id"] = attrs["policy_id"].SetComputed()
	attrs["policy_id"] = attrs["policy_id"].SetOptional()
	attrs["policy_id"] = attrs["policy_id"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["policy_name"] = attrs["policy_name"].SetOptional()

	attrs["policy_id"] = attrs["policy_id"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.UseStateForUnknown()).(tfschema.AttributeBuilder)
	return attrs
}

// GetBindingWorkspaceIds returns the value of the BindingWorkspaceIds field in BudgetPolicy as
// a slice of types.Int64 values.
// If the field is unknown or null, the boolean return value is false.
func (m *BudgetPolicy) GetBindingWorkspaceIds(ctx context.Context) ([]types.Int64, bool) {
	if m.BindingWorkspaceIds.IsNull() || m.BindingWorkspaceIds.IsUnknown() {
		return nil, false
	}
	var v []types.Int64
	d := m.BindingWorkspaceIds.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetBindingWorkspaceIds sets the value of the BindingWorkspaceIds field in BudgetPolicy.
func (m *BudgetPolicy) SetBindingWorkspaceIds(ctx context.Context, v []types.Int64) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["binding_workspace_ids"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.BindingWorkspaceIds = types.ListValueMust(t, vs)
}

// GetCustomTags returns the value of the CustomTags field in BudgetPolicy as
// a slice of compute_tf.CustomPolicyTag values.
// If the field is unknown or null, the boolean return value is false.
func (m *BudgetPolicy) GetCustomTags(ctx context.Context) ([]compute_tf.CustomPolicyTag, bool) {
	if m.CustomTags.IsNull() || m.CustomTags.IsUnknown() {
		return nil, false
	}
	var v []compute_tf.CustomPolicyTag
	d := m.CustomTags.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCustomTags sets the value of the CustomTags field in BudgetPolicy.
func (m *BudgetPolicy) SetCustomTags(ctx context.Context, v []compute_tf.CustomPolicyTag) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["custom_tags"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.CustomTags = types.ListValueMust(t, vs)
}

func (r *BudgetPolicyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = autogen.GetDatabricksProductionName(resourceName)
}

func (r *BudgetPolicyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	attrs, blocks := tfschema.ResourceStructToSchemaMap(ctx, BudgetPolicy{}, nil)
	resp.Schema = schema.Schema{
		Description: "Terraform schema for Databricks budget_policy",
		Attributes:  attrs,
		Blocks:      blocks,
	}
}

func (r *BudgetPolicyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	r.Client = autogen.ConfigureResource(req, resp)
}

func (r *BudgetPolicyResource) update(ctx context.Context, plan BudgetPolicy, diags *diag.Diagnostics, state *tfsdk.State) {
	var budget_policy billing.BudgetPolicy

	diags.Append(converters.TfSdkToGoSdkStruct(ctx, plan, &budget_policy)...)
	if diags.HasError() {
		return
	}

	updateRequest := billing.UpdateBudgetPolicyRequest{
		Policy:   budget_policy,
		PolicyId: plan.PolicyId.ValueString(),
	}

	client, clientDiags := r.Client.GetAccountClient()

	diags.Append(clientDiags...)
	if diags.HasError() {
		return
	}
	response, err := client.BudgetPolicy.Update(ctx, updateRequest)
	if err != nil {
		diags.AddError("failed to update budget_policy", err.Error())
		return
	}

	var newState BudgetPolicy
	diags.Append(converters.GoSdkToTfSdkStruct(ctx, response, &newState)...)
	if diags.HasError() {
		return
	}

	newState.SyncFieldsDuringCreateOrUpdate(ctx, plan)
	diags.Append(state.Set(ctx, newState)...)
}

func (r *BudgetPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	ctx = pluginfwcontext.SetUserAgentInResourceContext(ctx, resourceName)

	var plan BudgetPolicy
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var budget_policy billing.BudgetPolicy

	resp.Diagnostics.Append(converters.TfSdkToGoSdkStruct(ctx, plan, &budget_policy)...)
	if resp.Diagnostics.HasError() {
		return
	}

	createRequest := billing.CreateBudgetPolicyRequest{
		Policy: &budget_policy,
	}

	client, clientDiags := r.Client.GetAccountClient()

	resp.Diagnostics.Append(clientDiags...)
	if resp.Diagnostics.HasError() {
		return
	}

	response, err := client.BudgetPolicy.Create(ctx, createRequest)
	if err != nil {
		resp.Diagnostics.AddError("failed to create budget_policy", err.Error())
		return
	}

	var newState BudgetPolicy

	resp.Diagnostics.Append(converters.GoSdkToTfSdkStruct(ctx, response, &newState)...)

	if resp.Diagnostics.HasError() {
		return
	}

	newState.SyncFieldsDuringCreateOrUpdate(ctx, plan)

	resp.Diagnostics.Append(resp.State.Set(ctx, newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *BudgetPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	ctx = pluginfwcontext.SetUserAgentInResourceContext(ctx, resourceName)

	var existingState BudgetPolicy
	resp.Diagnostics.Append(req.State.Get(ctx, &existingState)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var readRequest billing.GetBudgetPolicyRequest
	resp.Diagnostics.Append(converters.TfSdkToGoSdkStruct(ctx, existingState, &readRequest)...)
	if resp.Diagnostics.HasError() {
		return
	}

	client, clientDiags := r.Client.GetAccountClient()

	resp.Diagnostics.Append(clientDiags...)
	if resp.Diagnostics.HasError() {
		return
	}
	response, err := client.BudgetPolicy.Get(ctx, readRequest)
	if err != nil {
		if apierr.IsMissing(err) {
			resp.State.RemoveResource(ctx)
			return
		}

		resp.Diagnostics.AddError("failed to get budget_policy", err.Error())
		return
	}

	var newState BudgetPolicy
	resp.Diagnostics.Append(converters.GoSdkToTfSdkStruct(ctx, response, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}

	newState.SyncFieldsDuringRead(ctx, existingState)

	resp.Diagnostics.Append(resp.State.Set(ctx, newState)...)
}

func (r *BudgetPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	ctx = pluginfwcontext.SetUserAgentInResourceContext(ctx, resourceName)

	var plan BudgetPolicy
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	r.update(ctx, plan, &resp.Diagnostics, &resp.State)
}

func (r *BudgetPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	ctx = pluginfwcontext.SetUserAgentInResourceContext(ctx, resourceName)

	var state BudgetPolicy
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var deleteRequest billing.DeleteBudgetPolicyRequest
	resp.Diagnostics.Append(converters.TfSdkToGoSdkStruct(ctx, state, &deleteRequest)...)
	if resp.Diagnostics.HasError() {
		return
	}

	client, clientDiags := r.Client.GetAccountClient()

	resp.Diagnostics.Append(clientDiags...)
	if resp.Diagnostics.HasError() {
		return
	}
	err := client.BudgetPolicy.Delete(ctx, deleteRequest)
	if err != nil && !apierr.IsMissing(err) {
		resp.Diagnostics.AddError("failed to delete budget_policy", err.Error())
		return
	}
}

var _ resource.ResourceWithImportState = &BudgetPolicyResource{}

func (r *BudgetPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	parts := strings.Split(req.ID, ",")

	if len(parts) != 1 || parts[0] == "" {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf(
				"Expected import identifier with format: policy_id. Got: %q",
				req.ID,
			),
		)
		return
	}

	policyId := parts[0]
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("policy_id"), policyId)...)
}
