// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.
/* 
These generated types are for terraform plugin framework to interact with the terraform state conveniently.

These types follow the same structure as the types in go-sdk. 
The only difference is that the primitive types are no longer using the go-native types, but with tfsdk types. 
Plus the json tags get converted into tfsdk tags. 
We use go-native types for lists and maps intentionally for the ease for converting these types into the go-sdk types. 
*/

package {{.Name}}_tf

import (
	{{range .ImportedPackages}}
	"github.com/databricks/databricks-sdk-go/service/{{.}}"{{end}}
	"github.com/databricks/databricks-sdk-go/service/{{.Name}}"
	"io"
	"github.com/databricks/databricks-sdk-go/marshal"
    "github.com/hashicorp/terraform-plugin-framework/types"
)
{{- $excluded := dict "ShareInfo"        (list "CreatedAt" "CreatedBy" "UpdatedAt" "UpdatedBy")
                      "SharedDataObject" (list "AddedAt" "AddedBy" "Status") -}}
{{range .Types}}
{{- if or .Fields .IsEmpty}}
{{.Comment "// " 80}}
type {{.PascalName}} struct {
    {{- $excluded := getOrDefault $excluded .PascalName (list) -}}
    {{- range .Fields}}
    {{.Comment "    // " 80}}
	{{- $data := dict "field" . "excluded" $excluded }}
	{{template "field" $data}}{{if and .Entity.IsComputed (not (in $excluded .PascalName))}}{{ $data := dict "field" . "excluded" $excluded "effective" true }}{{printf "\n"}}{{template "field" $data}}{{end}}{{end}}
}

func (newState *{{.PascalName}}) SyncEffectiveFieldsDuringCreateOrUpdate(plan {{.PascalName}}) {
  {{- range .Fields -}}
  {{- if and .Entity.IsComputed (or .Entity.IsString .Entity.IsBool .Entity.IsInt64 .Entity.IsFloat64 .Entity.IsInt .Entity.Enum) -}}
  {{- if not (in $excluded .PascalName)}}
  newState.Effective{{.PascalName}} = newState.{{.PascalName}}
  newState.{{.PascalName}} = plan.{{.PascalName}}
  {{- end}}
  {{- end}}
  {{- end}}
}

func (newState *{{.PascalName}}) SyncEffectiveFieldsDuringRead(existingState {{.PascalName}}) {
  {{- range .Fields -}}
  {{- if and .Entity.IsComputed (or .Entity.IsString .Entity.IsBool .Entity.IsInt64 .Entity.IsFloat64 .Entity.IsInt .Entity.Enum) -}}
  {{- if not (in $excluded .PascalName) -}}
  {{- $type := "" -}}
  {{- if .Entity.IsString}}{{$type = "String"}}{{end}}
  {{- if .Entity.IsBool}}{{$type = "Bool"}}{{end}}
  {{- if .Entity.IsInt64}}{{$type = "Int64"}}{{end}}
  {{- if .Entity.IsFloat64}}{{$type = "Float64"}}{{end}}
  {{- if .Entity.IsInt}}{{$type = "Int64"}}{{end}}
  {{- if .Entity.Enum}}{{$type = "String"}}{{end}}
  if existingState.Effective{{.PascalName}}.Value{{$type}}() == newState.{{.PascalName}}.Value{{$type}}() {
    newState.{{.PascalName}} = existingState.{{.PascalName}}
  }
  {{- end}}
  {{- end}}
  {{- end}}
}

{{end}}
{{end}}

{{- define "field" -}}
{{if .effective}}Effective{{end}}{{.field.PascalName}} {{template "type" .field.Entity}} `{{template "field-tag" . }}`
{{- end -}}

{{- define "field-tag" -}}
    {{- $annotations := "" -}}
	{{- if in .excluded .field.PascalName -}}
		{{- $annotations = (printf "%scomputed,optional," $annotations) -}}
	{{- else if .effective -}}
		{{- $annotations = (printf "%scomputed,optional," $annotations) -}}
	{{- else -}}
		{{- if not .field.Required -}}
 	       {{- $annotations = (printf "%soptional," $annotations) -}}
  	    {{- end -}}
		{{- if .field.Entity.IsObject -}}
 	       {{- $annotations = (printf "%sobject," $annotations) -}}
  	    {{- end -}}
	{{- end -}}
 	{{- if gt (len $annotations) 0 -}}
 	   {{- $annotations = (printf "%s" (trimSuffix "," $annotations)) -}}
 	{{- end -}}
	{{if .field.IsJson}}tfsdk:"{{if and (ne .field.Entity.Terraform nil) (ne .field.Entity.Terraform.Alias "") }}{{.field.Entity.Terraform.Alias}}{{else}}{{if .effective}}effective_{{end}}{{.field.Name}}{{end}}" tf:"{{$annotations}}"{{else}}tfsdk:"-"{{end -}}
{{- end -}}

{{- define "type" -}}
    {{- if not . }}any /* ERROR */
    {{- else if .IsExternal }}{{.Package.Name}}.{{.PascalName}}
    {{- else if .IsAny}}any
    {{- else if .IsEmpty}}[]{{.PascalName}}
    {{- else if .IsString}}types.String
    {{- else if .IsBool}}types.Bool
    {{- else if .IsInt64}}types.Int64
    {{- else if .IsFloat64}}types.Float64
    {{- else if .IsInt}}types.Int64
    {{- else if .IsByteStream}}io.ReadCloser
    {{- else if .ArrayValue }}
        {{- if .ArrayValue.IsObject }}{{template "type" .ArrayValue}}
        {{- else }}[]{{template "type" .ArrayValue}}
        {{- end }}
    {{- else if .MapValue }}map[string]{{template "type" .MapValue}}
    {{- else if .IsObject }}[]{{.PascalName}}
    {{- else if .Enum }}types.String
    {{- else}}any /* MISSING TYPE */
    {{- end -}}
{{- end -}}
