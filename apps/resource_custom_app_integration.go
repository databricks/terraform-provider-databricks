package apps

import (
	"context"

	"github.com/databricks/databricks-sdk-go/service/oauth2"
	"github.com/databricks/terraform-provider-databricks/common"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

type CustomAppIntegration struct {
	oauth2.GetCustomAppIntegrationOutput
	// OAuth client-secret generated by the Databricks. If this is a
	// confidential OAuth app client-secret will be generated.
	ClientSecret string `json:"client_secret,omitempty"`
}

func ResourceCustomAppIntegration() common.Resource {
	s := common.StructToSchema(CustomAppIntegration{}, func(m map[string]*schema.Schema) map[string]*schema.Schema {
		for _, p := range []string{"client_id", "create_time", "created_by", "creator_username", "integration_id"} {
			common.CustomizeSchemaPath(m, p).SetComputed()
		}
		for _, p := range []string{"confidential", "name", "scopes"} {
			common.CustomizeSchemaPath(m, p).SetForceNew()
		}
		common.CustomizeSchemaPath(m, "client_secret").SetSensitive().SetComputed()
		common.CustomizeSchemaPath(m, "token_access_policy", "access_token_ttl_in_minutes").SetValidateFunc(validation.IntBetween(5, 1440))
		common.CustomizeSchemaPath(m, "token_access_policy", "refresh_token_ttl_in_minutes").SetValidateFunc(validation.IntBetween(5, 129600))
		return m
	})
	return common.Resource{
		Create: func(ctx context.Context, d *schema.ResourceData, c *common.DatabricksClient) error {
			var create oauth2.CreateCustomAppIntegration
			common.DataToStructPointer(d, s, &create)
			acc, err := c.AccountClient()
			if err != nil {
				return err
			}
			integration, err := acc.CustomAppIntegration.Create(ctx, create)
			if err != nil {
				return err
			}
			d.Set("integration_id", integration.IntegrationId)
			d.Set("client_id", integration.ClientId)
			d.Set("client_secret", integration.ClientSecret)
			d.SetId(integration.IntegrationId)
			return nil
		},
		Read: func(ctx context.Context, d *schema.ResourceData, c *common.DatabricksClient) error {
			acc, err := c.AccountClient()
			if err != nil {
				return err
			}
			integration, err := acc.CustomAppIntegration.GetByIntegrationId(ctx, d.Id())
			if err != nil {
				return err
			}
			return common.StructToData(integration, s, d)
		},
		Update: func(ctx context.Context, d *schema.ResourceData, c *common.DatabricksClient) error {
			var update oauth2.UpdateCustomAppIntegration
			update.IntegrationId = d.Id()
			common.DataToStructPointer(d, s, &update)
			acc, err := c.AccountClient()
			if err != nil {
				return err
			}
			return acc.CustomAppIntegration.Update(ctx, update)
		},
		Delete: func(ctx context.Context, d *schema.ResourceData, c *common.DatabricksClient) error {
			acc, err := c.AccountClient()
			if err != nil {
				return err
			}
			return acc.CustomAppIntegration.DeleteByIntegrationId(ctx, d.Id())
		},
		Schema: s,
	}
}
