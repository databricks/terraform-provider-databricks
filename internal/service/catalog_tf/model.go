// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.
/*
These generated types are for terraform plugin framework to interact with the terraform state conveniently.

These types follow the same structure as the types in go-sdk.
The only difference is that the primitive types are no longer using the go-native types, but with tfsdk types.
Plus the json tags get converted into tfsdk tags.
We use go-native types for lists and maps intentionally for the ease for converting these types into the go-sdk types.
*/

package catalog_tf

import (
	"context"
	"reflect"

	pluginfwcommon "github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/common"
	"github.com/databricks/terraform-provider-databricks/internal/providers/pluginfw/tfschema"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

type AccessRequestDestinations struct {
	// Indicates whether any destinations are hidden from the caller due to a
	// lack of permissions. This value is true if the caller does not have
	// permission to see all destinations.
	AreAnyDestinationsHidden types.Bool `tfsdk:"are_any_destinations_hidden"`
	// The access request destinations for the securable.
	Destinations types.List `tfsdk:"destinations"`
	// The securable for which the access request destinations are being
	// retrieved.
	Securable types.Object `tfsdk:"securable"`
}

func (to *AccessRequestDestinations) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccessRequestDestinations) {
	if !from.Securable.IsNull() && !from.Securable.IsUnknown() {
		if toSecurable, ok := to.GetSecurable(ctx); ok {
			if fromSecurable, ok := from.GetSecurable(ctx); ok {
				// Recursively sync the fields of Securable
				toSecurable.SyncFieldsDuringCreateOrUpdate(ctx, fromSecurable)
				to.SetSecurable(ctx, toSecurable)
			}
		}
	}
}

func (to *AccessRequestDestinations) SyncFieldsDuringRead(ctx context.Context, from AccessRequestDestinations) {
	if !from.Securable.IsNull() && !from.Securable.IsUnknown() {
		if toSecurable, ok := to.GetSecurable(ctx); ok {
			if fromSecurable, ok := from.GetSecurable(ctx); ok {
				toSecurable.SyncFieldsDuringRead(ctx, fromSecurable)
				to.SetSecurable(ctx, toSecurable)
			}
		}
	}
}

func (m AccessRequestDestinations) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["are_any_destinations_hidden"] = attrs["are_any_destinations_hidden"].SetComputed()
	attrs["destinations"] = attrs["destinations"].SetRequired()
	attrs["securable"] = attrs["securable"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccessRequestDestinations.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccessRequestDestinations) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"destinations": reflect.TypeOf(NotificationDestination{}),
		"securable":    reflect.TypeOf(Securable{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccessRequestDestinations
// only implements ToObjectValue() and Type().
func (m AccessRequestDestinations) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"are_any_destinations_hidden": m.AreAnyDestinationsHidden,
			"destinations":                m.Destinations,
			"securable":                   m.Securable,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccessRequestDestinations) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"are_any_destinations_hidden": types.BoolType,
			"destinations": basetypes.ListType{
				ElemType: NotificationDestination{}.Type(ctx),
			},
			"securable": Securable{}.Type(ctx),
		},
	}
}

// GetDestinations returns the value of the Destinations field in AccessRequestDestinations as
// a slice of NotificationDestination values.
// If the field is unknown or null, the boolean return value is false.
func (m *AccessRequestDestinations) GetDestinations(ctx context.Context) ([]NotificationDestination, bool) {
	if m.Destinations.IsNull() || m.Destinations.IsUnknown() {
		return nil, false
	}
	var v []NotificationDestination
	d := m.Destinations.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDestinations sets the value of the Destinations field in AccessRequestDestinations.
func (m *AccessRequestDestinations) SetDestinations(ctx context.Context, v []NotificationDestination) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["destinations"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Destinations = types.ListValueMust(t, vs)
}

// GetSecurable returns the value of the Securable field in AccessRequestDestinations as
// a Securable value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccessRequestDestinations) GetSecurable(ctx context.Context) (Securable, bool) {
	var e Securable
	if m.Securable.IsNull() || m.Securable.IsUnknown() {
		return e, false
	}
	var v Securable
	d := m.Securable.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSecurable sets the value of the Securable field in AccessRequestDestinations.
func (m *AccessRequestDestinations) SetSecurable(ctx context.Context, v Securable) {
	vs := v.ToObjectValue(ctx)
	m.Securable = vs
}

// Properties of the new metastore.
type AccountsCreateMetastore struct {
	MetastoreInfo types.Object `tfsdk:"metastore_info"`
}

func (to *AccountsCreateMetastore) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsCreateMetastore) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				// Recursively sync the fields of MetastoreInfo
				toMetastoreInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (to *AccountsCreateMetastore) SyncFieldsDuringRead(ctx context.Context, from AccountsCreateMetastore) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				toMetastoreInfo.SyncFieldsDuringRead(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (m AccountsCreateMetastore) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_info"] = attrs["metastore_info"].SetOptional()
	attrs["account_id"] = attrs["account_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsCreateMetastore.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsCreateMetastore) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_info": reflect.TypeOf(CreateAccountsMetastore{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsCreateMetastore
// only implements ToObjectValue() and Type().
func (m AccountsCreateMetastore) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_info": m.MetastoreInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsCreateMetastore) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_info": CreateAccountsMetastore{}.Type(ctx),
		},
	}
}

// GetMetastoreInfo returns the value of the MetastoreInfo field in AccountsCreateMetastore as
// a CreateAccountsMetastore value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsCreateMetastore) GetMetastoreInfo(ctx context.Context) (CreateAccountsMetastore, bool) {
	var e CreateAccountsMetastore
	if m.MetastoreInfo.IsNull() || m.MetastoreInfo.IsUnknown() {
		return e, false
	}
	var v CreateAccountsMetastore
	d := m.MetastoreInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreInfo sets the value of the MetastoreInfo field in AccountsCreateMetastore.
func (m *AccountsCreateMetastore) SetMetastoreInfo(ctx context.Context, v CreateAccountsMetastore) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreInfo = vs
}

// The mapping from workspace to metastore.
type AccountsCreateMetastoreAssignment struct {
	MetastoreAssignment types.Object `tfsdk:"metastore_assignment"`
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *AccountsCreateMetastoreAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsCreateMetastoreAssignment) {
	if !from.MetastoreAssignment.IsNull() && !from.MetastoreAssignment.IsUnknown() {
		if toMetastoreAssignment, ok := to.GetMetastoreAssignment(ctx); ok {
			if fromMetastoreAssignment, ok := from.GetMetastoreAssignment(ctx); ok {
				// Recursively sync the fields of MetastoreAssignment
				toMetastoreAssignment.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreAssignment)
				to.SetMetastoreAssignment(ctx, toMetastoreAssignment)
			}
		}
	}
}

func (to *AccountsCreateMetastoreAssignment) SyncFieldsDuringRead(ctx context.Context, from AccountsCreateMetastoreAssignment) {
	if !from.MetastoreAssignment.IsNull() && !from.MetastoreAssignment.IsUnknown() {
		if toMetastoreAssignment, ok := to.GetMetastoreAssignment(ctx); ok {
			if fromMetastoreAssignment, ok := from.GetMetastoreAssignment(ctx); ok {
				toMetastoreAssignment.SyncFieldsDuringRead(ctx, fromMetastoreAssignment)
				to.SetMetastoreAssignment(ctx, toMetastoreAssignment)
			}
		}
	}
}

func (m AccountsCreateMetastoreAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_assignment"] = attrs["metastore_assignment"].SetOptional()
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsCreateMetastoreAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsCreateMetastoreAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_assignment": reflect.TypeOf(CreateMetastoreAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsCreateMetastoreAssignment
// only implements ToObjectValue() and Type().
func (m AccountsCreateMetastoreAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_assignment": m.MetastoreAssignment,
			"metastore_id":         m.MetastoreId,
			"workspace_id":         m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsCreateMetastoreAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_assignment": CreateMetastoreAssignment{}.Type(ctx),
			"metastore_id":         types.StringType,
			"workspace_id":         types.Int64Type,
		},
	}
}

// GetMetastoreAssignment returns the value of the MetastoreAssignment field in AccountsCreateMetastoreAssignment as
// a CreateMetastoreAssignment value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsCreateMetastoreAssignment) GetMetastoreAssignment(ctx context.Context) (CreateMetastoreAssignment, bool) {
	var e CreateMetastoreAssignment
	if m.MetastoreAssignment.IsNull() || m.MetastoreAssignment.IsUnknown() {
		return e, false
	}
	var v CreateMetastoreAssignment
	d := m.MetastoreAssignment.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreAssignment sets the value of the MetastoreAssignment field in AccountsCreateMetastoreAssignment.
func (m *AccountsCreateMetastoreAssignment) SetMetastoreAssignment(ctx context.Context, v CreateMetastoreAssignment) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreAssignment = vs
}

// The metastore assignment was successfully created.
type AccountsCreateMetastoreAssignmentResponse struct {
}

func (to *AccountsCreateMetastoreAssignmentResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsCreateMetastoreAssignmentResponse) {
}

func (to *AccountsCreateMetastoreAssignmentResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsCreateMetastoreAssignmentResponse) {
}

func (m AccountsCreateMetastoreAssignmentResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsCreateMetastoreAssignmentResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsCreateMetastoreAssignmentResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsCreateMetastoreAssignmentResponse
// only implements ToObjectValue() and Type().
func (m AccountsCreateMetastoreAssignmentResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsCreateMetastoreAssignmentResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type AccountsCreateMetastoreResponse struct {
	MetastoreInfo types.Object `tfsdk:"metastore_info"`
}

func (to *AccountsCreateMetastoreResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsCreateMetastoreResponse) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				// Recursively sync the fields of MetastoreInfo
				toMetastoreInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (to *AccountsCreateMetastoreResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsCreateMetastoreResponse) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				toMetastoreInfo.SyncFieldsDuringRead(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (m AccountsCreateMetastoreResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_info"] = attrs["metastore_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsCreateMetastoreResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsCreateMetastoreResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_info": reflect.TypeOf(MetastoreInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsCreateMetastoreResponse
// only implements ToObjectValue() and Type().
func (m AccountsCreateMetastoreResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_info": m.MetastoreInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsCreateMetastoreResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_info": MetastoreInfo{}.Type(ctx),
		},
	}
}

// GetMetastoreInfo returns the value of the MetastoreInfo field in AccountsCreateMetastoreResponse as
// a MetastoreInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsCreateMetastoreResponse) GetMetastoreInfo(ctx context.Context) (MetastoreInfo, bool) {
	var e MetastoreInfo
	if m.MetastoreInfo.IsNull() || m.MetastoreInfo.IsUnknown() {
		return e, false
	}
	var v MetastoreInfo
	d := m.MetastoreInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreInfo sets the value of the MetastoreInfo field in AccountsCreateMetastoreResponse.
func (m *AccountsCreateMetastoreResponse) SetMetastoreInfo(ctx context.Context, v MetastoreInfo) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreInfo = vs
}

type AccountsCreateStorageCredential struct {
	CredentialInfo types.Object `tfsdk:"credential_info"`
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Optional, default false. Supplying true to this argument skips validation
	// of the created set of credentials.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
}

func (to *AccountsCreateStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsCreateStorageCredential) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				// Recursively sync the fields of CredentialInfo
				toCredentialInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (to *AccountsCreateStorageCredential) SyncFieldsDuringRead(ctx context.Context, from AccountsCreateStorageCredential) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				toCredentialInfo.SyncFieldsDuringRead(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (m AccountsCreateStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_info"] = attrs["credential_info"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsCreateStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsCreateStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"credential_info": reflect.TypeOf(CreateAccountsStorageCredential{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsCreateStorageCredential
// only implements ToObjectValue() and Type().
func (m AccountsCreateStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_info": m.CredentialInfo,
			"metastore_id":    m.MetastoreId,
			"skip_validation": m.SkipValidation,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsCreateStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_info": CreateAccountsStorageCredential{}.Type(ctx),
			"metastore_id":    types.StringType,
			"skip_validation": types.BoolType,
		},
	}
}

// GetCredentialInfo returns the value of the CredentialInfo field in AccountsCreateStorageCredential as
// a CreateAccountsStorageCredential value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsCreateStorageCredential) GetCredentialInfo(ctx context.Context) (CreateAccountsStorageCredential, bool) {
	var e CreateAccountsStorageCredential
	if m.CredentialInfo.IsNull() || m.CredentialInfo.IsUnknown() {
		return e, false
	}
	var v CreateAccountsStorageCredential
	d := m.CredentialInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredentialInfo sets the value of the CredentialInfo field in AccountsCreateStorageCredential.
func (m *AccountsCreateStorageCredential) SetCredentialInfo(ctx context.Context, v CreateAccountsStorageCredential) {
	vs := v.ToObjectValue(ctx)
	m.CredentialInfo = vs
}

type AccountsCreateStorageCredentialInfo struct {
	CredentialInfo types.Object `tfsdk:"credential_info"`
}

func (to *AccountsCreateStorageCredentialInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsCreateStorageCredentialInfo) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				// Recursively sync the fields of CredentialInfo
				toCredentialInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (to *AccountsCreateStorageCredentialInfo) SyncFieldsDuringRead(ctx context.Context, from AccountsCreateStorageCredentialInfo) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				toCredentialInfo.SyncFieldsDuringRead(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (m AccountsCreateStorageCredentialInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_info"] = attrs["credential_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsCreateStorageCredentialInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsCreateStorageCredentialInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"credential_info": reflect.TypeOf(StorageCredentialInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsCreateStorageCredentialInfo
// only implements ToObjectValue() and Type().
func (m AccountsCreateStorageCredentialInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_info": m.CredentialInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsCreateStorageCredentialInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_info": StorageCredentialInfo{}.Type(ctx),
		},
	}
}

// GetCredentialInfo returns the value of the CredentialInfo field in AccountsCreateStorageCredentialInfo as
// a StorageCredentialInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsCreateStorageCredentialInfo) GetCredentialInfo(ctx context.Context) (StorageCredentialInfo, bool) {
	var e StorageCredentialInfo
	if m.CredentialInfo.IsNull() || m.CredentialInfo.IsUnknown() {
		return e, false
	}
	var v StorageCredentialInfo
	d := m.CredentialInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredentialInfo sets the value of the CredentialInfo field in AccountsCreateStorageCredentialInfo.
func (m *AccountsCreateStorageCredentialInfo) SetCredentialInfo(ctx context.Context, v StorageCredentialInfo) {
	vs := v.ToObjectValue(ctx)
	m.CredentialInfo = vs
}

// The metastore assignment was successfully deleted.
type AccountsDeleteMetastoreAssignmentResponse struct {
}

func (to *AccountsDeleteMetastoreAssignmentResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsDeleteMetastoreAssignmentResponse) {
}

func (to *AccountsDeleteMetastoreAssignmentResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsDeleteMetastoreAssignmentResponse) {
}

func (m AccountsDeleteMetastoreAssignmentResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsDeleteMetastoreAssignmentResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsDeleteMetastoreAssignmentResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsDeleteMetastoreAssignmentResponse
// only implements ToObjectValue() and Type().
func (m AccountsDeleteMetastoreAssignmentResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsDeleteMetastoreAssignmentResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// The metastore was successfully deleted.
type AccountsDeleteMetastoreResponse struct {
}

func (to *AccountsDeleteMetastoreResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsDeleteMetastoreResponse) {
}

func (to *AccountsDeleteMetastoreResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsDeleteMetastoreResponse) {
}

func (m AccountsDeleteMetastoreResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsDeleteMetastoreResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsDeleteMetastoreResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsDeleteMetastoreResponse
// only implements ToObjectValue() and Type().
func (m AccountsDeleteMetastoreResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsDeleteMetastoreResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// The storage credential was successfully deleted.
type AccountsDeleteStorageCredentialResponse struct {
}

func (to *AccountsDeleteStorageCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsDeleteStorageCredentialResponse) {
}

func (to *AccountsDeleteStorageCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsDeleteStorageCredentialResponse) {
}

func (m AccountsDeleteStorageCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsDeleteStorageCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsDeleteStorageCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsDeleteStorageCredentialResponse
// only implements ToObjectValue() and Type().
func (m AccountsDeleteStorageCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsDeleteStorageCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// The metastore was successfully returned.
type AccountsGetMetastoreResponse struct {
	MetastoreInfo types.Object `tfsdk:"metastore_info"`
}

func (to *AccountsGetMetastoreResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsGetMetastoreResponse) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				// Recursively sync the fields of MetastoreInfo
				toMetastoreInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (to *AccountsGetMetastoreResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsGetMetastoreResponse) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				toMetastoreInfo.SyncFieldsDuringRead(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (m AccountsGetMetastoreResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_info"] = attrs["metastore_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsGetMetastoreResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsGetMetastoreResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_info": reflect.TypeOf(MetastoreInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsGetMetastoreResponse
// only implements ToObjectValue() and Type().
func (m AccountsGetMetastoreResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_info": m.MetastoreInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsGetMetastoreResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_info": MetastoreInfo{}.Type(ctx),
		},
	}
}

// GetMetastoreInfo returns the value of the MetastoreInfo field in AccountsGetMetastoreResponse as
// a MetastoreInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsGetMetastoreResponse) GetMetastoreInfo(ctx context.Context) (MetastoreInfo, bool) {
	var e MetastoreInfo
	if m.MetastoreInfo.IsNull() || m.MetastoreInfo.IsUnknown() {
		return e, false
	}
	var v MetastoreInfo
	d := m.MetastoreInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreInfo sets the value of the MetastoreInfo field in AccountsGetMetastoreResponse.
func (m *AccountsGetMetastoreResponse) SetMetastoreInfo(ctx context.Context, v MetastoreInfo) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreInfo = vs
}

// Metastores were returned successfully.
type AccountsListMetastoresResponse struct {
	// An array of metastore information objects.
	Metastores types.List `tfsdk:"metastores"`
}

func (to *AccountsListMetastoresResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsListMetastoresResponse) {
	if !from.Metastores.IsNull() && !from.Metastores.IsUnknown() && to.Metastores.IsNull() && len(from.Metastores.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Metastores, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Metastores = from.Metastores
	}
}

func (to *AccountsListMetastoresResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsListMetastoresResponse) {
	if !from.Metastores.IsNull() && !from.Metastores.IsUnknown() && to.Metastores.IsNull() && len(from.Metastores.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Metastores, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Metastores = from.Metastores
	}
}

func (m AccountsListMetastoresResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastores"] = attrs["metastores"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsListMetastoresResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsListMetastoresResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastores": reflect.TypeOf(MetastoreInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsListMetastoresResponse
// only implements ToObjectValue() and Type().
func (m AccountsListMetastoresResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastores": m.Metastores,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsListMetastoresResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastores": basetypes.ListType{
				ElemType: MetastoreInfo{}.Type(ctx),
			},
		},
	}
}

// GetMetastores returns the value of the Metastores field in AccountsListMetastoresResponse as
// a slice of MetastoreInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsListMetastoresResponse) GetMetastores(ctx context.Context) ([]MetastoreInfo, bool) {
	if m.Metastores.IsNull() || m.Metastores.IsUnknown() {
		return nil, false
	}
	var v []MetastoreInfo
	d := m.Metastores.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastores sets the value of the Metastores field in AccountsListMetastoresResponse.
func (m *AccountsListMetastoresResponse) SetMetastores(ctx context.Context, v []MetastoreInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["metastores"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Metastores = types.ListValueMust(t, vs)
}

// The workspace metastore assignment was successfully returned.
type AccountsMetastoreAssignment struct {
	MetastoreAssignment types.Object `tfsdk:"metastore_assignment"`
}

func (to *AccountsMetastoreAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsMetastoreAssignment) {
	if !from.MetastoreAssignment.IsNull() && !from.MetastoreAssignment.IsUnknown() {
		if toMetastoreAssignment, ok := to.GetMetastoreAssignment(ctx); ok {
			if fromMetastoreAssignment, ok := from.GetMetastoreAssignment(ctx); ok {
				// Recursively sync the fields of MetastoreAssignment
				toMetastoreAssignment.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreAssignment)
				to.SetMetastoreAssignment(ctx, toMetastoreAssignment)
			}
		}
	}
}

func (to *AccountsMetastoreAssignment) SyncFieldsDuringRead(ctx context.Context, from AccountsMetastoreAssignment) {
	if !from.MetastoreAssignment.IsNull() && !from.MetastoreAssignment.IsUnknown() {
		if toMetastoreAssignment, ok := to.GetMetastoreAssignment(ctx); ok {
			if fromMetastoreAssignment, ok := from.GetMetastoreAssignment(ctx); ok {
				toMetastoreAssignment.SyncFieldsDuringRead(ctx, fromMetastoreAssignment)
				to.SetMetastoreAssignment(ctx, toMetastoreAssignment)
			}
		}
	}
}

func (m AccountsMetastoreAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_assignment"] = attrs["metastore_assignment"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsMetastoreAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsMetastoreAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_assignment": reflect.TypeOf(MetastoreAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsMetastoreAssignment
// only implements ToObjectValue() and Type().
func (m AccountsMetastoreAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_assignment": m.MetastoreAssignment,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsMetastoreAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_assignment": MetastoreAssignment{}.Type(ctx),
		},
	}
}

// GetMetastoreAssignment returns the value of the MetastoreAssignment field in AccountsMetastoreAssignment as
// a MetastoreAssignment value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsMetastoreAssignment) GetMetastoreAssignment(ctx context.Context) (MetastoreAssignment, bool) {
	var e MetastoreAssignment
	if m.MetastoreAssignment.IsNull() || m.MetastoreAssignment.IsUnknown() {
		return e, false
	}
	var v MetastoreAssignment
	d := m.MetastoreAssignment.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreAssignment sets the value of the MetastoreAssignment field in AccountsMetastoreAssignment.
func (m *AccountsMetastoreAssignment) SetMetastoreAssignment(ctx context.Context, v MetastoreAssignment) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreAssignment = vs
}

// The storage credential was successfully retrieved.
type AccountsStorageCredentialInfo struct {
	CredentialInfo types.Object `tfsdk:"credential_info"`
}

func (to *AccountsStorageCredentialInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsStorageCredentialInfo) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				// Recursively sync the fields of CredentialInfo
				toCredentialInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (to *AccountsStorageCredentialInfo) SyncFieldsDuringRead(ctx context.Context, from AccountsStorageCredentialInfo) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				toCredentialInfo.SyncFieldsDuringRead(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (m AccountsStorageCredentialInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_info"] = attrs["credential_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsStorageCredentialInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsStorageCredentialInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"credential_info": reflect.TypeOf(StorageCredentialInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsStorageCredentialInfo
// only implements ToObjectValue() and Type().
func (m AccountsStorageCredentialInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_info": m.CredentialInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsStorageCredentialInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_info": StorageCredentialInfo{}.Type(ctx),
		},
	}
}

// GetCredentialInfo returns the value of the CredentialInfo field in AccountsStorageCredentialInfo as
// a StorageCredentialInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsStorageCredentialInfo) GetCredentialInfo(ctx context.Context) (StorageCredentialInfo, bool) {
	var e StorageCredentialInfo
	if m.CredentialInfo.IsNull() || m.CredentialInfo.IsUnknown() {
		return e, false
	}
	var v StorageCredentialInfo
	d := m.CredentialInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredentialInfo sets the value of the CredentialInfo field in AccountsStorageCredentialInfo.
func (m *AccountsStorageCredentialInfo) SetCredentialInfo(ctx context.Context, v StorageCredentialInfo) {
	vs := v.ToObjectValue(ctx)
	m.CredentialInfo = vs
}

// Properties of the metastore to change.
type AccountsUpdateMetastore struct {
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Properties of the metastore to change.
	MetastoreInfo types.Object `tfsdk:"metastore_info"`
}

func (to *AccountsUpdateMetastore) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsUpdateMetastore) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				// Recursively sync the fields of MetastoreInfo
				toMetastoreInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (to *AccountsUpdateMetastore) SyncFieldsDuringRead(ctx context.Context, from AccountsUpdateMetastore) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				toMetastoreInfo.SyncFieldsDuringRead(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (m AccountsUpdateMetastore) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_info"] = attrs["metastore_info"].SetOptional()
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsUpdateMetastore.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsUpdateMetastore) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_info": reflect.TypeOf(UpdateAccountsMetastore{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsUpdateMetastore
// only implements ToObjectValue() and Type().
func (m AccountsUpdateMetastore) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id":   m.MetastoreId,
			"metastore_info": m.MetastoreInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsUpdateMetastore) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id":   types.StringType,
			"metastore_info": UpdateAccountsMetastore{}.Type(ctx),
		},
	}
}

// GetMetastoreInfo returns the value of the MetastoreInfo field in AccountsUpdateMetastore as
// a UpdateAccountsMetastore value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsUpdateMetastore) GetMetastoreInfo(ctx context.Context) (UpdateAccountsMetastore, bool) {
	var e UpdateAccountsMetastore
	if m.MetastoreInfo.IsNull() || m.MetastoreInfo.IsUnknown() {
		return e, false
	}
	var v UpdateAccountsMetastore
	d := m.MetastoreInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreInfo sets the value of the MetastoreInfo field in AccountsUpdateMetastore.
func (m *AccountsUpdateMetastore) SetMetastoreInfo(ctx context.Context, v UpdateAccountsMetastore) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreInfo = vs
}

// The metastore assignment to update.
type AccountsUpdateMetastoreAssignment struct {
	MetastoreAssignment types.Object `tfsdk:"metastore_assignment"`
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *AccountsUpdateMetastoreAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsUpdateMetastoreAssignment) {
	if !from.MetastoreAssignment.IsNull() && !from.MetastoreAssignment.IsUnknown() {
		if toMetastoreAssignment, ok := to.GetMetastoreAssignment(ctx); ok {
			if fromMetastoreAssignment, ok := from.GetMetastoreAssignment(ctx); ok {
				// Recursively sync the fields of MetastoreAssignment
				toMetastoreAssignment.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreAssignment)
				to.SetMetastoreAssignment(ctx, toMetastoreAssignment)
			}
		}
	}
}

func (to *AccountsUpdateMetastoreAssignment) SyncFieldsDuringRead(ctx context.Context, from AccountsUpdateMetastoreAssignment) {
	if !from.MetastoreAssignment.IsNull() && !from.MetastoreAssignment.IsUnknown() {
		if toMetastoreAssignment, ok := to.GetMetastoreAssignment(ctx); ok {
			if fromMetastoreAssignment, ok := from.GetMetastoreAssignment(ctx); ok {
				toMetastoreAssignment.SyncFieldsDuringRead(ctx, fromMetastoreAssignment)
				to.SetMetastoreAssignment(ctx, toMetastoreAssignment)
			}
		}
	}
}

func (m AccountsUpdateMetastoreAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_assignment"] = attrs["metastore_assignment"].SetOptional()
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsUpdateMetastoreAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsUpdateMetastoreAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_assignment": reflect.TypeOf(UpdateMetastoreAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsUpdateMetastoreAssignment
// only implements ToObjectValue() and Type().
func (m AccountsUpdateMetastoreAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_assignment": m.MetastoreAssignment,
			"metastore_id":         m.MetastoreId,
			"workspace_id":         m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsUpdateMetastoreAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_assignment": UpdateMetastoreAssignment{}.Type(ctx),
			"metastore_id":         types.StringType,
			"workspace_id":         types.Int64Type,
		},
	}
}

// GetMetastoreAssignment returns the value of the MetastoreAssignment field in AccountsUpdateMetastoreAssignment as
// a UpdateMetastoreAssignment value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsUpdateMetastoreAssignment) GetMetastoreAssignment(ctx context.Context) (UpdateMetastoreAssignment, bool) {
	var e UpdateMetastoreAssignment
	if m.MetastoreAssignment.IsNull() || m.MetastoreAssignment.IsUnknown() {
		return e, false
	}
	var v UpdateMetastoreAssignment
	d := m.MetastoreAssignment.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreAssignment sets the value of the MetastoreAssignment field in AccountsUpdateMetastoreAssignment.
func (m *AccountsUpdateMetastoreAssignment) SetMetastoreAssignment(ctx context.Context, v UpdateMetastoreAssignment) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreAssignment = vs
}

// The metastore assignment was successfully updated.
type AccountsUpdateMetastoreAssignmentResponse struct {
}

func (to *AccountsUpdateMetastoreAssignmentResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsUpdateMetastoreAssignmentResponse) {
}

func (to *AccountsUpdateMetastoreAssignmentResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsUpdateMetastoreAssignmentResponse) {
}

func (m AccountsUpdateMetastoreAssignmentResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsUpdateMetastoreAssignmentResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsUpdateMetastoreAssignmentResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsUpdateMetastoreAssignmentResponse
// only implements ToObjectValue() and Type().
func (m AccountsUpdateMetastoreAssignmentResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsUpdateMetastoreAssignmentResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// The metastore update request succeeded.
type AccountsUpdateMetastoreResponse struct {
	MetastoreInfo types.Object `tfsdk:"metastore_info"`
}

func (to *AccountsUpdateMetastoreResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsUpdateMetastoreResponse) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				// Recursively sync the fields of MetastoreInfo
				toMetastoreInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (to *AccountsUpdateMetastoreResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsUpdateMetastoreResponse) {
	if !from.MetastoreInfo.IsNull() && !from.MetastoreInfo.IsUnknown() {
		if toMetastoreInfo, ok := to.GetMetastoreInfo(ctx); ok {
			if fromMetastoreInfo, ok := from.GetMetastoreInfo(ctx); ok {
				toMetastoreInfo.SyncFieldsDuringRead(ctx, fromMetastoreInfo)
				to.SetMetastoreInfo(ctx, toMetastoreInfo)
			}
		}
	}
}

func (m AccountsUpdateMetastoreResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_info"] = attrs["metastore_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsUpdateMetastoreResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsUpdateMetastoreResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastore_info": reflect.TypeOf(MetastoreInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsUpdateMetastoreResponse
// only implements ToObjectValue() and Type().
func (m AccountsUpdateMetastoreResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_info": m.MetastoreInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsUpdateMetastoreResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_info": MetastoreInfo{}.Type(ctx),
		},
	}
}

// GetMetastoreInfo returns the value of the MetastoreInfo field in AccountsUpdateMetastoreResponse as
// a MetastoreInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsUpdateMetastoreResponse) GetMetastoreInfo(ctx context.Context) (MetastoreInfo, bool) {
	var e MetastoreInfo
	if m.MetastoreInfo.IsNull() || m.MetastoreInfo.IsUnknown() {
		return e, false
	}
	var v MetastoreInfo
	d := m.MetastoreInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastoreInfo sets the value of the MetastoreInfo field in AccountsUpdateMetastoreResponse.
func (m *AccountsUpdateMetastoreResponse) SetMetastoreInfo(ctx context.Context, v MetastoreInfo) {
	vs := v.ToObjectValue(ctx)
	m.MetastoreInfo = vs
}

// The storage credential to update.
type AccountsUpdateStorageCredential struct {
	CredentialInfo types.Object `tfsdk:"credential_info"`
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Optional. Supplying true to this argument skips validation of the updated
	// set of credentials.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
	// Name of the storage credential.
	StorageCredentialName types.String `tfsdk:"-"`
}

func (to *AccountsUpdateStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsUpdateStorageCredential) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				// Recursively sync the fields of CredentialInfo
				toCredentialInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (to *AccountsUpdateStorageCredential) SyncFieldsDuringRead(ctx context.Context, from AccountsUpdateStorageCredential) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				toCredentialInfo.SyncFieldsDuringRead(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (m AccountsUpdateStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_info"] = attrs["credential_info"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["storage_credential_name"] = attrs["storage_credential_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsUpdateStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsUpdateStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"credential_info": reflect.TypeOf(UpdateAccountsStorageCredential{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsUpdateStorageCredential
// only implements ToObjectValue() and Type().
func (m AccountsUpdateStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_info":         m.CredentialInfo,
			"metastore_id":            m.MetastoreId,
			"skip_validation":         m.SkipValidation,
			"storage_credential_name": m.StorageCredentialName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsUpdateStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_info":         UpdateAccountsStorageCredential{}.Type(ctx),
			"metastore_id":            types.StringType,
			"skip_validation":         types.BoolType,
			"storage_credential_name": types.StringType,
		},
	}
}

// GetCredentialInfo returns the value of the CredentialInfo field in AccountsUpdateStorageCredential as
// a UpdateAccountsStorageCredential value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsUpdateStorageCredential) GetCredentialInfo(ctx context.Context) (UpdateAccountsStorageCredential, bool) {
	var e UpdateAccountsStorageCredential
	if m.CredentialInfo.IsNull() || m.CredentialInfo.IsUnknown() {
		return e, false
	}
	var v UpdateAccountsStorageCredential
	d := m.CredentialInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredentialInfo sets the value of the CredentialInfo field in AccountsUpdateStorageCredential.
func (m *AccountsUpdateStorageCredential) SetCredentialInfo(ctx context.Context, v UpdateAccountsStorageCredential) {
	vs := v.ToObjectValue(ctx)
	m.CredentialInfo = vs
}

// The storage credential was successfully updated.
type AccountsUpdateStorageCredentialResponse struct {
	CredentialInfo types.Object `tfsdk:"credential_info"`
}

func (to *AccountsUpdateStorageCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AccountsUpdateStorageCredentialResponse) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				// Recursively sync the fields of CredentialInfo
				toCredentialInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (to *AccountsUpdateStorageCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from AccountsUpdateStorageCredentialResponse) {
	if !from.CredentialInfo.IsNull() && !from.CredentialInfo.IsUnknown() {
		if toCredentialInfo, ok := to.GetCredentialInfo(ctx); ok {
			if fromCredentialInfo, ok := from.GetCredentialInfo(ctx); ok {
				toCredentialInfo.SyncFieldsDuringRead(ctx, fromCredentialInfo)
				to.SetCredentialInfo(ctx, toCredentialInfo)
			}
		}
	}
}

func (m AccountsUpdateStorageCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_info"] = attrs["credential_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AccountsUpdateStorageCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AccountsUpdateStorageCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"credential_info": reflect.TypeOf(StorageCredentialInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AccountsUpdateStorageCredentialResponse
// only implements ToObjectValue() and Type().
func (m AccountsUpdateStorageCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_info": m.CredentialInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AccountsUpdateStorageCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_info": StorageCredentialInfo{}.Type(ctx),
		},
	}
}

// GetCredentialInfo returns the value of the CredentialInfo field in AccountsUpdateStorageCredentialResponse as
// a StorageCredentialInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *AccountsUpdateStorageCredentialResponse) GetCredentialInfo(ctx context.Context) (StorageCredentialInfo, bool) {
	var e StorageCredentialInfo
	if m.CredentialInfo.IsNull() || m.CredentialInfo.IsUnknown() {
		return e, false
	}
	var v StorageCredentialInfo
	d := m.CredentialInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredentialInfo sets the value of the CredentialInfo field in AccountsUpdateStorageCredentialResponse.
func (m *AccountsUpdateStorageCredentialResponse) SetCredentialInfo(ctx context.Context, v StorageCredentialInfo) {
	vs := v.ToObjectValue(ctx)
	m.CredentialInfo = vs
}

type ArtifactAllowlistInfo struct {
	// A list of allowed artifact match patterns.
	ArtifactMatchers types.List `tfsdk:"artifact_matchers"`
	// Time at which this artifact allowlist was set, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of the user who set the artifact allowlist.
	CreatedBy types.String `tfsdk:"created_by"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
}

func (to *ArtifactAllowlistInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ArtifactAllowlistInfo) {
	if !from.ArtifactMatchers.IsNull() && !from.ArtifactMatchers.IsUnknown() && to.ArtifactMatchers.IsNull() && len(from.ArtifactMatchers.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ArtifactMatchers, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ArtifactMatchers = from.ArtifactMatchers
	}
}

func (to *ArtifactAllowlistInfo) SyncFieldsDuringRead(ctx context.Context, from ArtifactAllowlistInfo) {
	if !from.ArtifactMatchers.IsNull() && !from.ArtifactMatchers.IsUnknown() && to.ArtifactMatchers.IsNull() && len(from.ArtifactMatchers.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ArtifactMatchers, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ArtifactMatchers = from.ArtifactMatchers
	}
}

func (m ArtifactAllowlistInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["artifact_matchers"] = attrs["artifact_matchers"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetComputed()
	attrs["created_by"] = attrs["created_by"].SetComputed()
	attrs["metastore_id"] = attrs["metastore_id"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ArtifactAllowlistInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ArtifactAllowlistInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"artifact_matchers": reflect.TypeOf(ArtifactMatcher{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ArtifactAllowlistInfo
// only implements ToObjectValue() and Type().
func (m ArtifactAllowlistInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"artifact_matchers": m.ArtifactMatchers,
			"created_at":        m.CreatedAt,
			"created_by":        m.CreatedBy,
			"metastore_id":      m.MetastoreId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ArtifactAllowlistInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"artifact_matchers": basetypes.ListType{
				ElemType: ArtifactMatcher{}.Type(ctx),
			},
			"created_at":   types.Int64Type,
			"created_by":   types.StringType,
			"metastore_id": types.StringType,
		},
	}
}

// GetArtifactMatchers returns the value of the ArtifactMatchers field in ArtifactAllowlistInfo as
// a slice of ArtifactMatcher values.
// If the field is unknown or null, the boolean return value is false.
func (m *ArtifactAllowlistInfo) GetArtifactMatchers(ctx context.Context) ([]ArtifactMatcher, bool) {
	if m.ArtifactMatchers.IsNull() || m.ArtifactMatchers.IsUnknown() {
		return nil, false
	}
	var v []ArtifactMatcher
	d := m.ArtifactMatchers.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetArtifactMatchers sets the value of the ArtifactMatchers field in ArtifactAllowlistInfo.
func (m *ArtifactAllowlistInfo) SetArtifactMatchers(ctx context.Context, v []ArtifactMatcher) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["artifact_matchers"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ArtifactMatchers = types.ListValueMust(t, vs)
}

type ArtifactMatcher struct {
	// The artifact path or maven coordinate
	Artifact types.String `tfsdk:"artifact"`
	// The pattern matching type of the artifact
	MatchType types.String `tfsdk:"match_type"`
}

func (to *ArtifactMatcher) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ArtifactMatcher) {
}

func (to *ArtifactMatcher) SyncFieldsDuringRead(ctx context.Context, from ArtifactMatcher) {
}

func (m ArtifactMatcher) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["artifact"] = attrs["artifact"].SetRequired()
	attrs["match_type"] = attrs["match_type"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ArtifactMatcher.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ArtifactMatcher) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ArtifactMatcher
// only implements ToObjectValue() and Type().
func (m ArtifactMatcher) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"artifact":   m.Artifact,
			"match_type": m.MatchType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ArtifactMatcher) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"artifact":   types.StringType,
			"match_type": types.StringType,
		},
	}
}

type AssignResponse struct {
}

func (to *AssignResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AssignResponse) {
}

func (to *AssignResponse) SyncFieldsDuringRead(ctx context.Context, from AssignResponse) {
}

func (m AssignResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AssignResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AssignResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AssignResponse
// only implements ToObjectValue() and Type().
func (m AssignResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m AssignResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// AWS temporary credentials for API authentication. Read more at
// https://docs.aws.amazon.com/STS/latest/APIReference/API_Credentials.html.
type AwsCredentials struct {
	// The access key ID that identifies the temporary credentials.
	AccessKeyId types.String `tfsdk:"access_key_id"`
	// The Amazon Resource Name (ARN) of the S3 access point for temporary
	// credentials related the external location.
	AccessPoint types.String `tfsdk:"access_point"`
	// The secret access key that can be used to sign AWS API requests.
	SecretAccessKey types.String `tfsdk:"secret_access_key"`
	// The token that users must pass to AWS API to use the temporary
	// credentials.
	SessionToken types.String `tfsdk:"session_token"`
}

func (to *AwsCredentials) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AwsCredentials) {
}

func (to *AwsCredentials) SyncFieldsDuringRead(ctx context.Context, from AwsCredentials) {
}

func (m AwsCredentials) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_key_id"] = attrs["access_key_id"].SetOptional()
	attrs["access_point"] = attrs["access_point"].SetOptional()
	attrs["secret_access_key"] = attrs["secret_access_key"].SetOptional()
	attrs["session_token"] = attrs["session_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AwsCredentials.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AwsCredentials) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AwsCredentials
// only implements ToObjectValue() and Type().
func (m AwsCredentials) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_key_id":     m.AccessKeyId,
			"access_point":      m.AccessPoint,
			"secret_access_key": m.SecretAccessKey,
			"session_token":     m.SessionToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AwsCredentials) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_key_id":     types.StringType,
			"access_point":      types.StringType,
			"secret_access_key": types.StringType,
			"session_token":     types.StringType,
		},
	}
}

// The AWS IAM role configuration
type AwsIamRole struct {
	// The external ID used in role assumption to prevent the confused deputy
	// problem.
	ExternalId types.String `tfsdk:"external_id"`
	// The Amazon Resource Name (ARN) of the AWS IAM role used to vend temporary
	// credentials.
	RoleArn types.String `tfsdk:"role_arn"`
	// The Amazon Resource Name (ARN) of the AWS IAM user managed by Databricks.
	// This is the identity that is going to assume the AWS IAM role.
	UnityCatalogIamArn types.String `tfsdk:"unity_catalog_iam_arn"`
}

func (to *AwsIamRole) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AwsIamRole) {
}

func (to *AwsIamRole) SyncFieldsDuringRead(ctx context.Context, from AwsIamRole) {
}

func (m AwsIamRole) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_id"] = attrs["external_id"].SetComputed()
	attrs["role_arn"] = attrs["role_arn"].SetOptional()
	attrs["unity_catalog_iam_arn"] = attrs["unity_catalog_iam_arn"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AwsIamRole.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AwsIamRole) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AwsIamRole
// only implements ToObjectValue() and Type().
func (m AwsIamRole) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_id":           m.ExternalId,
			"role_arn":              m.RoleArn,
			"unity_catalog_iam_arn": m.UnityCatalogIamArn,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AwsIamRole) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_id":           types.StringType,
			"role_arn":              types.StringType,
			"unity_catalog_iam_arn": types.StringType,
		},
	}
}

// The AWS IAM role configuration
type AwsIamRoleRequest struct {
	// The Amazon Resource Name (ARN) of the AWS IAM role used to vend temporary
	// credentials.
	RoleArn types.String `tfsdk:"role_arn"`
}

func (to *AwsIamRoleRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AwsIamRoleRequest) {
}

func (to *AwsIamRoleRequest) SyncFieldsDuringRead(ctx context.Context, from AwsIamRoleRequest) {
}

func (m AwsIamRoleRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["role_arn"] = attrs["role_arn"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AwsIamRoleRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AwsIamRoleRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AwsIamRoleRequest
// only implements ToObjectValue() and Type().
func (m AwsIamRoleRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"role_arn": m.RoleArn,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AwsIamRoleRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"role_arn": types.StringType,
		},
	}
}

// The AWS IAM role configuration
type AwsIamRoleResponse struct {
	// The external ID used in role assumption to prevent the confused deputy
	// problem.
	ExternalId types.String `tfsdk:"external_id"`
	// The Amazon Resource Name (ARN) of the AWS IAM role used to vend temporary
	// credentials.
	RoleArn types.String `tfsdk:"role_arn"`
	// The Amazon Resource Name (ARN) of the AWS IAM user managed by Databricks.
	// This is the identity that is going to assume the AWS IAM role.
	UnityCatalogIamArn types.String `tfsdk:"unity_catalog_iam_arn"`
}

func (to *AwsIamRoleResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AwsIamRoleResponse) {
}

func (to *AwsIamRoleResponse) SyncFieldsDuringRead(ctx context.Context, from AwsIamRoleResponse) {
}

func (m AwsIamRoleResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_id"] = attrs["external_id"].SetComputed()
	attrs["role_arn"] = attrs["role_arn"].SetRequired()
	attrs["unity_catalog_iam_arn"] = attrs["unity_catalog_iam_arn"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AwsIamRoleResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AwsIamRoleResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AwsIamRoleResponse
// only implements ToObjectValue() and Type().
func (m AwsIamRoleResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_id":           m.ExternalId,
			"role_arn":              m.RoleArn,
			"unity_catalog_iam_arn": m.UnityCatalogIamArn,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AwsIamRoleResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_id":           types.StringType,
			"role_arn":              types.StringType,
			"unity_catalog_iam_arn": types.StringType,
		},
	}
}

type AwsSqsQueue struct {
	// Unique identifier included in the name of file events managed cloud
	// resources.
	ManagedResourceId types.String `tfsdk:"managed_resource_id"`
	// The AQS queue url in the format
	// https://sqs.{region}.amazonaws.com/{account id}/{queue name} Required for
	// provided_sqs.
	QueueUrl types.String `tfsdk:"queue_url"`
}

func (to *AwsSqsQueue) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AwsSqsQueue) {
}

func (to *AwsSqsQueue) SyncFieldsDuringRead(ctx context.Context, from AwsSqsQueue) {
}

func (m AwsSqsQueue) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["managed_resource_id"] = attrs["managed_resource_id"].SetComputed()
	attrs["queue_url"] = attrs["queue_url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AwsSqsQueue.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AwsSqsQueue) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AwsSqsQueue
// only implements ToObjectValue() and Type().
func (m AwsSqsQueue) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"managed_resource_id": m.ManagedResourceId,
			"queue_url":           m.QueueUrl,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AwsSqsQueue) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"managed_resource_id": types.StringType,
			"queue_url":           types.StringType,
		},
	}
}

// Azure Active Directory token, essentially the Oauth token for Azure Service
// Principal or Managed Identity. Read more at
// https://learn.microsoft.com/en-us/azure/databricks/dev-tools/api/latest/aad/service-prin-aad-token
type AzureActiveDirectoryToken struct {
	// Opaque token that contains claims that you can use in Azure Active
	// Directory to access cloud services.
	AadToken types.String `tfsdk:"aad_token"`
}

func (to *AzureActiveDirectoryToken) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureActiveDirectoryToken) {
}

func (to *AzureActiveDirectoryToken) SyncFieldsDuringRead(ctx context.Context, from AzureActiveDirectoryToken) {
}

func (m AzureActiveDirectoryToken) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aad_token"] = attrs["aad_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureActiveDirectoryToken.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureActiveDirectoryToken) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureActiveDirectoryToken
// only implements ToObjectValue() and Type().
func (m AzureActiveDirectoryToken) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aad_token": m.AadToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureActiveDirectoryToken) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aad_token": types.StringType,
		},
	}
}

// The Azure managed identity configuration.
type AzureManagedIdentity struct {
	// The Azure resource ID of the Azure Databricks Access Connector. Use the
	// format
	// `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.Databricks/accessConnectors/{connector-name}`.
	AccessConnectorId types.String `tfsdk:"access_connector_id"`
	// The Databricks internal ID that represents this managed identity.
	CredentialId types.String `tfsdk:"credential_id"`
	// The Azure resource ID of the managed identity. Use the format,
	// `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
	// This is only available for user-assgined identities. For system-assigned
	// identities, the access_connector_id is used to identify the identity. If
	// this field is not provided, then we assume the AzureManagedIdentity is
	// using the system-assigned identity.
	ManagedIdentityId types.String `tfsdk:"managed_identity_id"`
}

func (to *AzureManagedIdentity) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureManagedIdentity) {
}

func (to *AzureManagedIdentity) SyncFieldsDuringRead(ctx context.Context, from AzureManagedIdentity) {
}

func (m AzureManagedIdentity) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_connector_id"] = attrs["access_connector_id"].SetRequired()
	attrs["credential_id"] = attrs["credential_id"].SetComputed()
	attrs["managed_identity_id"] = attrs["managed_identity_id"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureManagedIdentity.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureManagedIdentity) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureManagedIdentity
// only implements ToObjectValue() and Type().
func (m AzureManagedIdentity) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_connector_id": m.AccessConnectorId,
			"credential_id":       m.CredentialId,
			"managed_identity_id": m.ManagedIdentityId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureManagedIdentity) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_connector_id": types.StringType,
			"credential_id":       types.StringType,
			"managed_identity_id": types.StringType,
		},
	}
}

// The Azure managed identity configuration.
type AzureManagedIdentityRequest struct {
	// The Azure resource ID of the Azure Databricks Access Connector. Use the
	// format
	// `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.Databricks/accessConnectors/{connector-name}`.
	AccessConnectorId types.String `tfsdk:"access_connector_id"`
	// The Azure resource ID of the managed identity. Use the format,
	// `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
	// This is only available for user-assgined identities. For system-assigned
	// identities, the access_connector_id is used to identify the identity. If
	// this field is not provided, then we assume the AzureManagedIdentity is
	// using the system-assigned identity.
	ManagedIdentityId types.String `tfsdk:"managed_identity_id"`
}

func (to *AzureManagedIdentityRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureManagedIdentityRequest) {
}

func (to *AzureManagedIdentityRequest) SyncFieldsDuringRead(ctx context.Context, from AzureManagedIdentityRequest) {
}

func (m AzureManagedIdentityRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_connector_id"] = attrs["access_connector_id"].SetRequired()
	attrs["managed_identity_id"] = attrs["managed_identity_id"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureManagedIdentityRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureManagedIdentityRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureManagedIdentityRequest
// only implements ToObjectValue() and Type().
func (m AzureManagedIdentityRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_connector_id": m.AccessConnectorId,
			"managed_identity_id": m.ManagedIdentityId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureManagedIdentityRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_connector_id": types.StringType,
			"managed_identity_id": types.StringType,
		},
	}
}

// The Azure managed identity configuration.
type AzureManagedIdentityResponse struct {
	// The Azure resource ID of the Azure Databricks Access Connector. Use the
	// format
	// `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.Databricks/accessConnectors/{connector-name}`.
	AccessConnectorId types.String `tfsdk:"access_connector_id"`
	// The Databricks internal ID that represents this managed identity.
	CredentialId types.String `tfsdk:"credential_id"`
	// The Azure resource ID of the managed identity. Use the format,
	// `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
	// This is only available for user-assgined identities. For system-assigned
	// identities, the access_connector_id is used to identify the identity. If
	// this field is not provided, then we assume the AzureManagedIdentity is
	// using the system-assigned identity.
	ManagedIdentityId types.String `tfsdk:"managed_identity_id"`
}

func (to *AzureManagedIdentityResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureManagedIdentityResponse) {
}

func (to *AzureManagedIdentityResponse) SyncFieldsDuringRead(ctx context.Context, from AzureManagedIdentityResponse) {
}

func (m AzureManagedIdentityResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_connector_id"] = attrs["access_connector_id"].SetRequired()
	attrs["credential_id"] = attrs["credential_id"].SetComputed()
	attrs["managed_identity_id"] = attrs["managed_identity_id"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureManagedIdentityResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureManagedIdentityResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureManagedIdentityResponse
// only implements ToObjectValue() and Type().
func (m AzureManagedIdentityResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_connector_id": m.AccessConnectorId,
			"credential_id":       m.CredentialId,
			"managed_identity_id": m.ManagedIdentityId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureManagedIdentityResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_connector_id": types.StringType,
			"credential_id":       types.StringType,
			"managed_identity_id": types.StringType,
		},
	}
}

type AzureQueueStorage struct {
	// Unique identifier included in the name of file events managed cloud
	// resources.
	ManagedResourceId types.String `tfsdk:"managed_resource_id"`
	// The AQS queue url in the format https://{storage
	// account}.queue.core.windows.net/{queue name} Required for provided_aqs.
	QueueUrl types.String `tfsdk:"queue_url"`
	// The resource group for the queue, event grid subscription, and external
	// location storage account. Only required for locations with a service
	// principal storage credential
	ResourceGroup types.String `tfsdk:"resource_group"`
	// Optional subscription id for the queue, event grid subscription, and
	// external location storage account. Required for locations with a service
	// principal storage credential
	SubscriptionId types.String `tfsdk:"subscription_id"`
}

func (to *AzureQueueStorage) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureQueueStorage) {
}

func (to *AzureQueueStorage) SyncFieldsDuringRead(ctx context.Context, from AzureQueueStorage) {
}

func (m AzureQueueStorage) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["managed_resource_id"] = attrs["managed_resource_id"].SetComputed()
	attrs["queue_url"] = attrs["queue_url"].SetOptional()
	attrs["resource_group"] = attrs["resource_group"].SetOptional()
	attrs["subscription_id"] = attrs["subscription_id"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureQueueStorage.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureQueueStorage) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureQueueStorage
// only implements ToObjectValue() and Type().
func (m AzureQueueStorage) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"managed_resource_id": m.ManagedResourceId,
			"queue_url":           m.QueueUrl,
			"resource_group":      m.ResourceGroup,
			"subscription_id":     m.SubscriptionId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureQueueStorage) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"managed_resource_id": types.StringType,
			"queue_url":           types.StringType,
			"resource_group":      types.StringType,
			"subscription_id":     types.StringType,
		},
	}
}

// The Azure service principal configuration. Only applicable when purpose is
// **STORAGE**.
type AzureServicePrincipal struct {
	// The application ID of the application registration within the referenced
	// AAD tenant.
	ApplicationId types.String `tfsdk:"application_id"`
	// The client secret generated for the above app ID in AAD.
	ClientSecret types.String `tfsdk:"client_secret"`
	// The directory ID corresponding to the Azure Active Directory (AAD) tenant
	// of the application.
	DirectoryId types.String `tfsdk:"directory_id"`
}

func (to *AzureServicePrincipal) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureServicePrincipal) {
}

func (to *AzureServicePrincipal) SyncFieldsDuringRead(ctx context.Context, from AzureServicePrincipal) {
}

func (m AzureServicePrincipal) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["application_id"] = attrs["application_id"].SetRequired()
	attrs["client_secret"] = attrs["client_secret"].SetRequired()
	attrs["directory_id"] = attrs["directory_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureServicePrincipal.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureServicePrincipal) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureServicePrincipal
// only implements ToObjectValue() and Type().
func (m AzureServicePrincipal) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"application_id": m.ApplicationId,
			"client_secret":  m.ClientSecret,
			"directory_id":   m.DirectoryId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureServicePrincipal) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"application_id": types.StringType,
			"client_secret":  types.StringType,
			"directory_id":   types.StringType,
		},
	}
}

// Azure temporary credentials for API authentication. Read more at
// https://docs.microsoft.com/en-us/rest/api/storageservices/create-user-delegation-sas
type AzureUserDelegationSas struct {
	// The signed URI (SAS Token) used to access blob services for a given path
	SasToken types.String `tfsdk:"sas_token"`
}

func (to *AzureUserDelegationSas) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from AzureUserDelegationSas) {
}

func (to *AzureUserDelegationSas) SyncFieldsDuringRead(ctx context.Context, from AzureUserDelegationSas) {
}

func (m AzureUserDelegationSas) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["sas_token"] = attrs["sas_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in AzureUserDelegationSas.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m AzureUserDelegationSas) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, AzureUserDelegationSas
// only implements ToObjectValue() and Type().
func (m AzureUserDelegationSas) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"sas_token": m.SasToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m AzureUserDelegationSas) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"sas_token": types.StringType,
		},
	}
}

type BatchCreateAccessRequestsRequest struct {
	// A list of individual access requests, where each request corresponds to a
	// set of permissions being requested on a list of securables for a
	// specified principal.
	//
	// At most 30 requests per API call.
	Requests types.List `tfsdk:"requests"`
}

func (to *BatchCreateAccessRequestsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from BatchCreateAccessRequestsRequest) {
	if !from.Requests.IsNull() && !from.Requests.IsUnknown() && to.Requests.IsNull() && len(from.Requests.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Requests, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Requests = from.Requests
	}
}

func (to *BatchCreateAccessRequestsRequest) SyncFieldsDuringRead(ctx context.Context, from BatchCreateAccessRequestsRequest) {
	if !from.Requests.IsNull() && !from.Requests.IsUnknown() && to.Requests.IsNull() && len(from.Requests.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Requests, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Requests = from.Requests
	}
}

func (m BatchCreateAccessRequestsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["requests"] = attrs["requests"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in BatchCreateAccessRequestsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m BatchCreateAccessRequestsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"requests": reflect.TypeOf(CreateAccessRequest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, BatchCreateAccessRequestsRequest
// only implements ToObjectValue() and Type().
func (m BatchCreateAccessRequestsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"requests": m.Requests,
		})
}

// Type implements basetypes.ObjectValuable.
func (m BatchCreateAccessRequestsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"requests": basetypes.ListType{
				ElemType: CreateAccessRequest{}.Type(ctx),
			},
		},
	}
}

// GetRequests returns the value of the Requests field in BatchCreateAccessRequestsRequest as
// a slice of CreateAccessRequest values.
// If the field is unknown or null, the boolean return value is false.
func (m *BatchCreateAccessRequestsRequest) GetRequests(ctx context.Context) ([]CreateAccessRequest, bool) {
	if m.Requests.IsNull() || m.Requests.IsUnknown() {
		return nil, false
	}
	var v []CreateAccessRequest
	d := m.Requests.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRequests sets the value of the Requests field in BatchCreateAccessRequestsRequest.
func (m *BatchCreateAccessRequestsRequest) SetRequests(ctx context.Context, v []CreateAccessRequest) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["requests"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Requests = types.ListValueMust(t, vs)
}

type BatchCreateAccessRequestsResponse struct {
	// The access request destinations for each securable object the principal
	// requested.
	Responses types.List `tfsdk:"responses"`
}

func (to *BatchCreateAccessRequestsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from BatchCreateAccessRequestsResponse) {
	if !from.Responses.IsNull() && !from.Responses.IsUnknown() && to.Responses.IsNull() && len(from.Responses.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Responses, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Responses = from.Responses
	}
}

func (to *BatchCreateAccessRequestsResponse) SyncFieldsDuringRead(ctx context.Context, from BatchCreateAccessRequestsResponse) {
	if !from.Responses.IsNull() && !from.Responses.IsUnknown() && to.Responses.IsNull() && len(from.Responses.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Responses, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Responses = from.Responses
	}
}

func (m BatchCreateAccessRequestsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["responses"] = attrs["responses"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in BatchCreateAccessRequestsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m BatchCreateAccessRequestsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"responses": reflect.TypeOf(CreateAccessRequestResponse{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, BatchCreateAccessRequestsResponse
// only implements ToObjectValue() and Type().
func (m BatchCreateAccessRequestsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"responses": m.Responses,
		})
}

// Type implements basetypes.ObjectValuable.
func (m BatchCreateAccessRequestsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"responses": basetypes.ListType{
				ElemType: CreateAccessRequestResponse{}.Type(ctx),
			},
		},
	}
}

// GetResponses returns the value of the Responses field in BatchCreateAccessRequestsResponse as
// a slice of CreateAccessRequestResponse values.
// If the field is unknown or null, the boolean return value is false.
func (m *BatchCreateAccessRequestsResponse) GetResponses(ctx context.Context) ([]CreateAccessRequestResponse, bool) {
	if m.Responses.IsNull() || m.Responses.IsUnknown() {
		return nil, false
	}
	var v []CreateAccessRequestResponse
	d := m.Responses.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetResponses sets the value of the Responses field in BatchCreateAccessRequestsResponse.
func (m *BatchCreateAccessRequestsResponse) SetResponses(ctx context.Context, v []CreateAccessRequestResponse) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["responses"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Responses = types.ListValueMust(t, vs)
}

type CancelRefreshRequest struct {
	RefreshId types.Int64 `tfsdk:"-"`
	// UC table name in format `catalog.schema.table_name`. table_name is case
	// insensitive and spaces are disallowed.
	TableName types.String `tfsdk:"-"`
}

func (to *CancelRefreshRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CancelRefreshRequest) {
}

func (to *CancelRefreshRequest) SyncFieldsDuringRead(ctx context.Context, from CancelRefreshRequest) {
}

func (m CancelRefreshRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_name"] = attrs["table_name"].SetRequired()
	attrs["refresh_id"] = attrs["refresh_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CancelRefreshRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CancelRefreshRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CancelRefreshRequest
// only implements ToObjectValue() and Type().
func (m CancelRefreshRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"refresh_id": m.RefreshId,
			"table_name": m.TableName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CancelRefreshRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"refresh_id": types.Int64Type,
			"table_name": types.StringType,
		},
	}
}

type CancelRefreshResponse struct {
}

func (to *CancelRefreshResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CancelRefreshResponse) {
}

func (to *CancelRefreshResponse) SyncFieldsDuringRead(ctx context.Context, from CancelRefreshResponse) {
}

func (m CancelRefreshResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CancelRefreshResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CancelRefreshResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CancelRefreshResponse
// only implements ToObjectValue() and Type().
func (m CancelRefreshResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m CancelRefreshResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type CatalogInfo struct {
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`

	CatalogType types.String `tfsdk:"catalog_type"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// The name of the connection to an external data source.
	ConnectionName types.String `tfsdk:"connection_name"`
	// Time at which this catalog was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of catalog creator.
	CreatedBy types.String `tfsdk:"created_by"`

	EffectivePredictiveOptimizationFlag types.Object `tfsdk:"effective_predictive_optimization_flag"`
	// Whether predictive optimization should be enabled for this object and
	// objects under it.
	EnablePredictiveOptimization types.String `tfsdk:"enable_predictive_optimization"`
	// The full name of the catalog. Corresponds with the name field.
	FullName types.String `tfsdk:"full_name"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of catalog.
	Name types.String `tfsdk:"name"`
	// A map of key-value properties attached to the securable.
	Options types.Map `tfsdk:"options"`
	// Username of current owner of catalog.
	Owner types.String `tfsdk:"owner"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
	// The name of delta sharing provider.
	//
	// A Delta Sharing catalog is a catalog that is based on a Delta share on a
	// remote sharing server.
	ProviderName types.String `tfsdk:"provider_name"`

	ProvisioningInfo types.Object `tfsdk:"provisioning_info"`

	SecurableType types.String `tfsdk:"securable_type"`
	// The name of the share under the share provider.
	ShareName types.String `tfsdk:"share_name"`
	// Storage Location URL (full path) for managed tables within catalog.
	StorageLocation types.String `tfsdk:"storage_location"`
	// Storage root URL for managed tables within catalog.
	StorageRoot types.String `tfsdk:"storage_root"`
	// Time at which this catalog was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified catalog.
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *CatalogInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CatalogInfo) {
	if !from.EffectivePredictiveOptimizationFlag.IsNull() && !from.EffectivePredictiveOptimizationFlag.IsUnknown() {
		if toEffectivePredictiveOptimizationFlag, ok := to.GetEffectivePredictiveOptimizationFlag(ctx); ok {
			if fromEffectivePredictiveOptimizationFlag, ok := from.GetEffectivePredictiveOptimizationFlag(ctx); ok {
				// Recursively sync the fields of EffectivePredictiveOptimizationFlag
				toEffectivePredictiveOptimizationFlag.SyncFieldsDuringCreateOrUpdate(ctx, fromEffectivePredictiveOptimizationFlag)
				to.SetEffectivePredictiveOptimizationFlag(ctx, toEffectivePredictiveOptimizationFlag)
			}
		}
	}
	if !from.ProvisioningInfo.IsNull() && !from.ProvisioningInfo.IsUnknown() {
		if toProvisioningInfo, ok := to.GetProvisioningInfo(ctx); ok {
			if fromProvisioningInfo, ok := from.GetProvisioningInfo(ctx); ok {
				// Recursively sync the fields of ProvisioningInfo
				toProvisioningInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromProvisioningInfo)
				to.SetProvisioningInfo(ctx, toProvisioningInfo)
			}
		}
	}
}

func (to *CatalogInfo) SyncFieldsDuringRead(ctx context.Context, from CatalogInfo) {
	if !from.EffectivePredictiveOptimizationFlag.IsNull() && !from.EffectivePredictiveOptimizationFlag.IsUnknown() {
		if toEffectivePredictiveOptimizationFlag, ok := to.GetEffectivePredictiveOptimizationFlag(ctx); ok {
			if fromEffectivePredictiveOptimizationFlag, ok := from.GetEffectivePredictiveOptimizationFlag(ctx); ok {
				toEffectivePredictiveOptimizationFlag.SyncFieldsDuringRead(ctx, fromEffectivePredictiveOptimizationFlag)
				to.SetEffectivePredictiveOptimizationFlag(ctx, toEffectivePredictiveOptimizationFlag)
			}
		}
	}
	if !from.ProvisioningInfo.IsNull() && !from.ProvisioningInfo.IsUnknown() {
		if toProvisioningInfo, ok := to.GetProvisioningInfo(ctx); ok {
			if fromProvisioningInfo, ok := from.GetProvisioningInfo(ctx); ok {
				toProvisioningInfo.SyncFieldsDuringRead(ctx, fromProvisioningInfo)
				to.SetProvisioningInfo(ctx, toProvisioningInfo)
			}
		}
	}
}

func (m CatalogInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_type"] = attrs["catalog_type"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["connection_name"] = attrs["connection_name"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["effective_predictive_optimization_flag"] = attrs["effective_predictive_optimization_flag"].SetOptional()
	attrs["enable_predictive_optimization"] = attrs["enable_predictive_optimization"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["options"] = attrs["options"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["provider_name"] = attrs["provider_name"].SetOptional()
	attrs["provisioning_info"] = attrs["provisioning_info"].SetOptional()
	attrs["securable_type"] = attrs["securable_type"].SetOptional()
	attrs["share_name"] = attrs["share_name"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CatalogInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CatalogInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"effective_predictive_optimization_flag": reflect.TypeOf(EffectivePredictiveOptimizationFlag{}),
		"options":                                reflect.TypeOf(types.String{}),
		"properties":                             reflect.TypeOf(types.String{}),
		"provisioning_info":                      reflect.TypeOf(ProvisioningInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CatalogInfo
// only implements ToObjectValue() and Type().
func (m CatalogInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"browse_only":                            m.BrowseOnly,
			"catalog_type":                           m.CatalogType,
			"comment":                                m.Comment,
			"connection_name":                        m.ConnectionName,
			"created_at":                             m.CreatedAt,
			"created_by":                             m.CreatedBy,
			"effective_predictive_optimization_flag": m.EffectivePredictiveOptimizationFlag,
			"enable_predictive_optimization":         m.EnablePredictiveOptimization,
			"full_name":                              m.FullName,
			"isolation_mode":                         m.IsolationMode,
			"metastore_id":                           m.MetastoreId,
			"name":                                   m.Name,
			"options":                                m.Options,
			"owner":                                  m.Owner,
			"properties":                             m.Properties,
			"provider_name":                          m.ProviderName,
			"provisioning_info":                      m.ProvisioningInfo,
			"securable_type":                         m.SecurableType,
			"share_name":                             m.ShareName,
			"storage_location":                       m.StorageLocation,
			"storage_root":                           m.StorageRoot,
			"updated_at":                             m.UpdatedAt,
			"updated_by":                             m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CatalogInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"browse_only":                            types.BoolType,
			"catalog_type":                           types.StringType,
			"comment":                                types.StringType,
			"connection_name":                        types.StringType,
			"created_at":                             types.Int64Type,
			"created_by":                             types.StringType,
			"effective_predictive_optimization_flag": EffectivePredictiveOptimizationFlag{}.Type(ctx),
			"enable_predictive_optimization":         types.StringType,
			"full_name":                              types.StringType,
			"isolation_mode":                         types.StringType,
			"metastore_id":                           types.StringType,
			"name":                                   types.StringType,
			"options": basetypes.MapType{
				ElemType: types.StringType,
			},
			"owner": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"provider_name":     types.StringType,
			"provisioning_info": ProvisioningInfo{}.Type(ctx),
			"securable_type":    types.StringType,
			"share_name":        types.StringType,
			"storage_location":  types.StringType,
			"storage_root":      types.StringType,
			"updated_at":        types.Int64Type,
			"updated_by":        types.StringType,
		},
	}
}

// GetEffectivePredictiveOptimizationFlag returns the value of the EffectivePredictiveOptimizationFlag field in CatalogInfo as
// a EffectivePredictiveOptimizationFlag value.
// If the field is unknown or null, the boolean return value is false.
func (m *CatalogInfo) GetEffectivePredictiveOptimizationFlag(ctx context.Context) (EffectivePredictiveOptimizationFlag, bool) {
	var e EffectivePredictiveOptimizationFlag
	if m.EffectivePredictiveOptimizationFlag.IsNull() || m.EffectivePredictiveOptimizationFlag.IsUnknown() {
		return e, false
	}
	var v EffectivePredictiveOptimizationFlag
	d := m.EffectivePredictiveOptimizationFlag.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEffectivePredictiveOptimizationFlag sets the value of the EffectivePredictiveOptimizationFlag field in CatalogInfo.
func (m *CatalogInfo) SetEffectivePredictiveOptimizationFlag(ctx context.Context, v EffectivePredictiveOptimizationFlag) {
	vs := v.ToObjectValue(ctx)
	m.EffectivePredictiveOptimizationFlag = vs
}

// GetOptions returns the value of the Options field in CatalogInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CatalogInfo) GetOptions(ctx context.Context) (map[string]types.String, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in CatalogInfo.
func (m *CatalogInfo) SetOptions(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.MapValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in CatalogInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CatalogInfo) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in CatalogInfo.
func (m *CatalogInfo) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetProvisioningInfo returns the value of the ProvisioningInfo field in CatalogInfo as
// a ProvisioningInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *CatalogInfo) GetProvisioningInfo(ctx context.Context) (ProvisioningInfo, bool) {
	var e ProvisioningInfo
	if m.ProvisioningInfo.IsNull() || m.ProvisioningInfo.IsUnknown() {
		return e, false
	}
	var v ProvisioningInfo
	d := m.ProvisioningInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProvisioningInfo sets the value of the ProvisioningInfo field in CatalogInfo.
func (m *CatalogInfo) SetProvisioningInfo(ctx context.Context, v ProvisioningInfo) {
	vs := v.ToObjectValue(ctx)
	m.ProvisioningInfo = vs
}

// The Cloudflare API token configuration. Read more at
// https://developers.cloudflare.com/r2/api/s3/tokens/
type CloudflareApiToken struct {
	// The access key ID associated with the API token.
	AccessKeyId types.String `tfsdk:"access_key_id"`
	// The ID of the account associated with the API token.
	AccountId types.String `tfsdk:"account_id"`
	// The secret access token generated for the above access key ID.
	SecretAccessKey types.String `tfsdk:"secret_access_key"`
}

func (to *CloudflareApiToken) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CloudflareApiToken) {
}

func (to *CloudflareApiToken) SyncFieldsDuringRead(ctx context.Context, from CloudflareApiToken) {
}

func (m CloudflareApiToken) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_key_id"] = attrs["access_key_id"].SetRequired()
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["secret_access_key"] = attrs["secret_access_key"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CloudflareApiToken.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CloudflareApiToken) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CloudflareApiToken
// only implements ToObjectValue() and Type().
func (m CloudflareApiToken) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_key_id":     m.AccessKeyId,
			"account_id":        m.AccountId,
			"secret_access_key": m.SecretAccessKey,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CloudflareApiToken) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_key_id":     types.StringType,
			"account_id":        types.StringType,
			"secret_access_key": types.StringType,
		},
	}
}

type ColumnInfo struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`

	Mask types.Object `tfsdk:"mask"`
	// Name of Column.
	Name types.String `tfsdk:"name"`
	// Whether field may be Null (default: true).
	Nullable types.Bool `tfsdk:"nullable"`
	// Partition index for column.
	PartitionIndex types.Int64 `tfsdk:"partition_index"`
	// Ordinal position of column (starting at position 0).
	Position types.Int64 `tfsdk:"position"`
	// Format of IntervalType.
	TypeIntervalType types.String `tfsdk:"type_interval_type"`
	// Full data type specification, JSON-serialized.
	TypeJson types.String `tfsdk:"type_json"`

	TypeName types.String `tfsdk:"type_name"`
	// Digits of precision; required for DecimalTypes.
	TypePrecision types.Int64 `tfsdk:"type_precision"`
	// Digits to right of decimal; Required for DecimalTypes.
	TypeScale types.Int64 `tfsdk:"type_scale"`
	// Full data type specification as SQL/catalogString text.
	TypeText types.String `tfsdk:"type_text"`
}

func (to *ColumnInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ColumnInfo) {
	if !from.Mask.IsNull() && !from.Mask.IsUnknown() {
		if toMask, ok := to.GetMask(ctx); ok {
			if fromMask, ok := from.GetMask(ctx); ok {
				// Recursively sync the fields of Mask
				toMask.SyncFieldsDuringCreateOrUpdate(ctx, fromMask)
				to.SetMask(ctx, toMask)
			}
		}
	}
}

func (to *ColumnInfo) SyncFieldsDuringRead(ctx context.Context, from ColumnInfo) {
	if !from.Mask.IsNull() && !from.Mask.IsUnknown() {
		if toMask, ok := to.GetMask(ctx); ok {
			if fromMask, ok := from.GetMask(ctx); ok {
				toMask.SyncFieldsDuringRead(ctx, fromMask)
				to.SetMask(ctx, toMask)
			}
		}
	}
}

func (m ColumnInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["mask"] = attrs["mask"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["nullable"] = attrs["nullable"].SetOptional()
	attrs["partition_index"] = attrs["partition_index"].SetOptional()
	attrs["position"] = attrs["position"].SetOptional()
	attrs["type_interval_type"] = attrs["type_interval_type"].SetOptional()
	attrs["type_json"] = attrs["type_json"].SetOptional()
	attrs["type_name"] = attrs["type_name"].SetOptional()
	attrs["type_precision"] = attrs["type_precision"].SetOptional()
	attrs["type_scale"] = attrs["type_scale"].SetOptional()
	attrs["type_text"] = attrs["type_text"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ColumnInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ColumnInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"mask": reflect.TypeOf(ColumnMask{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ColumnInfo
// only implements ToObjectValue() and Type().
func (m ColumnInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":            m.Comment,
			"mask":               m.Mask,
			"name":               m.Name,
			"nullable":           m.Nullable,
			"partition_index":    m.PartitionIndex,
			"position":           m.Position,
			"type_interval_type": m.TypeIntervalType,
			"type_json":          m.TypeJson,
			"type_name":          m.TypeName,
			"type_precision":     m.TypePrecision,
			"type_scale":         m.TypeScale,
			"type_text":          m.TypeText,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ColumnInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":            types.StringType,
			"mask":               ColumnMask{}.Type(ctx),
			"name":               types.StringType,
			"nullable":           types.BoolType,
			"partition_index":    types.Int64Type,
			"position":           types.Int64Type,
			"type_interval_type": types.StringType,
			"type_json":          types.StringType,
			"type_name":          types.StringType,
			"type_precision":     types.Int64Type,
			"type_scale":         types.Int64Type,
			"type_text":          types.StringType,
		},
	}
}

// GetMask returns the value of the Mask field in ColumnInfo as
// a ColumnMask value.
// If the field is unknown or null, the boolean return value is false.
func (m *ColumnInfo) GetMask(ctx context.Context) (ColumnMask, bool) {
	var e ColumnMask
	if m.Mask.IsNull() || m.Mask.IsUnknown() {
		return e, false
	}
	var v ColumnMask
	d := m.Mask.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMask sets the value of the Mask field in ColumnInfo.
func (m *ColumnInfo) SetMask(ctx context.Context, v ColumnMask) {
	vs := v.ToObjectValue(ctx)
	m.Mask = vs
}

type ColumnMask struct {
	// The full name of the column mask SQL UDF.
	FunctionName types.String `tfsdk:"function_name"`
	// The list of additional table columns to be passed as input to the column
	// mask function. The first arg of the mask function should be of the type
	// of the column being masked and the types of the rest of the args should
	// match the types of columns in 'using_column_names'.
	UsingColumnNames types.List `tfsdk:"using_column_names"`
}

func (to *ColumnMask) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ColumnMask) {
	if !from.UsingColumnNames.IsNull() && !from.UsingColumnNames.IsUnknown() && to.UsingColumnNames.IsNull() && len(from.UsingColumnNames.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for UsingColumnNames, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.UsingColumnNames = from.UsingColumnNames
	}
}

func (to *ColumnMask) SyncFieldsDuringRead(ctx context.Context, from ColumnMask) {
	if !from.UsingColumnNames.IsNull() && !from.UsingColumnNames.IsUnknown() && to.UsingColumnNames.IsNull() && len(from.UsingColumnNames.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for UsingColumnNames, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.UsingColumnNames = from.UsingColumnNames
	}
}

func (m ColumnMask) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["function_name"] = attrs["function_name"].SetOptional()
	attrs["using_column_names"] = attrs["using_column_names"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ColumnMask.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ColumnMask) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"using_column_names": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ColumnMask
// only implements ToObjectValue() and Type().
func (m ColumnMask) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"function_name":      m.FunctionName,
			"using_column_names": m.UsingColumnNames,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ColumnMask) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"function_name": types.StringType,
			"using_column_names": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetUsingColumnNames returns the value of the UsingColumnNames field in ColumnMask as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ColumnMask) GetUsingColumnNames(ctx context.Context) ([]types.String, bool) {
	if m.UsingColumnNames.IsNull() || m.UsingColumnNames.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.UsingColumnNames.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetUsingColumnNames sets the value of the UsingColumnNames field in ColumnMask.
func (m *ColumnMask) SetUsingColumnNames(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["using_column_names"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.UsingColumnNames = types.ListValueMust(t, vs)
}

type ColumnMaskOptions struct {
	// The fully qualified name of the column mask function. The function is
	// called on each row of the target table. The function's first argument and
	// its return type should match the type of the masked column. Required on
	// create and update.
	FunctionName types.String `tfsdk:"function_name"`
	// The alias of the column to be masked. The alias must refer to one of
	// matched columns. The values of the column is passed to the column mask
	// function as the first argument. Required on create and update.
	OnColumn types.String `tfsdk:"on_column"`
	// Optional list of column aliases or constant literals to be passed as
	// additional arguments to the column mask function. The type of each column
	// should match the positional argument of the column mask function.
	Using types.List `tfsdk:"using"`
}

func (to *ColumnMaskOptions) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ColumnMaskOptions) {
	if !from.Using.IsNull() && !from.Using.IsUnknown() && to.Using.IsNull() && len(from.Using.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Using, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Using = from.Using
	}
}

func (to *ColumnMaskOptions) SyncFieldsDuringRead(ctx context.Context, from ColumnMaskOptions) {
	if !from.Using.IsNull() && !from.Using.IsUnknown() && to.Using.IsNull() && len(from.Using.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Using, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Using = from.Using
	}
}

func (m ColumnMaskOptions) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["function_name"] = attrs["function_name"].SetRequired()
	attrs["on_column"] = attrs["on_column"].SetRequired()
	attrs["using"] = attrs["using"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ColumnMaskOptions.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ColumnMaskOptions) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"using": reflect.TypeOf(FunctionArgument{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ColumnMaskOptions
// only implements ToObjectValue() and Type().
func (m ColumnMaskOptions) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"function_name": m.FunctionName,
			"on_column":     m.OnColumn,
			"using":         m.Using,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ColumnMaskOptions) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"function_name": types.StringType,
			"on_column":     types.StringType,
			"using": basetypes.ListType{
				ElemType: FunctionArgument{}.Type(ctx),
			},
		},
	}
}

// GetUsing returns the value of the Using field in ColumnMaskOptions as
// a slice of FunctionArgument values.
// If the field is unknown or null, the boolean return value is false.
func (m *ColumnMaskOptions) GetUsing(ctx context.Context) ([]FunctionArgument, bool) {
	if m.Using.IsNull() || m.Using.IsUnknown() {
		return nil, false
	}
	var v []FunctionArgument
	d := m.Using.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetUsing sets the value of the Using field in ColumnMaskOptions.
func (m *ColumnMaskOptions) SetUsing(ctx context.Context, v []FunctionArgument) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["using"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Using = types.ListValueMust(t, vs)
}

type ColumnRelationship struct {
	Source types.String `tfsdk:"source"`

	Target types.String `tfsdk:"target"`
}

func (to *ColumnRelationship) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ColumnRelationship) {
}

func (to *ColumnRelationship) SyncFieldsDuringRead(ctx context.Context, from ColumnRelationship) {
}

func (m ColumnRelationship) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["source"] = attrs["source"].SetOptional()
	attrs["target"] = attrs["target"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ColumnRelationship.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ColumnRelationship) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ColumnRelationship
// only implements ToObjectValue() and Type().
func (m ColumnRelationship) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"source": m.Source,
			"target": m.Target,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ColumnRelationship) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"source": types.StringType,
			"target": types.StringType,
		},
	}
}

// A connection that is dependent on a SQL object.
type ConnectionDependency struct {
	// Full name of the dependent connection, in the form of
	// __connection_name__.
	ConnectionName types.String `tfsdk:"connection_name"`
}

func (to *ConnectionDependency) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ConnectionDependency) {
}

func (to *ConnectionDependency) SyncFieldsDuringRead(ctx context.Context, from ConnectionDependency) {
}

func (m ConnectionDependency) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["connection_name"] = attrs["connection_name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ConnectionDependency.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ConnectionDependency) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ConnectionDependency
// only implements ToObjectValue() and Type().
func (m ConnectionDependency) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"connection_name": m.ConnectionName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ConnectionDependency) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"connection_name": types.StringType,
		},
	}
}

// Next ID: 23
type ConnectionInfo struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Unique identifier of the Connection.
	ConnectionId types.String `tfsdk:"connection_id"`
	// The type of connection.
	ConnectionType types.String `tfsdk:"connection_type"`
	// Time at which this connection was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of connection creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// The type of credential.
	CredentialType types.String `tfsdk:"credential_type"`
	// Full name of connection.
	FullName types.String `tfsdk:"full_name"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of the connection.
	Name types.String `tfsdk:"name"`
	// A map of key-value properties attached to the securable.
	Options types.Map `tfsdk:"options"`
	// Username of current owner of the connection.
	Owner types.String `tfsdk:"owner"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`

	ProvisioningInfo types.Object `tfsdk:"provisioning_info"`
	// If the connection is read only.
	ReadOnly types.Bool `tfsdk:"read_only"`

	SecurableType types.String `tfsdk:"securable_type"`
	// Time at which this connection was updated, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified connection.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// URL of the remote data source, extracted from options.
	Url types.String `tfsdk:"url"`
}

func (to *ConnectionInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ConnectionInfo) {
	if !from.ProvisioningInfo.IsNull() && !from.ProvisioningInfo.IsUnknown() {
		if toProvisioningInfo, ok := to.GetProvisioningInfo(ctx); ok {
			if fromProvisioningInfo, ok := from.GetProvisioningInfo(ctx); ok {
				// Recursively sync the fields of ProvisioningInfo
				toProvisioningInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromProvisioningInfo)
				to.SetProvisioningInfo(ctx, toProvisioningInfo)
			}
		}
	}
}

func (to *ConnectionInfo) SyncFieldsDuringRead(ctx context.Context, from ConnectionInfo) {
	if !from.ProvisioningInfo.IsNull() && !from.ProvisioningInfo.IsUnknown() {
		if toProvisioningInfo, ok := to.GetProvisioningInfo(ctx); ok {
			if fromProvisioningInfo, ok := from.GetProvisioningInfo(ctx); ok {
				toProvisioningInfo.SyncFieldsDuringRead(ctx, fromProvisioningInfo)
				to.SetProvisioningInfo(ctx, toProvisioningInfo)
			}
		}
	}
}

func (m ConnectionInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["connection_id"] = attrs["connection_id"].SetOptional()
	attrs["connection_type"] = attrs["connection_type"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["credential_type"] = attrs["credential_type"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["options"] = attrs["options"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["provisioning_info"] = attrs["provisioning_info"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["securable_type"] = attrs["securable_type"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ConnectionInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ConnectionInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"options":           reflect.TypeOf(types.String{}),
		"properties":        reflect.TypeOf(types.String{}),
		"provisioning_info": reflect.TypeOf(ProvisioningInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ConnectionInfo
// only implements ToObjectValue() and Type().
func (m ConnectionInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":           m.Comment,
			"connection_id":     m.ConnectionId,
			"connection_type":   m.ConnectionType,
			"created_at":        m.CreatedAt,
			"created_by":        m.CreatedBy,
			"credential_type":   m.CredentialType,
			"full_name":         m.FullName,
			"metastore_id":      m.MetastoreId,
			"name":              m.Name,
			"options":           m.Options,
			"owner":             m.Owner,
			"properties":        m.Properties,
			"provisioning_info": m.ProvisioningInfo,
			"read_only":         m.ReadOnly,
			"securable_type":    m.SecurableType,
			"updated_at":        m.UpdatedAt,
			"updated_by":        m.UpdatedBy,
			"url":               m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ConnectionInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":         types.StringType,
			"connection_id":   types.StringType,
			"connection_type": types.StringType,
			"created_at":      types.Int64Type,
			"created_by":      types.StringType,
			"credential_type": types.StringType,
			"full_name":       types.StringType,
			"metastore_id":    types.StringType,
			"name":            types.StringType,
			"options": basetypes.MapType{
				ElemType: types.StringType,
			},
			"owner": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"provisioning_info": ProvisioningInfo{}.Type(ctx),
			"read_only":         types.BoolType,
			"securable_type":    types.StringType,
			"updated_at":        types.Int64Type,
			"updated_by":        types.StringType,
			"url":               types.StringType,
		},
	}
}

// GetOptions returns the value of the Options field in ConnectionInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ConnectionInfo) GetOptions(ctx context.Context) (map[string]types.String, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in ConnectionInfo.
func (m *ConnectionInfo) SetOptions(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.MapValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in ConnectionInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ConnectionInfo) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in ConnectionInfo.
func (m *ConnectionInfo) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetProvisioningInfo returns the value of the ProvisioningInfo field in ConnectionInfo as
// a ProvisioningInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *ConnectionInfo) GetProvisioningInfo(ctx context.Context) (ProvisioningInfo, bool) {
	var e ProvisioningInfo
	if m.ProvisioningInfo.IsNull() || m.ProvisioningInfo.IsUnknown() {
		return e, false
	}
	var v ProvisioningInfo
	d := m.ProvisioningInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProvisioningInfo sets the value of the ProvisioningInfo field in ConnectionInfo.
func (m *ConnectionInfo) SetProvisioningInfo(ctx context.Context, v ProvisioningInfo) {
	vs := v.ToObjectValue(ctx)
	m.ProvisioningInfo = vs
}

// Detailed status of an online table. Shown if the online table is in the
// ONLINE_CONTINUOUS_UPDATE or the ONLINE_UPDATING_PIPELINE_RESOURCES state.
type ContinuousUpdateStatus struct {
	// Progress of the initial data synchronization.
	InitialPipelineSyncProgress types.Object `tfsdk:"initial_pipeline_sync_progress"`
	// The last source table Delta version that was synced to the online table.
	// Note that this Delta version may not be completely synced to the online
	// table yet.
	LastProcessedCommitVersion types.Int64 `tfsdk:"last_processed_commit_version"`
	// The timestamp of the last time any data was synchronized from the source
	// table to the online table.
	Timestamp types.String `tfsdk:"timestamp"`
}

func (to *ContinuousUpdateStatus) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ContinuousUpdateStatus) {
	if !from.InitialPipelineSyncProgress.IsNull() && !from.InitialPipelineSyncProgress.IsUnknown() {
		if toInitialPipelineSyncProgress, ok := to.GetInitialPipelineSyncProgress(ctx); ok {
			if fromInitialPipelineSyncProgress, ok := from.GetInitialPipelineSyncProgress(ctx); ok {
				// Recursively sync the fields of InitialPipelineSyncProgress
				toInitialPipelineSyncProgress.SyncFieldsDuringCreateOrUpdate(ctx, fromInitialPipelineSyncProgress)
				to.SetInitialPipelineSyncProgress(ctx, toInitialPipelineSyncProgress)
			}
		}
	}
}

func (to *ContinuousUpdateStatus) SyncFieldsDuringRead(ctx context.Context, from ContinuousUpdateStatus) {
	if !from.InitialPipelineSyncProgress.IsNull() && !from.InitialPipelineSyncProgress.IsUnknown() {
		if toInitialPipelineSyncProgress, ok := to.GetInitialPipelineSyncProgress(ctx); ok {
			if fromInitialPipelineSyncProgress, ok := from.GetInitialPipelineSyncProgress(ctx); ok {
				toInitialPipelineSyncProgress.SyncFieldsDuringRead(ctx, fromInitialPipelineSyncProgress)
				to.SetInitialPipelineSyncProgress(ctx, toInitialPipelineSyncProgress)
			}
		}
	}
}

func (m ContinuousUpdateStatus) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["initial_pipeline_sync_progress"] = attrs["initial_pipeline_sync_progress"].SetOptional()
	attrs["last_processed_commit_version"] = attrs["last_processed_commit_version"].SetOptional()
	attrs["timestamp"] = attrs["timestamp"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ContinuousUpdateStatus.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ContinuousUpdateStatus) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"initial_pipeline_sync_progress": reflect.TypeOf(PipelineProgress{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ContinuousUpdateStatus
// only implements ToObjectValue() and Type().
func (m ContinuousUpdateStatus) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"initial_pipeline_sync_progress": m.InitialPipelineSyncProgress,
			"last_processed_commit_version":  m.LastProcessedCommitVersion,
			"timestamp":                      m.Timestamp,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ContinuousUpdateStatus) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"initial_pipeline_sync_progress": PipelineProgress{}.Type(ctx),
			"last_processed_commit_version":  types.Int64Type,
			"timestamp":                      types.StringType,
		},
	}
}

// GetInitialPipelineSyncProgress returns the value of the InitialPipelineSyncProgress field in ContinuousUpdateStatus as
// a PipelineProgress value.
// If the field is unknown or null, the boolean return value is false.
func (m *ContinuousUpdateStatus) GetInitialPipelineSyncProgress(ctx context.Context) (PipelineProgress, bool) {
	var e PipelineProgress
	if m.InitialPipelineSyncProgress.IsNull() || m.InitialPipelineSyncProgress.IsUnknown() {
		return e, false
	}
	var v PipelineProgress
	d := m.InitialPipelineSyncProgress.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInitialPipelineSyncProgress sets the value of the InitialPipelineSyncProgress field in ContinuousUpdateStatus.
func (m *ContinuousUpdateStatus) SetInitialPipelineSyncProgress(ctx context.Context, v PipelineProgress) {
	vs := v.ToObjectValue(ctx)
	m.InitialPipelineSyncProgress = vs
}

type CreateAccessRequest struct {
	// Optional. The principal this request is for. Empty `behalf_of` defaults
	// to the requester's identity.
	//
	// Principals must be unique across the API call.
	BehalfOf types.Object `tfsdk:"behalf_of"`
	// Optional. Comment associated with the request.
	//
	// At most 200 characters, can only contain lowercase/uppercase letters
	// (a-z, A-Z), numbers (0-9), punctuation, and spaces.
	Comment types.String `tfsdk:"comment"`
	// List of securables and their corresponding requested UC privileges.
	//
	// At most 30 securables can be requested for a principal per batched call.
	// Each securable can only be requested once per principal.
	SecurablePermissions types.List `tfsdk:"securable_permissions"`
}

func (to *CreateAccessRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateAccessRequest) {
	if !from.BehalfOf.IsNull() && !from.BehalfOf.IsUnknown() {
		if toBehalfOf, ok := to.GetBehalfOf(ctx); ok {
			if fromBehalfOf, ok := from.GetBehalfOf(ctx); ok {
				// Recursively sync the fields of BehalfOf
				toBehalfOf.SyncFieldsDuringCreateOrUpdate(ctx, fromBehalfOf)
				to.SetBehalfOf(ctx, toBehalfOf)
			}
		}
	}
	if !from.SecurablePermissions.IsNull() && !from.SecurablePermissions.IsUnknown() && to.SecurablePermissions.IsNull() && len(from.SecurablePermissions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SecurablePermissions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SecurablePermissions = from.SecurablePermissions
	}
}

func (to *CreateAccessRequest) SyncFieldsDuringRead(ctx context.Context, from CreateAccessRequest) {
	if !from.BehalfOf.IsNull() && !from.BehalfOf.IsUnknown() {
		if toBehalfOf, ok := to.GetBehalfOf(ctx); ok {
			if fromBehalfOf, ok := from.GetBehalfOf(ctx); ok {
				toBehalfOf.SyncFieldsDuringRead(ctx, fromBehalfOf)
				to.SetBehalfOf(ctx, toBehalfOf)
			}
		}
	}
	if !from.SecurablePermissions.IsNull() && !from.SecurablePermissions.IsUnknown() && to.SecurablePermissions.IsNull() && len(from.SecurablePermissions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SecurablePermissions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SecurablePermissions = from.SecurablePermissions
	}
}

func (m CreateAccessRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["behalf_of"] = attrs["behalf_of"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["securable_permissions"] = attrs["securable_permissions"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateAccessRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateAccessRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"behalf_of":             reflect.TypeOf(Principal{}),
		"securable_permissions": reflect.TypeOf(SecurablePermissions{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateAccessRequest
// only implements ToObjectValue() and Type().
func (m CreateAccessRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"behalf_of":             m.BehalfOf,
			"comment":               m.Comment,
			"securable_permissions": m.SecurablePermissions,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateAccessRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"behalf_of": Principal{}.Type(ctx),
			"comment":   types.StringType,
			"securable_permissions": basetypes.ListType{
				ElemType: SecurablePermissions{}.Type(ctx),
			},
		},
	}
}

// GetBehalfOf returns the value of the BehalfOf field in CreateAccessRequest as
// a Principal value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccessRequest) GetBehalfOf(ctx context.Context) (Principal, bool) {
	var e Principal
	if m.BehalfOf.IsNull() || m.BehalfOf.IsUnknown() {
		return e, false
	}
	var v Principal
	d := m.BehalfOf.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetBehalfOf sets the value of the BehalfOf field in CreateAccessRequest.
func (m *CreateAccessRequest) SetBehalfOf(ctx context.Context, v Principal) {
	vs := v.ToObjectValue(ctx)
	m.BehalfOf = vs
}

// GetSecurablePermissions returns the value of the SecurablePermissions field in CreateAccessRequest as
// a slice of SecurablePermissions values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccessRequest) GetSecurablePermissions(ctx context.Context) ([]SecurablePermissions, bool) {
	if m.SecurablePermissions.IsNull() || m.SecurablePermissions.IsUnknown() {
		return nil, false
	}
	var v []SecurablePermissions
	d := m.SecurablePermissions.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSecurablePermissions sets the value of the SecurablePermissions field in CreateAccessRequest.
func (m *CreateAccessRequest) SetSecurablePermissions(ctx context.Context, v []SecurablePermissions) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["securable_permissions"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.SecurablePermissions = types.ListValueMust(t, vs)
}

type CreateAccessRequestResponse struct {
	// The principal the request was made on behalf of.
	BehalfOf types.Object `tfsdk:"behalf_of"`
	// The access request destinations for all the securables the principal
	// requested.
	RequestDestinations types.List `tfsdk:"request_destinations"`
}

func (to *CreateAccessRequestResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateAccessRequestResponse) {
	if !from.BehalfOf.IsNull() && !from.BehalfOf.IsUnknown() {
		if toBehalfOf, ok := to.GetBehalfOf(ctx); ok {
			if fromBehalfOf, ok := from.GetBehalfOf(ctx); ok {
				// Recursively sync the fields of BehalfOf
				toBehalfOf.SyncFieldsDuringCreateOrUpdate(ctx, fromBehalfOf)
				to.SetBehalfOf(ctx, toBehalfOf)
			}
		}
	}
	if !from.RequestDestinations.IsNull() && !from.RequestDestinations.IsUnknown() && to.RequestDestinations.IsNull() && len(from.RequestDestinations.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for RequestDestinations, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.RequestDestinations = from.RequestDestinations
	}
}

func (to *CreateAccessRequestResponse) SyncFieldsDuringRead(ctx context.Context, from CreateAccessRequestResponse) {
	if !from.BehalfOf.IsNull() && !from.BehalfOf.IsUnknown() {
		if toBehalfOf, ok := to.GetBehalfOf(ctx); ok {
			if fromBehalfOf, ok := from.GetBehalfOf(ctx); ok {
				toBehalfOf.SyncFieldsDuringRead(ctx, fromBehalfOf)
				to.SetBehalfOf(ctx, toBehalfOf)
			}
		}
	}
	if !from.RequestDestinations.IsNull() && !from.RequestDestinations.IsUnknown() && to.RequestDestinations.IsNull() && len(from.RequestDestinations.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for RequestDestinations, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.RequestDestinations = from.RequestDestinations
	}
}

func (m CreateAccessRequestResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["behalf_of"] = attrs["behalf_of"].SetOptional()
	attrs["request_destinations"] = attrs["request_destinations"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateAccessRequestResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateAccessRequestResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"behalf_of":            reflect.TypeOf(Principal{}),
		"request_destinations": reflect.TypeOf(AccessRequestDestinations{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateAccessRequestResponse
// only implements ToObjectValue() and Type().
func (m CreateAccessRequestResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"behalf_of":            m.BehalfOf,
			"request_destinations": m.RequestDestinations,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateAccessRequestResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"behalf_of": Principal{}.Type(ctx),
			"request_destinations": basetypes.ListType{
				ElemType: AccessRequestDestinations{}.Type(ctx),
			},
		},
	}
}

// GetBehalfOf returns the value of the BehalfOf field in CreateAccessRequestResponse as
// a Principal value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccessRequestResponse) GetBehalfOf(ctx context.Context) (Principal, bool) {
	var e Principal
	if m.BehalfOf.IsNull() || m.BehalfOf.IsUnknown() {
		return e, false
	}
	var v Principal
	d := m.BehalfOf.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetBehalfOf sets the value of the BehalfOf field in CreateAccessRequestResponse.
func (m *CreateAccessRequestResponse) SetBehalfOf(ctx context.Context, v Principal) {
	vs := v.ToObjectValue(ctx)
	m.BehalfOf = vs
}

// GetRequestDestinations returns the value of the RequestDestinations field in CreateAccessRequestResponse as
// a slice of AccessRequestDestinations values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccessRequestResponse) GetRequestDestinations(ctx context.Context) ([]AccessRequestDestinations, bool) {
	if m.RequestDestinations.IsNull() || m.RequestDestinations.IsUnknown() {
		return nil, false
	}
	var v []AccessRequestDestinations
	d := m.RequestDestinations.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRequestDestinations sets the value of the RequestDestinations field in CreateAccessRequestResponse.
func (m *CreateAccessRequestResponse) SetRequestDestinations(ctx context.Context, v []AccessRequestDestinations) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["request_destinations"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.RequestDestinations = types.ListValueMust(t, vs)
}

type CreateAccountsMetastore struct {
	// The user-specified name of the metastore.
	Name types.String `tfsdk:"name"`
	// Cloud region which the metastore serves (e.g., `us-west-2`, `westus`).
	Region types.String `tfsdk:"region"`
	// The storage root URL for metastore
	StorageRoot types.String `tfsdk:"storage_root"`
}

func (to *CreateAccountsMetastore) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateAccountsMetastore) {
}

func (to *CreateAccountsMetastore) SyncFieldsDuringRead(ctx context.Context, from CreateAccountsMetastore) {
}

func (m CreateAccountsMetastore) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["region"] = attrs["region"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateAccountsMetastore.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateAccountsMetastore) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateAccountsMetastore
// only implements ToObjectValue() and Type().
func (m CreateAccountsMetastore) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":         m.Name,
			"region":       m.Region,
			"storage_root": m.StorageRoot,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateAccountsMetastore) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":         types.StringType,
			"region":       types.StringType,
			"storage_root": types.StringType,
		},
	}
}

type CreateAccountsStorageCredential struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// The Cloudflare API token configuration.
	CloudflareApiToken types.Object `tfsdk:"cloudflare_api_token"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The credential name. The name must be unique among storage and service
	// credentials within the metastore.
	Name types.String `tfsdk:"name"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
}

func (to *CreateAccountsStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateAccountsStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				// Recursively sync the fields of CloudflareApiToken
				toCloudflareApiToken.SyncFieldsDuringCreateOrUpdate(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *CreateAccountsStorageCredential) SyncFieldsDuringRead(ctx context.Context, from CreateAccountsStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				toCloudflareApiToken.SyncFieldsDuringRead(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m CreateAccountsStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["cloudflare_api_token"] = attrs["cloudflare_api_token"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["read_only"] = attrs["read_only"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateAccountsStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateAccountsStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRoleRequest{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentityRequest{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"cloudflare_api_token":           reflect.TypeOf(CloudflareApiToken{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccountRequest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateAccountsStorageCredential
// only implements ToObjectValue() and Type().
func (m CreateAccountsStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"cloudflare_api_token":           m.CloudflareApiToken,
			"comment":                        m.Comment,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"name":                           m.Name,
			"read_only":                      m.ReadOnly,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateAccountsStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRoleRequest{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentityRequest{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"cloudflare_api_token":           CloudflareApiToken{}.Type(ctx),
			"comment":                        types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccountRequest{}.Type(ctx),
			"name":                           types.StringType,
			"read_only":                      types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in CreateAccountsStorageCredential as
// a AwsIamRoleRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccountsStorageCredential) GetAwsIamRole(ctx context.Context) (AwsIamRoleRequest, bool) {
	var e AwsIamRoleRequest
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRoleRequest
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in CreateAccountsStorageCredential.
func (m *CreateAccountsStorageCredential) SetAwsIamRole(ctx context.Context, v AwsIamRoleRequest) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in CreateAccountsStorageCredential as
// a AzureManagedIdentityRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccountsStorageCredential) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentityRequest, bool) {
	var e AzureManagedIdentityRequest
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentityRequest
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in CreateAccountsStorageCredential.
func (m *CreateAccountsStorageCredential) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentityRequest) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in CreateAccountsStorageCredential as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccountsStorageCredential) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in CreateAccountsStorageCredential.
func (m *CreateAccountsStorageCredential) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetCloudflareApiToken returns the value of the CloudflareApiToken field in CreateAccountsStorageCredential as
// a CloudflareApiToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccountsStorageCredential) GetCloudflareApiToken(ctx context.Context) (CloudflareApiToken, bool) {
	var e CloudflareApiToken
	if m.CloudflareApiToken.IsNull() || m.CloudflareApiToken.IsUnknown() {
		return e, false
	}
	var v CloudflareApiToken
	d := m.CloudflareApiToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCloudflareApiToken sets the value of the CloudflareApiToken field in CreateAccountsStorageCredential.
func (m *CreateAccountsStorageCredential) SetCloudflareApiToken(ctx context.Context, v CloudflareApiToken) {
	vs := v.ToObjectValue(ctx)
	m.CloudflareApiToken = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in CreateAccountsStorageCredential as
// a DatabricksGcpServiceAccountRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateAccountsStorageCredential) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccountRequest, bool) {
	var e DatabricksGcpServiceAccountRequest
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccountRequest
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in CreateAccountsStorageCredential.
func (m *CreateAccountsStorageCredential) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccountRequest) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type CreateCatalog struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// The name of the connection to an external data source.
	ConnectionName types.String `tfsdk:"connection_name"`
	// Name of catalog.
	Name types.String `tfsdk:"name"`
	// A map of key-value properties attached to the securable.
	Options types.Map `tfsdk:"options"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
	// The name of delta sharing provider.
	//
	// A Delta Sharing catalog is a catalog that is based on a Delta share on a
	// remote sharing server.
	ProviderName types.String `tfsdk:"provider_name"`
	// The name of the share under the share provider.
	ShareName types.String `tfsdk:"share_name"`
	// Storage root URL for managed tables within catalog.
	StorageRoot types.String `tfsdk:"storage_root"`
}

func (to *CreateCatalog) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateCatalog) {
}

func (to *CreateCatalog) SyncFieldsDuringRead(ctx context.Context, from CreateCatalog) {
}

func (m CreateCatalog) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["connection_name"] = attrs["connection_name"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["options"] = attrs["options"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["provider_name"] = attrs["provider_name"].SetOptional()
	attrs["share_name"] = attrs["share_name"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateCatalog.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateCatalog) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"options":    reflect.TypeOf(types.String{}),
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateCatalog
// only implements ToObjectValue() and Type().
func (m CreateCatalog) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":         m.Comment,
			"connection_name": m.ConnectionName,
			"name":            m.Name,
			"options":         m.Options,
			"properties":      m.Properties,
			"provider_name":   m.ProviderName,
			"share_name":      m.ShareName,
			"storage_root":    m.StorageRoot,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateCatalog) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":         types.StringType,
			"connection_name": types.StringType,
			"name":            types.StringType,
			"options": basetypes.MapType{
				ElemType: types.StringType,
			},
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"provider_name": types.StringType,
			"share_name":    types.StringType,
			"storage_root":  types.StringType,
		},
	}
}

// GetOptions returns the value of the Options field in CreateCatalog as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateCatalog) GetOptions(ctx context.Context) (map[string]types.String, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in CreateCatalog.
func (m *CreateCatalog) SetOptions(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.MapValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in CreateCatalog as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateCatalog) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in CreateCatalog.
func (m *CreateCatalog) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

type CreateConnection struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// The type of connection.
	ConnectionType types.String `tfsdk:"connection_type"`
	// Name of the connection.
	Name types.String `tfsdk:"name"`
	// A map of key-value properties attached to the securable.
	Options types.Map `tfsdk:"options"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
	// If the connection is read only.
	ReadOnly types.Bool `tfsdk:"read_only"`
}

func (to *CreateConnection) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateConnection) {
}

func (to *CreateConnection) SyncFieldsDuringRead(ctx context.Context, from CreateConnection) {
}

func (m CreateConnection) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["connection_type"] = attrs["connection_type"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["options"] = attrs["options"].SetRequired()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateConnection.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateConnection) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"options":    reflect.TypeOf(types.String{}),
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateConnection
// only implements ToObjectValue() and Type().
func (m CreateConnection) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":         m.Comment,
			"connection_type": m.ConnectionType,
			"name":            m.Name,
			"options":         m.Options,
			"properties":      m.Properties,
			"read_only":       m.ReadOnly,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateConnection) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":         types.StringType,
			"connection_type": types.StringType,
			"name":            types.StringType,
			"options": basetypes.MapType{
				ElemType: types.StringType,
			},
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"read_only": types.BoolType,
		},
	}
}

// GetOptions returns the value of the Options field in CreateConnection as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateConnection) GetOptions(ctx context.Context) (map[string]types.String, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in CreateConnection.
func (m *CreateConnection) SetOptions(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.MapValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in CreateConnection as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateConnection) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in CreateConnection.
func (m *CreateConnection) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

type CreateCredentialRequest struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The credential name. The name must be unique among storage and service
	// credentials within the metastore.
	Name types.String `tfsdk:"name"`
	// Indicates the purpose of the credential.
	Purpose types.String `tfsdk:"purpose"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Optional. Supplying true to this argument skips validation of the created
	// set of credentials.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
}

func (to *CreateCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateCredentialRequest) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *CreateCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from CreateCredentialRequest) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m CreateCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["purpose"] = attrs["purpose"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRole{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentity{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccount{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateCredentialRequest
// only implements ToObjectValue() and Type().
func (m CreateCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"comment":                        m.Comment,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"name":                           m.Name,
			"purpose":                        m.Purpose,
			"read_only":                      m.ReadOnly,
			"skip_validation":                m.SkipValidation,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRole{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentity{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"comment":                        types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccount{}.Type(ctx),
			"name":                           types.StringType,
			"purpose":                        types.StringType,
			"read_only":                      types.BoolType,
			"skip_validation":                types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in CreateCredentialRequest as
// a AwsIamRole value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateCredentialRequest) GetAwsIamRole(ctx context.Context) (AwsIamRole, bool) {
	var e AwsIamRole
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRole
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in CreateCredentialRequest.
func (m *CreateCredentialRequest) SetAwsIamRole(ctx context.Context, v AwsIamRole) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in CreateCredentialRequest as
// a AzureManagedIdentity value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateCredentialRequest) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentity, bool) {
	var e AzureManagedIdentity
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentity
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in CreateCredentialRequest.
func (m *CreateCredentialRequest) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentity) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in CreateCredentialRequest as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateCredentialRequest) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in CreateCredentialRequest.
func (m *CreateCredentialRequest) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in CreateCredentialRequest as
// a DatabricksGcpServiceAccount value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateCredentialRequest) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccount, bool) {
	var e DatabricksGcpServiceAccount
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccount
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in CreateCredentialRequest.
func (m *CreateCredentialRequest) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccount) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type CreateEntityTagAssignmentRequest struct {
	TagAssignment types.Object `tfsdk:"tag_assignment"`
}

func (to *CreateEntityTagAssignmentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateEntityTagAssignmentRequest) {
	if !from.TagAssignment.IsNull() && !from.TagAssignment.IsUnknown() {
		if toTagAssignment, ok := to.GetTagAssignment(ctx); ok {
			if fromTagAssignment, ok := from.GetTagAssignment(ctx); ok {
				// Recursively sync the fields of TagAssignment
				toTagAssignment.SyncFieldsDuringCreateOrUpdate(ctx, fromTagAssignment)
				to.SetTagAssignment(ctx, toTagAssignment)
			}
		}
	}
}

func (to *CreateEntityTagAssignmentRequest) SyncFieldsDuringRead(ctx context.Context, from CreateEntityTagAssignmentRequest) {
	if !from.TagAssignment.IsNull() && !from.TagAssignment.IsUnknown() {
		if toTagAssignment, ok := to.GetTagAssignment(ctx); ok {
			if fromTagAssignment, ok := from.GetTagAssignment(ctx); ok {
				toTagAssignment.SyncFieldsDuringRead(ctx, fromTagAssignment)
				to.SetTagAssignment(ctx, toTagAssignment)
			}
		}
	}
}

func (m CreateEntityTagAssignmentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["tag_assignment"] = attrs["tag_assignment"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateEntityTagAssignmentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateEntityTagAssignmentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"tag_assignment": reflect.TypeOf(EntityTagAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateEntityTagAssignmentRequest
// only implements ToObjectValue() and Type().
func (m CreateEntityTagAssignmentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"tag_assignment": m.TagAssignment,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateEntityTagAssignmentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"tag_assignment": EntityTagAssignment{}.Type(ctx),
		},
	}
}

// GetTagAssignment returns the value of the TagAssignment field in CreateEntityTagAssignmentRequest as
// a EntityTagAssignment value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateEntityTagAssignmentRequest) GetTagAssignment(ctx context.Context) (EntityTagAssignment, bool) {
	var e EntityTagAssignment
	if m.TagAssignment.IsNull() || m.TagAssignment.IsUnknown() {
		return e, false
	}
	var v EntityTagAssignment
	d := m.TagAssignment.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTagAssignment sets the value of the TagAssignment field in CreateEntityTagAssignmentRequest.
func (m *CreateEntityTagAssignmentRequest) SetTagAssignment(ctx context.Context, v EntityTagAssignment) {
	vs := v.ToObjectValue(ctx)
	m.TagAssignment = vs
}

type CreateExternalLineageRelationshipRequest struct {
	ExternalLineageRelationship types.Object `tfsdk:"external_lineage_relationship"`
}

func (to *CreateExternalLineageRelationshipRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateExternalLineageRelationshipRequest) {
	if !from.ExternalLineageRelationship.IsNull() && !from.ExternalLineageRelationship.IsUnknown() {
		if toExternalLineageRelationship, ok := to.GetExternalLineageRelationship(ctx); ok {
			if fromExternalLineageRelationship, ok := from.GetExternalLineageRelationship(ctx); ok {
				// Recursively sync the fields of ExternalLineageRelationship
				toExternalLineageRelationship.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalLineageRelationship)
				to.SetExternalLineageRelationship(ctx, toExternalLineageRelationship)
			}
		}
	}
}

func (to *CreateExternalLineageRelationshipRequest) SyncFieldsDuringRead(ctx context.Context, from CreateExternalLineageRelationshipRequest) {
	if !from.ExternalLineageRelationship.IsNull() && !from.ExternalLineageRelationship.IsUnknown() {
		if toExternalLineageRelationship, ok := to.GetExternalLineageRelationship(ctx); ok {
			if fromExternalLineageRelationship, ok := from.GetExternalLineageRelationship(ctx); ok {
				toExternalLineageRelationship.SyncFieldsDuringRead(ctx, fromExternalLineageRelationship)
				to.SetExternalLineageRelationship(ctx, toExternalLineageRelationship)
			}
		}
	}
}

func (m CreateExternalLineageRelationshipRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_lineage_relationship"] = attrs["external_lineage_relationship"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateExternalLineageRelationshipRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateExternalLineageRelationshipRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_lineage_relationship": reflect.TypeOf(CreateRequestExternalLineage{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateExternalLineageRelationshipRequest
// only implements ToObjectValue() and Type().
func (m CreateExternalLineageRelationshipRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_lineage_relationship": m.ExternalLineageRelationship,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateExternalLineageRelationshipRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_lineage_relationship": CreateRequestExternalLineage{}.Type(ctx),
		},
	}
}

// GetExternalLineageRelationship returns the value of the ExternalLineageRelationship field in CreateExternalLineageRelationshipRequest as
// a CreateRequestExternalLineage value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateExternalLineageRelationshipRequest) GetExternalLineageRelationship(ctx context.Context) (CreateRequestExternalLineage, bool) {
	var e CreateRequestExternalLineage
	if m.ExternalLineageRelationship.IsNull() || m.ExternalLineageRelationship.IsUnknown() {
		return e, false
	}
	var v CreateRequestExternalLineage
	d := m.ExternalLineageRelationship.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalLineageRelationship sets the value of the ExternalLineageRelationship field in CreateExternalLineageRelationshipRequest.
func (m *CreateExternalLineageRelationshipRequest) SetExternalLineageRelationship(ctx context.Context, v CreateRequestExternalLineage) {
	vs := v.ToObjectValue(ctx)
	m.ExternalLineageRelationship = vs
}

type CreateExternalLocation struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Name of the storage credential used with this location.
	CredentialName types.String `tfsdk:"credential_name"`
	// Whether to enable file events on this external location.
	EnableFileEvents types.Bool `tfsdk:"enable_file_events"`

	EncryptionDetails types.Object `tfsdk:"encryption_details"`
	// Indicates whether fallback mode is enabled for this external location.
	// When fallback mode is enabled, the access to the location falls back to
	// cluster credentials if UC credentials are not sufficient.
	Fallback types.Bool `tfsdk:"fallback"`
	// File event queue settings. If `enable_file_events` is `true`, must be
	// defined and have exactly one of the documented properties.
	FileEventQueue types.Object `tfsdk:"file_event_queue"`
	// Name of the external location.
	Name types.String `tfsdk:"name"`
	// Indicates whether the external location is read-only.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Skips validation of the storage credential associated with the external
	// location.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
	// Path URL of the external location.
	Url types.String `tfsdk:"url"`
}

func (to *CreateExternalLocation) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateExternalLocation) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				// Recursively sync the fields of EncryptionDetails
				toEncryptionDetails.SyncFieldsDuringCreateOrUpdate(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.FileEventQueue.IsNull() && !from.FileEventQueue.IsUnknown() {
		if toFileEventQueue, ok := to.GetFileEventQueue(ctx); ok {
			if fromFileEventQueue, ok := from.GetFileEventQueue(ctx); ok {
				// Recursively sync the fields of FileEventQueue
				toFileEventQueue.SyncFieldsDuringCreateOrUpdate(ctx, fromFileEventQueue)
				to.SetFileEventQueue(ctx, toFileEventQueue)
			}
		}
	}
}

func (to *CreateExternalLocation) SyncFieldsDuringRead(ctx context.Context, from CreateExternalLocation) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				toEncryptionDetails.SyncFieldsDuringRead(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.FileEventQueue.IsNull() && !from.FileEventQueue.IsUnknown() {
		if toFileEventQueue, ok := to.GetFileEventQueue(ctx); ok {
			if fromFileEventQueue, ok := from.GetFileEventQueue(ctx); ok {
				toFileEventQueue.SyncFieldsDuringRead(ctx, fromFileEventQueue)
				to.SetFileEventQueue(ctx, toFileEventQueue)
			}
		}
	}
}

func (m CreateExternalLocation) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["credential_name"] = attrs["credential_name"].SetRequired()
	attrs["enable_file_events"] = attrs["enable_file_events"].SetOptional()
	attrs["encryption_details"] = attrs["encryption_details"].SetOptional()
	attrs["fallback"] = attrs["fallback"].SetOptional()
	attrs["file_event_queue"] = attrs["file_event_queue"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()
	attrs["url"] = attrs["url"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateExternalLocation.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateExternalLocation) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"encryption_details": reflect.TypeOf(EncryptionDetails{}),
		"file_event_queue":   reflect.TypeOf(FileEventQueue{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateExternalLocation
// only implements ToObjectValue() and Type().
func (m CreateExternalLocation) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":            m.Comment,
			"credential_name":    m.CredentialName,
			"enable_file_events": m.EnableFileEvents,
			"encryption_details": m.EncryptionDetails,
			"fallback":           m.Fallback,
			"file_event_queue":   m.FileEventQueue,
			"name":               m.Name,
			"read_only":          m.ReadOnly,
			"skip_validation":    m.SkipValidation,
			"url":                m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateExternalLocation) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":            types.StringType,
			"credential_name":    types.StringType,
			"enable_file_events": types.BoolType,
			"encryption_details": EncryptionDetails{}.Type(ctx),
			"fallback":           types.BoolType,
			"file_event_queue":   FileEventQueue{}.Type(ctx),
			"name":               types.StringType,
			"read_only":          types.BoolType,
			"skip_validation":    types.BoolType,
			"url":                types.StringType,
		},
	}
}

// GetEncryptionDetails returns the value of the EncryptionDetails field in CreateExternalLocation as
// a EncryptionDetails value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateExternalLocation) GetEncryptionDetails(ctx context.Context) (EncryptionDetails, bool) {
	var e EncryptionDetails
	if m.EncryptionDetails.IsNull() || m.EncryptionDetails.IsUnknown() {
		return e, false
	}
	var v EncryptionDetails
	d := m.EncryptionDetails.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEncryptionDetails sets the value of the EncryptionDetails field in CreateExternalLocation.
func (m *CreateExternalLocation) SetEncryptionDetails(ctx context.Context, v EncryptionDetails) {
	vs := v.ToObjectValue(ctx)
	m.EncryptionDetails = vs
}

// GetFileEventQueue returns the value of the FileEventQueue field in CreateExternalLocation as
// a FileEventQueue value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateExternalLocation) GetFileEventQueue(ctx context.Context) (FileEventQueue, bool) {
	var e FileEventQueue
	if m.FileEventQueue.IsNull() || m.FileEventQueue.IsUnknown() {
		return e, false
	}
	var v FileEventQueue
	d := m.FileEventQueue.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFileEventQueue sets the value of the FileEventQueue field in CreateExternalLocation.
func (m *CreateExternalLocation) SetFileEventQueue(ctx context.Context, v FileEventQueue) {
	vs := v.ToObjectValue(ctx)
	m.FileEventQueue = vs
}

type CreateExternalMetadataRequest struct {
	ExternalMetadata types.Object `tfsdk:"external_metadata"`
}

func (to *CreateExternalMetadataRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateExternalMetadataRequest) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() {
		if toExternalMetadata, ok := to.GetExternalMetadata(ctx); ok {
			if fromExternalMetadata, ok := from.GetExternalMetadata(ctx); ok {
				// Recursively sync the fields of ExternalMetadata
				toExternalMetadata.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalMetadata)
				to.SetExternalMetadata(ctx, toExternalMetadata)
			}
		}
	}
}

func (to *CreateExternalMetadataRequest) SyncFieldsDuringRead(ctx context.Context, from CreateExternalMetadataRequest) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() {
		if toExternalMetadata, ok := to.GetExternalMetadata(ctx); ok {
			if fromExternalMetadata, ok := from.GetExternalMetadata(ctx); ok {
				toExternalMetadata.SyncFieldsDuringRead(ctx, fromExternalMetadata)
				to.SetExternalMetadata(ctx, toExternalMetadata)
			}
		}
	}
}

func (m CreateExternalMetadataRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_metadata"] = attrs["external_metadata"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateExternalMetadataRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateExternalMetadataRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_metadata": reflect.TypeOf(ExternalMetadata{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateExternalMetadataRequest
// only implements ToObjectValue() and Type().
func (m CreateExternalMetadataRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_metadata": m.ExternalMetadata,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateExternalMetadataRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_metadata": ExternalMetadata{}.Type(ctx),
		},
	}
}

// GetExternalMetadata returns the value of the ExternalMetadata field in CreateExternalMetadataRequest as
// a ExternalMetadata value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateExternalMetadataRequest) GetExternalMetadata(ctx context.Context) (ExternalMetadata, bool) {
	var e ExternalMetadata
	if m.ExternalMetadata.IsNull() || m.ExternalMetadata.IsUnknown() {
		return e, false
	}
	var v ExternalMetadata
	d := m.ExternalMetadata.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalMetadata sets the value of the ExternalMetadata field in CreateExternalMetadataRequest.
func (m *CreateExternalMetadataRequest) SetExternalMetadata(ctx context.Context, v ExternalMetadata) {
	vs := v.ToObjectValue(ctx)
	m.ExternalMetadata = vs
}

type CreateFunction struct {
	// Name of parent Catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Scalar function return data type.
	DataType types.String `tfsdk:"data_type"`
	// External function language.
	ExternalLanguage types.String `tfsdk:"external_language"`
	// External function name.
	ExternalName types.String `tfsdk:"external_name"`
	// Pretty printed function data type.
	FullDataType types.String `tfsdk:"full_data_type"`
	// Function input parameters.
	InputParams types.Object `tfsdk:"input_params"`
	// Whether the function is deterministic.
	IsDeterministic types.Bool `tfsdk:"is_deterministic"`
	// Function null call.
	IsNullCall types.Bool `tfsdk:"is_null_call"`
	// Name of function, relative to parent schema.
	Name types.String `tfsdk:"name"`
	// Function parameter style. **S** is the value for SQL.
	ParameterStyle types.String `tfsdk:"parameter_style"`
	// JSON-serialized key-value pair map, encoded (escaped) as a string.
	Properties types.String `tfsdk:"properties"`
	// Table function return parameters.
	ReturnParams types.Object `tfsdk:"return_params"`
	// Function language. When **EXTERNAL** is used, the language of the routine
	// function should be specified in the **external_language** field, and the
	// **return_params** of the function cannot be used (as **TABLE** return
	// type is not supported), and the **sql_data_access** field must be
	// **NO_SQL**.
	RoutineBody types.String `tfsdk:"routine_body"`
	// Function body.
	RoutineDefinition types.String `tfsdk:"routine_definition"`
	// function dependencies.
	RoutineDependencies types.Object `tfsdk:"routine_dependencies"`
	// Name of parent Schema relative to its parent Catalog.
	SchemaName types.String `tfsdk:"schema_name"`
	// Function security type.
	SecurityType types.String `tfsdk:"security_type"`
	// Specific name of the function; Reserved for future use.
	SpecificName types.String `tfsdk:"specific_name"`
	// Function SQL data access.
	SqlDataAccess types.String `tfsdk:"sql_data_access"`
	// List of schemes whose objects can be referenced without qualification.
	SqlPath types.String `tfsdk:"sql_path"`
}

func (to *CreateFunction) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateFunction) {
	if !from.InputParams.IsNull() && !from.InputParams.IsUnknown() {
		if toInputParams, ok := to.GetInputParams(ctx); ok {
			if fromInputParams, ok := from.GetInputParams(ctx); ok {
				// Recursively sync the fields of InputParams
				toInputParams.SyncFieldsDuringCreateOrUpdate(ctx, fromInputParams)
				to.SetInputParams(ctx, toInputParams)
			}
		}
	}
	if !from.ReturnParams.IsNull() && !from.ReturnParams.IsUnknown() {
		if toReturnParams, ok := to.GetReturnParams(ctx); ok {
			if fromReturnParams, ok := from.GetReturnParams(ctx); ok {
				// Recursively sync the fields of ReturnParams
				toReturnParams.SyncFieldsDuringCreateOrUpdate(ctx, fromReturnParams)
				to.SetReturnParams(ctx, toReturnParams)
			}
		}
	}
	if !from.RoutineDependencies.IsNull() && !from.RoutineDependencies.IsUnknown() {
		if toRoutineDependencies, ok := to.GetRoutineDependencies(ctx); ok {
			if fromRoutineDependencies, ok := from.GetRoutineDependencies(ctx); ok {
				// Recursively sync the fields of RoutineDependencies
				toRoutineDependencies.SyncFieldsDuringCreateOrUpdate(ctx, fromRoutineDependencies)
				to.SetRoutineDependencies(ctx, toRoutineDependencies)
			}
		}
	}
}

func (to *CreateFunction) SyncFieldsDuringRead(ctx context.Context, from CreateFunction) {
	if !from.InputParams.IsNull() && !from.InputParams.IsUnknown() {
		if toInputParams, ok := to.GetInputParams(ctx); ok {
			if fromInputParams, ok := from.GetInputParams(ctx); ok {
				toInputParams.SyncFieldsDuringRead(ctx, fromInputParams)
				to.SetInputParams(ctx, toInputParams)
			}
		}
	}
	if !from.ReturnParams.IsNull() && !from.ReturnParams.IsUnknown() {
		if toReturnParams, ok := to.GetReturnParams(ctx); ok {
			if fromReturnParams, ok := from.GetReturnParams(ctx); ok {
				toReturnParams.SyncFieldsDuringRead(ctx, fromReturnParams)
				to.SetReturnParams(ctx, toReturnParams)
			}
		}
	}
	if !from.RoutineDependencies.IsNull() && !from.RoutineDependencies.IsUnknown() {
		if toRoutineDependencies, ok := to.GetRoutineDependencies(ctx); ok {
			if fromRoutineDependencies, ok := from.GetRoutineDependencies(ctx); ok {
				toRoutineDependencies.SyncFieldsDuringRead(ctx, fromRoutineDependencies)
				to.SetRoutineDependencies(ctx, toRoutineDependencies)
			}
		}
	}
}

func (m CreateFunction) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["data_type"] = attrs["data_type"].SetRequired()
	attrs["external_language"] = attrs["external_language"].SetOptional()
	attrs["external_name"] = attrs["external_name"].SetOptional()
	attrs["full_data_type"] = attrs["full_data_type"].SetRequired()
	attrs["input_params"] = attrs["input_params"].SetRequired()
	attrs["is_deterministic"] = attrs["is_deterministic"].SetRequired()
	attrs["is_null_call"] = attrs["is_null_call"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["parameter_style"] = attrs["parameter_style"].SetRequired()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["return_params"] = attrs["return_params"].SetOptional()
	attrs["routine_body"] = attrs["routine_body"].SetRequired()
	attrs["routine_definition"] = attrs["routine_definition"].SetRequired()
	attrs["routine_dependencies"] = attrs["routine_dependencies"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()
	attrs["security_type"] = attrs["security_type"].SetRequired()
	attrs["specific_name"] = attrs["specific_name"].SetRequired()
	attrs["sql_data_access"] = attrs["sql_data_access"].SetRequired()
	attrs["sql_path"] = attrs["sql_path"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateFunction.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateFunction) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"input_params":         reflect.TypeOf(FunctionParameterInfos{}),
		"return_params":        reflect.TypeOf(FunctionParameterInfos{}),
		"routine_dependencies": reflect.TypeOf(DependencyList{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateFunction
// only implements ToObjectValue() and Type().
func (m CreateFunction) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":         m.CatalogName,
			"comment":              m.Comment,
			"data_type":            m.DataType,
			"external_language":    m.ExternalLanguage,
			"external_name":        m.ExternalName,
			"full_data_type":       m.FullDataType,
			"input_params":         m.InputParams,
			"is_deterministic":     m.IsDeterministic,
			"is_null_call":         m.IsNullCall,
			"name":                 m.Name,
			"parameter_style":      m.ParameterStyle,
			"properties":           m.Properties,
			"return_params":        m.ReturnParams,
			"routine_body":         m.RoutineBody,
			"routine_definition":   m.RoutineDefinition,
			"routine_dependencies": m.RoutineDependencies,
			"schema_name":          m.SchemaName,
			"security_type":        m.SecurityType,
			"specific_name":        m.SpecificName,
			"sql_data_access":      m.SqlDataAccess,
			"sql_path":             m.SqlPath,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateFunction) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":         types.StringType,
			"comment":              types.StringType,
			"data_type":            types.StringType,
			"external_language":    types.StringType,
			"external_name":        types.StringType,
			"full_data_type":       types.StringType,
			"input_params":         FunctionParameterInfos{}.Type(ctx),
			"is_deterministic":     types.BoolType,
			"is_null_call":         types.BoolType,
			"name":                 types.StringType,
			"parameter_style":      types.StringType,
			"properties":           types.StringType,
			"return_params":        FunctionParameterInfos{}.Type(ctx),
			"routine_body":         types.StringType,
			"routine_definition":   types.StringType,
			"routine_dependencies": DependencyList{}.Type(ctx),
			"schema_name":          types.StringType,
			"security_type":        types.StringType,
			"specific_name":        types.StringType,
			"sql_data_access":      types.StringType,
			"sql_path":             types.StringType,
		},
	}
}

// GetInputParams returns the value of the InputParams field in CreateFunction as
// a FunctionParameterInfos value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateFunction) GetInputParams(ctx context.Context) (FunctionParameterInfos, bool) {
	var e FunctionParameterInfos
	if m.InputParams.IsNull() || m.InputParams.IsUnknown() {
		return e, false
	}
	var v FunctionParameterInfos
	d := m.InputParams.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInputParams sets the value of the InputParams field in CreateFunction.
func (m *CreateFunction) SetInputParams(ctx context.Context, v FunctionParameterInfos) {
	vs := v.ToObjectValue(ctx)
	m.InputParams = vs
}

// GetReturnParams returns the value of the ReturnParams field in CreateFunction as
// a FunctionParameterInfos value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateFunction) GetReturnParams(ctx context.Context) (FunctionParameterInfos, bool) {
	var e FunctionParameterInfos
	if m.ReturnParams.IsNull() || m.ReturnParams.IsUnknown() {
		return e, false
	}
	var v FunctionParameterInfos
	d := m.ReturnParams.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetReturnParams sets the value of the ReturnParams field in CreateFunction.
func (m *CreateFunction) SetReturnParams(ctx context.Context, v FunctionParameterInfos) {
	vs := v.ToObjectValue(ctx)
	m.ReturnParams = vs
}

// GetRoutineDependencies returns the value of the RoutineDependencies field in CreateFunction as
// a DependencyList value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateFunction) GetRoutineDependencies(ctx context.Context) (DependencyList, bool) {
	var e DependencyList
	if m.RoutineDependencies.IsNull() || m.RoutineDependencies.IsUnknown() {
		return e, false
	}
	var v DependencyList
	d := m.RoutineDependencies.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRoutineDependencies sets the value of the RoutineDependencies field in CreateFunction.
func (m *CreateFunction) SetRoutineDependencies(ctx context.Context, v DependencyList) {
	vs := v.ToObjectValue(ctx)
	m.RoutineDependencies = vs
}

type CreateFunctionRequest struct {
	// Partial __FunctionInfo__ specifying the function to be created.
	FunctionInfo types.Object `tfsdk:"function_info"`
}

func (to *CreateFunctionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateFunctionRequest) {
	if !from.FunctionInfo.IsNull() && !from.FunctionInfo.IsUnknown() {
		if toFunctionInfo, ok := to.GetFunctionInfo(ctx); ok {
			if fromFunctionInfo, ok := from.GetFunctionInfo(ctx); ok {
				// Recursively sync the fields of FunctionInfo
				toFunctionInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromFunctionInfo)
				to.SetFunctionInfo(ctx, toFunctionInfo)
			}
		}
	}
}

func (to *CreateFunctionRequest) SyncFieldsDuringRead(ctx context.Context, from CreateFunctionRequest) {
	if !from.FunctionInfo.IsNull() && !from.FunctionInfo.IsUnknown() {
		if toFunctionInfo, ok := to.GetFunctionInfo(ctx); ok {
			if fromFunctionInfo, ok := from.GetFunctionInfo(ctx); ok {
				toFunctionInfo.SyncFieldsDuringRead(ctx, fromFunctionInfo)
				to.SetFunctionInfo(ctx, toFunctionInfo)
			}
		}
	}
}

func (m CreateFunctionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["function_info"] = attrs["function_info"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateFunctionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateFunctionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"function_info": reflect.TypeOf(CreateFunction{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateFunctionRequest
// only implements ToObjectValue() and Type().
func (m CreateFunctionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"function_info": m.FunctionInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateFunctionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"function_info": CreateFunction{}.Type(ctx),
		},
	}
}

// GetFunctionInfo returns the value of the FunctionInfo field in CreateFunctionRequest as
// a CreateFunction value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateFunctionRequest) GetFunctionInfo(ctx context.Context) (CreateFunction, bool) {
	var e CreateFunction
	if m.FunctionInfo.IsNull() || m.FunctionInfo.IsUnknown() {
		return e, false
	}
	var v CreateFunction
	d := m.FunctionInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFunctionInfo sets the value of the FunctionInfo field in CreateFunctionRequest.
func (m *CreateFunctionRequest) SetFunctionInfo(ctx context.Context, v CreateFunction) {
	vs := v.ToObjectValue(ctx)
	m.FunctionInfo = vs
}

type CreateMetastore struct {
	// The user-specified name of the metastore.
	Name types.String `tfsdk:"name"`
	// Cloud region which the metastore serves (e.g., `us-west-2`, `westus`).
	Region types.String `tfsdk:"region"`
	// The storage root URL for metastore
	StorageRoot types.String `tfsdk:"storage_root"`
}

func (to *CreateMetastore) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateMetastore) {
}

func (to *CreateMetastore) SyncFieldsDuringRead(ctx context.Context, from CreateMetastore) {
}

func (m CreateMetastore) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["region"] = attrs["region"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateMetastore.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateMetastore) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateMetastore
// only implements ToObjectValue() and Type().
func (m CreateMetastore) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":         m.Name,
			"region":       m.Region,
			"storage_root": m.StorageRoot,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateMetastore) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":         types.StringType,
			"region":       types.StringType,
			"storage_root": types.StringType,
		},
	}
}

type CreateMetastoreAssignment struct {
	// The name of the default catalog in the metastore. This field is
	// deprecated. Please use "Default Namespace API" to configure the default
	// catalog for a Databricks workspace.
	DefaultCatalogName types.String `tfsdk:"default_catalog_name"`
	// The unique ID of the metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// A workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *CreateMetastoreAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateMetastoreAssignment) {
}

func (to *CreateMetastoreAssignment) SyncFieldsDuringRead(ctx context.Context, from CreateMetastoreAssignment) {
}

func (m CreateMetastoreAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["default_catalog_name"] = attrs["default_catalog_name"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateMetastoreAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateMetastoreAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateMetastoreAssignment
// only implements ToObjectValue() and Type().
func (m CreateMetastoreAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"default_catalog_name": m.DefaultCatalogName,
			"metastore_id":         m.MetastoreId,
			"workspace_id":         m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateMetastoreAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"default_catalog_name": types.StringType,
			"metastore_id":         types.StringType,
			"workspace_id":         types.Int64Type,
		},
	}
}

type CreateMonitor struct {
	// [Create:REQ Update:IGN] Field for specifying the absolute path to a
	// custom directory to store data-monitoring assets. Normally prepopulated
	// to a default user location via UI and Python APIs.
	AssetsDir types.String `tfsdk:"assets_dir"`
	// [Create:OPT Update:OPT] Baseline table name. Baseline data is used to
	// compute drift from the data in the monitored `table_name`. The baseline
	// table and the monitored table shall have the same schema.
	BaselineTableName types.String `tfsdk:"baseline_table_name"`
	// [Create:OPT Update:OPT] Custom metrics.
	CustomMetrics types.List `tfsdk:"custom_metrics"`
	// [Create:OPT Update:OPT] Data classification related config.
	DataClassificationConfig types.Object `tfsdk:"data_classification_config"`

	InferenceLog types.Object `tfsdk:"inference_log"`
	// [Create:ERR Update:IGN] The latest error message for a monitor failure.
	LatestMonitorFailureMsg types.String `tfsdk:"latest_monitor_failure_msg"`
	// [Create:OPT Update:OPT] Field for specifying notification settings.
	Notifications types.Object `tfsdk:"notifications"`
	// [Create:REQ Update:REQ] Schema where output tables are created. Needs to
	// be in 2-level format {catalog}.{schema}
	OutputSchemaName types.String `tfsdk:"output_schema_name"`
	// [Create:OPT Update:OPT] The monitor schedule.
	Schedule types.Object `tfsdk:"schedule"`
	// Whether to skip creating a default dashboard summarizing data quality
	// metrics.
	SkipBuiltinDashboard types.Bool `tfsdk:"skip_builtin_dashboard"`
	// [Create:OPT Update:OPT] List of column expressions to slice data with for
	// targeted analysis. The data is grouped by each expression independently,
	// resulting in a separate slice for each predicate and its complements. For
	// example `slicing_exprs=[“col_1”, “col_2 > 10”]` will generate the
	// following slices: two slices for `col_2 > 10` (True and False), and one
	// slice per unique value in `col1`. For high-cardinality columns, only the
	// top 100 unique values by frequency will generate slices.
	SlicingExprs types.List `tfsdk:"slicing_exprs"`
	// Configuration for monitoring snapshot tables.
	Snapshot types.Object `tfsdk:"snapshot"`
	// UC table name in format `catalog.schema.table_name`. This field
	// corresponds to the {full_table_name_arg} arg in the endpoint path.
	TableName types.String `tfsdk:"-"`
	// Configuration for monitoring time series tables.
	TimeSeries types.Object `tfsdk:"time_series"`
	// Optional argument to specify the warehouse for dashboard creation. If not
	// specified, the first running warehouse will be used.
	WarehouseId types.String `tfsdk:"warehouse_id"`
}

func (to *CreateMonitor) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateMonitor) {
	if !from.CustomMetrics.IsNull() && !from.CustomMetrics.IsUnknown() && to.CustomMetrics.IsNull() && len(from.CustomMetrics.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomMetrics, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomMetrics = from.CustomMetrics
	}
	if !from.DataClassificationConfig.IsNull() && !from.DataClassificationConfig.IsUnknown() {
		if toDataClassificationConfig, ok := to.GetDataClassificationConfig(ctx); ok {
			if fromDataClassificationConfig, ok := from.GetDataClassificationConfig(ctx); ok {
				// Recursively sync the fields of DataClassificationConfig
				toDataClassificationConfig.SyncFieldsDuringCreateOrUpdate(ctx, fromDataClassificationConfig)
				to.SetDataClassificationConfig(ctx, toDataClassificationConfig)
			}
		}
	}
	if !from.InferenceLog.IsNull() && !from.InferenceLog.IsUnknown() {
		if toInferenceLog, ok := to.GetInferenceLog(ctx); ok {
			if fromInferenceLog, ok := from.GetInferenceLog(ctx); ok {
				// Recursively sync the fields of InferenceLog
				toInferenceLog.SyncFieldsDuringCreateOrUpdate(ctx, fromInferenceLog)
				to.SetInferenceLog(ctx, toInferenceLog)
			}
		}
	}
	if !from.Notifications.IsNull() && !from.Notifications.IsUnknown() {
		if toNotifications, ok := to.GetNotifications(ctx); ok {
			if fromNotifications, ok := from.GetNotifications(ctx); ok {
				// Recursively sync the fields of Notifications
				toNotifications.SyncFieldsDuringCreateOrUpdate(ctx, fromNotifications)
				to.SetNotifications(ctx, toNotifications)
			}
		}
	}
	if !from.Schedule.IsNull() && !from.Schedule.IsUnknown() {
		if toSchedule, ok := to.GetSchedule(ctx); ok {
			if fromSchedule, ok := from.GetSchedule(ctx); ok {
				// Recursively sync the fields of Schedule
				toSchedule.SyncFieldsDuringCreateOrUpdate(ctx, fromSchedule)
				to.SetSchedule(ctx, toSchedule)
			}
		}
	}
	if !from.SlicingExprs.IsNull() && !from.SlicingExprs.IsUnknown() && to.SlicingExprs.IsNull() && len(from.SlicingExprs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SlicingExprs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SlicingExprs = from.SlicingExprs
	}
	if !from.Snapshot.IsNull() && !from.Snapshot.IsUnknown() {
		if toSnapshot, ok := to.GetSnapshot(ctx); ok {
			if fromSnapshot, ok := from.GetSnapshot(ctx); ok {
				// Recursively sync the fields of Snapshot
				toSnapshot.SyncFieldsDuringCreateOrUpdate(ctx, fromSnapshot)
				to.SetSnapshot(ctx, toSnapshot)
			}
		}
	}
	if !from.TimeSeries.IsNull() && !from.TimeSeries.IsUnknown() {
		if toTimeSeries, ok := to.GetTimeSeries(ctx); ok {
			if fromTimeSeries, ok := from.GetTimeSeries(ctx); ok {
				// Recursively sync the fields of TimeSeries
				toTimeSeries.SyncFieldsDuringCreateOrUpdate(ctx, fromTimeSeries)
				to.SetTimeSeries(ctx, toTimeSeries)
			}
		}
	}
}

func (to *CreateMonitor) SyncFieldsDuringRead(ctx context.Context, from CreateMonitor) {
	if !from.CustomMetrics.IsNull() && !from.CustomMetrics.IsUnknown() && to.CustomMetrics.IsNull() && len(from.CustomMetrics.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomMetrics, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomMetrics = from.CustomMetrics
	}
	if !from.DataClassificationConfig.IsNull() && !from.DataClassificationConfig.IsUnknown() {
		if toDataClassificationConfig, ok := to.GetDataClassificationConfig(ctx); ok {
			if fromDataClassificationConfig, ok := from.GetDataClassificationConfig(ctx); ok {
				toDataClassificationConfig.SyncFieldsDuringRead(ctx, fromDataClassificationConfig)
				to.SetDataClassificationConfig(ctx, toDataClassificationConfig)
			}
		}
	}
	if !from.InferenceLog.IsNull() && !from.InferenceLog.IsUnknown() {
		if toInferenceLog, ok := to.GetInferenceLog(ctx); ok {
			if fromInferenceLog, ok := from.GetInferenceLog(ctx); ok {
				toInferenceLog.SyncFieldsDuringRead(ctx, fromInferenceLog)
				to.SetInferenceLog(ctx, toInferenceLog)
			}
		}
	}
	if !from.Notifications.IsNull() && !from.Notifications.IsUnknown() {
		if toNotifications, ok := to.GetNotifications(ctx); ok {
			if fromNotifications, ok := from.GetNotifications(ctx); ok {
				toNotifications.SyncFieldsDuringRead(ctx, fromNotifications)
				to.SetNotifications(ctx, toNotifications)
			}
		}
	}
	if !from.Schedule.IsNull() && !from.Schedule.IsUnknown() {
		if toSchedule, ok := to.GetSchedule(ctx); ok {
			if fromSchedule, ok := from.GetSchedule(ctx); ok {
				toSchedule.SyncFieldsDuringRead(ctx, fromSchedule)
				to.SetSchedule(ctx, toSchedule)
			}
		}
	}
	if !from.SlicingExprs.IsNull() && !from.SlicingExprs.IsUnknown() && to.SlicingExprs.IsNull() && len(from.SlicingExprs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SlicingExprs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SlicingExprs = from.SlicingExprs
	}
	if !from.Snapshot.IsNull() && !from.Snapshot.IsUnknown() {
		if toSnapshot, ok := to.GetSnapshot(ctx); ok {
			if fromSnapshot, ok := from.GetSnapshot(ctx); ok {
				toSnapshot.SyncFieldsDuringRead(ctx, fromSnapshot)
				to.SetSnapshot(ctx, toSnapshot)
			}
		}
	}
	if !from.TimeSeries.IsNull() && !from.TimeSeries.IsUnknown() {
		if toTimeSeries, ok := to.GetTimeSeries(ctx); ok {
			if fromTimeSeries, ok := from.GetTimeSeries(ctx); ok {
				toTimeSeries.SyncFieldsDuringRead(ctx, fromTimeSeries)
				to.SetTimeSeries(ctx, toTimeSeries)
			}
		}
	}
}

func (m CreateMonitor) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["assets_dir"] = attrs["assets_dir"].SetRequired()
	attrs["baseline_table_name"] = attrs["baseline_table_name"].SetOptional()
	attrs["custom_metrics"] = attrs["custom_metrics"].SetOptional()
	attrs["data_classification_config"] = attrs["data_classification_config"].SetOptional()
	attrs["inference_log"] = attrs["inference_log"].SetOptional()
	attrs["latest_monitor_failure_msg"] = attrs["latest_monitor_failure_msg"].SetOptional()
	attrs["notifications"] = attrs["notifications"].SetOptional()
	attrs["output_schema_name"] = attrs["output_schema_name"].SetRequired()
	attrs["schedule"] = attrs["schedule"].SetOptional()
	attrs["skip_builtin_dashboard"] = attrs["skip_builtin_dashboard"].SetOptional()
	attrs["slicing_exprs"] = attrs["slicing_exprs"].SetOptional()
	attrs["snapshot"] = attrs["snapshot"].SetOptional()
	attrs["time_series"] = attrs["time_series"].SetOptional()
	attrs["warehouse_id"] = attrs["warehouse_id"].SetOptional()
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateMonitor.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateMonitor) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"custom_metrics":             reflect.TypeOf(MonitorMetric{}),
		"data_classification_config": reflect.TypeOf(MonitorDataClassificationConfig{}),
		"inference_log":              reflect.TypeOf(MonitorInferenceLog{}),
		"notifications":              reflect.TypeOf(MonitorNotifications{}),
		"schedule":                   reflect.TypeOf(MonitorCronSchedule{}),
		"slicing_exprs":              reflect.TypeOf(types.String{}),
		"snapshot":                   reflect.TypeOf(MonitorSnapshot{}),
		"time_series":                reflect.TypeOf(MonitorTimeSeries{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateMonitor
// only implements ToObjectValue() and Type().
func (m CreateMonitor) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"assets_dir":                 m.AssetsDir,
			"baseline_table_name":        m.BaselineTableName,
			"custom_metrics":             m.CustomMetrics,
			"data_classification_config": m.DataClassificationConfig,
			"inference_log":              m.InferenceLog,
			"latest_monitor_failure_msg": m.LatestMonitorFailureMsg,
			"notifications":              m.Notifications,
			"output_schema_name":         m.OutputSchemaName,
			"schedule":                   m.Schedule,
			"skip_builtin_dashboard":     m.SkipBuiltinDashboard,
			"slicing_exprs":              m.SlicingExprs,
			"snapshot":                   m.Snapshot,
			"table_name":                 m.TableName,
			"time_series":                m.TimeSeries,
			"warehouse_id":               m.WarehouseId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateMonitor) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"assets_dir":          types.StringType,
			"baseline_table_name": types.StringType,
			"custom_metrics": basetypes.ListType{
				ElemType: MonitorMetric{}.Type(ctx),
			},
			"data_classification_config": MonitorDataClassificationConfig{}.Type(ctx),
			"inference_log":              MonitorInferenceLog{}.Type(ctx),
			"latest_monitor_failure_msg": types.StringType,
			"notifications":              MonitorNotifications{}.Type(ctx),
			"output_schema_name":         types.StringType,
			"schedule":                   MonitorCronSchedule{}.Type(ctx),
			"skip_builtin_dashboard":     types.BoolType,
			"slicing_exprs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"snapshot":     MonitorSnapshot{}.Type(ctx),
			"table_name":   types.StringType,
			"time_series":  MonitorTimeSeries{}.Type(ctx),
			"warehouse_id": types.StringType,
		},
	}
}

// GetCustomMetrics returns the value of the CustomMetrics field in CreateMonitor as
// a slice of MonitorMetric values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetCustomMetrics(ctx context.Context) ([]MonitorMetric, bool) {
	if m.CustomMetrics.IsNull() || m.CustomMetrics.IsUnknown() {
		return nil, false
	}
	var v []MonitorMetric
	d := m.CustomMetrics.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCustomMetrics sets the value of the CustomMetrics field in CreateMonitor.
func (m *CreateMonitor) SetCustomMetrics(ctx context.Context, v []MonitorMetric) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["custom_metrics"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.CustomMetrics = types.ListValueMust(t, vs)
}

// GetDataClassificationConfig returns the value of the DataClassificationConfig field in CreateMonitor as
// a MonitorDataClassificationConfig value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetDataClassificationConfig(ctx context.Context) (MonitorDataClassificationConfig, bool) {
	var e MonitorDataClassificationConfig
	if m.DataClassificationConfig.IsNull() || m.DataClassificationConfig.IsUnknown() {
		return e, false
	}
	var v MonitorDataClassificationConfig
	d := m.DataClassificationConfig.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDataClassificationConfig sets the value of the DataClassificationConfig field in CreateMonitor.
func (m *CreateMonitor) SetDataClassificationConfig(ctx context.Context, v MonitorDataClassificationConfig) {
	vs := v.ToObjectValue(ctx)
	m.DataClassificationConfig = vs
}

// GetInferenceLog returns the value of the InferenceLog field in CreateMonitor as
// a MonitorInferenceLog value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetInferenceLog(ctx context.Context) (MonitorInferenceLog, bool) {
	var e MonitorInferenceLog
	if m.InferenceLog.IsNull() || m.InferenceLog.IsUnknown() {
		return e, false
	}
	var v MonitorInferenceLog
	d := m.InferenceLog.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInferenceLog sets the value of the InferenceLog field in CreateMonitor.
func (m *CreateMonitor) SetInferenceLog(ctx context.Context, v MonitorInferenceLog) {
	vs := v.ToObjectValue(ctx)
	m.InferenceLog = vs
}

// GetNotifications returns the value of the Notifications field in CreateMonitor as
// a MonitorNotifications value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetNotifications(ctx context.Context) (MonitorNotifications, bool) {
	var e MonitorNotifications
	if m.Notifications.IsNull() || m.Notifications.IsUnknown() {
		return e, false
	}
	var v MonitorNotifications
	d := m.Notifications.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetNotifications sets the value of the Notifications field in CreateMonitor.
func (m *CreateMonitor) SetNotifications(ctx context.Context, v MonitorNotifications) {
	vs := v.ToObjectValue(ctx)
	m.Notifications = vs
}

// GetSchedule returns the value of the Schedule field in CreateMonitor as
// a MonitorCronSchedule value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetSchedule(ctx context.Context) (MonitorCronSchedule, bool) {
	var e MonitorCronSchedule
	if m.Schedule.IsNull() || m.Schedule.IsUnknown() {
		return e, false
	}
	var v MonitorCronSchedule
	d := m.Schedule.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSchedule sets the value of the Schedule field in CreateMonitor.
func (m *CreateMonitor) SetSchedule(ctx context.Context, v MonitorCronSchedule) {
	vs := v.ToObjectValue(ctx)
	m.Schedule = vs
}

// GetSlicingExprs returns the value of the SlicingExprs field in CreateMonitor as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetSlicingExprs(ctx context.Context) ([]types.String, bool) {
	if m.SlicingExprs.IsNull() || m.SlicingExprs.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.SlicingExprs.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSlicingExprs sets the value of the SlicingExprs field in CreateMonitor.
func (m *CreateMonitor) SetSlicingExprs(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["slicing_exprs"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.SlicingExprs = types.ListValueMust(t, vs)
}

// GetSnapshot returns the value of the Snapshot field in CreateMonitor as
// a MonitorSnapshot value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetSnapshot(ctx context.Context) (MonitorSnapshot, bool) {
	var e MonitorSnapshot
	if m.Snapshot.IsNull() || m.Snapshot.IsUnknown() {
		return e, false
	}
	var v MonitorSnapshot
	d := m.Snapshot.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSnapshot sets the value of the Snapshot field in CreateMonitor.
func (m *CreateMonitor) SetSnapshot(ctx context.Context, v MonitorSnapshot) {
	vs := v.ToObjectValue(ctx)
	m.Snapshot = vs
}

// GetTimeSeries returns the value of the TimeSeries field in CreateMonitor as
// a MonitorTimeSeries value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateMonitor) GetTimeSeries(ctx context.Context) (MonitorTimeSeries, bool) {
	var e MonitorTimeSeries
	if m.TimeSeries.IsNull() || m.TimeSeries.IsUnknown() {
		return e, false
	}
	var v MonitorTimeSeries
	d := m.TimeSeries.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTimeSeries sets the value of the TimeSeries field in CreateMonitor.
func (m *CreateMonitor) SetTimeSeries(ctx context.Context, v MonitorTimeSeries) {
	vs := v.ToObjectValue(ctx)
	m.TimeSeries = vs
}

type CreateOnlineTableRequest struct {
	// Specification of the online table to be created.
	Table types.Object `tfsdk:"table"`
}

func (to *CreateOnlineTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateOnlineTableRequest) {
	if !from.Table.IsNull() && !from.Table.IsUnknown() {
		if toTable, ok := to.GetTable(ctx); ok {
			if fromTable, ok := from.GetTable(ctx); ok {
				// Recursively sync the fields of Table
				toTable.SyncFieldsDuringCreateOrUpdate(ctx, fromTable)
				to.SetTable(ctx, toTable)
			}
		}
	}
}

func (to *CreateOnlineTableRequest) SyncFieldsDuringRead(ctx context.Context, from CreateOnlineTableRequest) {
	if !from.Table.IsNull() && !from.Table.IsUnknown() {
		if toTable, ok := to.GetTable(ctx); ok {
			if fromTable, ok := from.GetTable(ctx); ok {
				toTable.SyncFieldsDuringRead(ctx, fromTable)
				to.SetTable(ctx, toTable)
			}
		}
	}
}

func (m CreateOnlineTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table"] = attrs["table"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateOnlineTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateOnlineTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"table": reflect.TypeOf(OnlineTable{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateOnlineTableRequest
// only implements ToObjectValue() and Type().
func (m CreateOnlineTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table": m.Table,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateOnlineTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table": OnlineTable{}.Type(ctx),
		},
	}
}

// GetTable returns the value of the Table field in CreateOnlineTableRequest as
// a OnlineTable value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateOnlineTableRequest) GetTable(ctx context.Context) (OnlineTable, bool) {
	var e OnlineTable
	if m.Table.IsNull() || m.Table.IsUnknown() {
		return e, false
	}
	var v OnlineTable
	d := m.Table.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTable sets the value of the Table field in CreateOnlineTableRequest.
func (m *CreateOnlineTableRequest) SetTable(ctx context.Context, v OnlineTable) {
	vs := v.ToObjectValue(ctx)
	m.Table = vs
}

type CreatePolicyRequest struct {
	// Required. The policy to create.
	PolicyInfo types.Object `tfsdk:"policy_info"`
}

func (to *CreatePolicyRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreatePolicyRequest) {
	if !from.PolicyInfo.IsNull() && !from.PolicyInfo.IsUnknown() {
		if toPolicyInfo, ok := to.GetPolicyInfo(ctx); ok {
			if fromPolicyInfo, ok := from.GetPolicyInfo(ctx); ok {
				// Recursively sync the fields of PolicyInfo
				toPolicyInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromPolicyInfo)
				to.SetPolicyInfo(ctx, toPolicyInfo)
			}
		}
	}
}

func (to *CreatePolicyRequest) SyncFieldsDuringRead(ctx context.Context, from CreatePolicyRequest) {
	if !from.PolicyInfo.IsNull() && !from.PolicyInfo.IsUnknown() {
		if toPolicyInfo, ok := to.GetPolicyInfo(ctx); ok {
			if fromPolicyInfo, ok := from.GetPolicyInfo(ctx); ok {
				toPolicyInfo.SyncFieldsDuringRead(ctx, fromPolicyInfo)
				to.SetPolicyInfo(ctx, toPolicyInfo)
			}
		}
	}
}

func (m CreatePolicyRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["policy_info"] = attrs["policy_info"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreatePolicyRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreatePolicyRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"policy_info": reflect.TypeOf(PolicyInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreatePolicyRequest
// only implements ToObjectValue() and Type().
func (m CreatePolicyRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"policy_info": m.PolicyInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreatePolicyRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"policy_info": PolicyInfo{}.Type(ctx),
		},
	}
}

// GetPolicyInfo returns the value of the PolicyInfo field in CreatePolicyRequest as
// a PolicyInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreatePolicyRequest) GetPolicyInfo(ctx context.Context) (PolicyInfo, bool) {
	var e PolicyInfo
	if m.PolicyInfo.IsNull() || m.PolicyInfo.IsUnknown() {
		return e, false
	}
	var v PolicyInfo
	d := m.PolicyInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPolicyInfo sets the value of the PolicyInfo field in CreatePolicyRequest.
func (m *CreatePolicyRequest) SetPolicyInfo(ctx context.Context, v PolicyInfo) {
	vs := v.ToObjectValue(ctx)
	m.PolicyInfo = vs
}

type CreateRegisteredModelRequest struct {
	// List of aliases associated with the registered model
	Aliases types.List `tfsdk:"aliases"`
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// The name of the catalog where the schema and the registered model reside
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the registered model
	Comment types.String `tfsdk:"comment"`
	// Creation timestamp of the registered model in milliseconds since the Unix
	// epoch
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// The identifier of the user who created the registered model
	CreatedBy types.String `tfsdk:"created_by"`
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"full_name"`
	// The unique identifier of the metastore
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The name of the registered model
	Name types.String `tfsdk:"name"`
	// The identifier of the user who owns the registered model
	Owner types.String `tfsdk:"owner"`
	// The name of the schema where the registered model resides
	SchemaName types.String `tfsdk:"schema_name"`
	// The storage location on the cloud under which model version data files
	// are stored
	StorageLocation types.String `tfsdk:"storage_location"`
	// Last-update timestamp of the registered model in milliseconds since the
	// Unix epoch
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// The identifier of the user who updated the registered model last time
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *CreateRegisteredModelRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateRegisteredModelRequest) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
}

func (to *CreateRegisteredModelRequest) SyncFieldsDuringRead(ctx context.Context, from CreateRegisteredModelRequest) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
}

func (m CreateRegisteredModelRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aliases"] = attrs["aliases"].SetOptional()
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateRegisteredModelRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateRegisteredModelRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aliases": reflect.TypeOf(RegisteredModelAlias{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateRegisteredModelRequest
// only implements ToObjectValue() and Type().
func (m CreateRegisteredModelRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aliases":          m.Aliases,
			"browse_only":      m.BrowseOnly,
			"catalog_name":     m.CatalogName,
			"comment":          m.Comment,
			"created_at":       m.CreatedAt,
			"created_by":       m.CreatedBy,
			"full_name":        m.FullName,
			"metastore_id":     m.MetastoreId,
			"name":             m.Name,
			"owner":            m.Owner,
			"schema_name":      m.SchemaName,
			"storage_location": m.StorageLocation,
			"updated_at":       m.UpdatedAt,
			"updated_by":       m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateRegisteredModelRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aliases": basetypes.ListType{
				ElemType: RegisteredModelAlias{}.Type(ctx),
			},
			"browse_only":      types.BoolType,
			"catalog_name":     types.StringType,
			"comment":          types.StringType,
			"created_at":       types.Int64Type,
			"created_by":       types.StringType,
			"full_name":        types.StringType,
			"metastore_id":     types.StringType,
			"name":             types.StringType,
			"owner":            types.StringType,
			"schema_name":      types.StringType,
			"storage_location": types.StringType,
			"updated_at":       types.Int64Type,
			"updated_by":       types.StringType,
		},
	}
}

// GetAliases returns the value of the Aliases field in CreateRegisteredModelRequest as
// a slice of RegisteredModelAlias values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateRegisteredModelRequest) GetAliases(ctx context.Context) ([]RegisteredModelAlias, bool) {
	if m.Aliases.IsNull() || m.Aliases.IsUnknown() {
		return nil, false
	}
	var v []RegisteredModelAlias
	d := m.Aliases.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAliases sets the value of the Aliases field in CreateRegisteredModelRequest.
func (m *CreateRegisteredModelRequest) SetAliases(ctx context.Context, v []RegisteredModelAlias) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["aliases"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Aliases = types.ListValueMust(t, vs)
}

type CreateRequestExternalLineage struct {
	// List of column relationships between source and target objects.
	Columns types.List `tfsdk:"columns"`
	// Unique identifier of the external lineage relationship.
	Id types.String `tfsdk:"id"`
	// Key-value properties associated with the external lineage relationship.
	Properties types.Map `tfsdk:"properties"`
	// Source object of the external lineage relationship.
	Source types.Object `tfsdk:"source"`
	// Target object of the external lineage relationship.
	Target types.Object `tfsdk:"target"`
}

func (to *CreateRequestExternalLineage) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateRequestExternalLineage) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				// Recursively sync the fields of Source
				toSource.SyncFieldsDuringCreateOrUpdate(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				// Recursively sync the fields of Target
				toTarget.SyncFieldsDuringCreateOrUpdate(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (to *CreateRequestExternalLineage) SyncFieldsDuringRead(ctx context.Context, from CreateRequestExternalLineage) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				toSource.SyncFieldsDuringRead(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				toTarget.SyncFieldsDuringRead(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (m CreateRequestExternalLineage) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["id"] = attrs["id"].SetComputed()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["source"] = attrs["source"].SetRequired()
	attrs["target"] = attrs["target"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateRequestExternalLineage.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateRequestExternalLineage) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":    reflect.TypeOf(ColumnRelationship{}),
		"properties": reflect.TypeOf(types.String{}),
		"source":     reflect.TypeOf(ExternalLineageObject{}),
		"target":     reflect.TypeOf(ExternalLineageObject{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateRequestExternalLineage
// only implements ToObjectValue() and Type().
func (m CreateRequestExternalLineage) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"columns":    m.Columns,
			"id":         m.Id,
			"properties": m.Properties,
			"source":     m.Source,
			"target":     m.Target,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateRequestExternalLineage) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"columns": basetypes.ListType{
				ElemType: ColumnRelationship{}.Type(ctx),
			},
			"id": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"source": ExternalLineageObject{}.Type(ctx),
			"target": ExternalLineageObject{}.Type(ctx),
		},
	}
}

// GetColumns returns the value of the Columns field in CreateRequestExternalLineage as
// a slice of ColumnRelationship values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateRequestExternalLineage) GetColumns(ctx context.Context) ([]ColumnRelationship, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []ColumnRelationship
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in CreateRequestExternalLineage.
func (m *CreateRequestExternalLineage) SetColumns(ctx context.Context, v []ColumnRelationship) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in CreateRequestExternalLineage as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateRequestExternalLineage) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in CreateRequestExternalLineage.
func (m *CreateRequestExternalLineage) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetSource returns the value of the Source field in CreateRequestExternalLineage as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateRequestExternalLineage) GetSource(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Source.IsNull() || m.Source.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Source.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSource sets the value of the Source field in CreateRequestExternalLineage.
func (m *CreateRequestExternalLineage) SetSource(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Source = vs
}

// GetTarget returns the value of the Target field in CreateRequestExternalLineage as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateRequestExternalLineage) GetTarget(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Target.IsNull() || m.Target.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Target.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTarget sets the value of the Target field in CreateRequestExternalLineage.
func (m *CreateRequestExternalLineage) SetTarget(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Target = vs
}

type CreateSchema struct {
	// Name of parent catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Name of schema, relative to parent catalog.
	Name types.String `tfsdk:"name"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
	// Storage root URL for managed tables within schema.
	StorageRoot types.String `tfsdk:"storage_root"`
}

func (to *CreateSchema) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateSchema) {
}

func (to *CreateSchema) SyncFieldsDuringRead(ctx context.Context, from CreateSchema) {
}

func (m CreateSchema) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateSchema.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateSchema) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateSchema
// only implements ToObjectValue() and Type().
func (m CreateSchema) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name": m.CatalogName,
			"comment":      m.Comment,
			"name":         m.Name,
			"properties":   m.Properties,
			"storage_root": m.StorageRoot,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateSchema) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name": types.StringType,
			"comment":      types.StringType,
			"name":         types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"storage_root": types.StringType,
		},
	}
}

// GetProperties returns the value of the Properties field in CreateSchema as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateSchema) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in CreateSchema.
func (m *CreateSchema) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

type CreateStorageCredential struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// The Cloudflare API token configuration.
	CloudflareApiToken types.Object `tfsdk:"cloudflare_api_token"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The credential name. The name must be unique among storage and service
	// credentials within the metastore.
	Name types.String `tfsdk:"name"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Supplying true to this argument skips validation of the created
	// credential.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
}

func (to *CreateStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				// Recursively sync the fields of CloudflareApiToken
				toCloudflareApiToken.SyncFieldsDuringCreateOrUpdate(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *CreateStorageCredential) SyncFieldsDuringRead(ctx context.Context, from CreateStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				toCloudflareApiToken.SyncFieldsDuringRead(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m CreateStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["cloudflare_api_token"] = attrs["cloudflare_api_token"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRoleRequest{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentityRequest{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"cloudflare_api_token":           reflect.TypeOf(CloudflareApiToken{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccountRequest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateStorageCredential
// only implements ToObjectValue() and Type().
func (m CreateStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"cloudflare_api_token":           m.CloudflareApiToken,
			"comment":                        m.Comment,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"name":                           m.Name,
			"read_only":                      m.ReadOnly,
			"skip_validation":                m.SkipValidation,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRoleRequest{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentityRequest{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"cloudflare_api_token":           CloudflareApiToken{}.Type(ctx),
			"comment":                        types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccountRequest{}.Type(ctx),
			"name":                           types.StringType,
			"read_only":                      types.BoolType,
			"skip_validation":                types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in CreateStorageCredential as
// a AwsIamRoleRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateStorageCredential) GetAwsIamRole(ctx context.Context) (AwsIamRoleRequest, bool) {
	var e AwsIamRoleRequest
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRoleRequest
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in CreateStorageCredential.
func (m *CreateStorageCredential) SetAwsIamRole(ctx context.Context, v AwsIamRoleRequest) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in CreateStorageCredential as
// a AzureManagedIdentityRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateStorageCredential) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentityRequest, bool) {
	var e AzureManagedIdentityRequest
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentityRequest
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in CreateStorageCredential.
func (m *CreateStorageCredential) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentityRequest) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in CreateStorageCredential as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateStorageCredential) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in CreateStorageCredential.
func (m *CreateStorageCredential) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetCloudflareApiToken returns the value of the CloudflareApiToken field in CreateStorageCredential as
// a CloudflareApiToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateStorageCredential) GetCloudflareApiToken(ctx context.Context) (CloudflareApiToken, bool) {
	var e CloudflareApiToken
	if m.CloudflareApiToken.IsNull() || m.CloudflareApiToken.IsUnknown() {
		return e, false
	}
	var v CloudflareApiToken
	d := m.CloudflareApiToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCloudflareApiToken sets the value of the CloudflareApiToken field in CreateStorageCredential.
func (m *CreateStorageCredential) SetCloudflareApiToken(ctx context.Context, v CloudflareApiToken) {
	vs := v.ToObjectValue(ctx)
	m.CloudflareApiToken = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in CreateStorageCredential as
// a DatabricksGcpServiceAccountRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateStorageCredential) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccountRequest, bool) {
	var e DatabricksGcpServiceAccountRequest
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccountRequest
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in CreateStorageCredential.
func (m *CreateStorageCredential) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccountRequest) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type CreateTableConstraint struct {
	Constraint types.Object `tfsdk:"constraint"`
	// The full name of the table referenced by the constraint.
	FullNameArg types.String `tfsdk:"full_name_arg"`
}

func (to *CreateTableConstraint) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateTableConstraint) {
	if !from.Constraint.IsNull() && !from.Constraint.IsUnknown() {
		if toConstraint, ok := to.GetConstraint(ctx); ok {
			if fromConstraint, ok := from.GetConstraint(ctx); ok {
				// Recursively sync the fields of Constraint
				toConstraint.SyncFieldsDuringCreateOrUpdate(ctx, fromConstraint)
				to.SetConstraint(ctx, toConstraint)
			}
		}
	}
}

func (to *CreateTableConstraint) SyncFieldsDuringRead(ctx context.Context, from CreateTableConstraint) {
	if !from.Constraint.IsNull() && !from.Constraint.IsUnknown() {
		if toConstraint, ok := to.GetConstraint(ctx); ok {
			if fromConstraint, ok := from.GetConstraint(ctx); ok {
				toConstraint.SyncFieldsDuringRead(ctx, fromConstraint)
				to.SetConstraint(ctx, toConstraint)
			}
		}
	}
}

func (m CreateTableConstraint) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["constraint"] = attrs["constraint"].SetRequired()
	attrs["full_name_arg"] = attrs["full_name_arg"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateTableConstraint.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateTableConstraint) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"constraint": reflect.TypeOf(TableConstraint{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateTableConstraint
// only implements ToObjectValue() and Type().
func (m CreateTableConstraint) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"constraint":    m.Constraint,
			"full_name_arg": m.FullNameArg,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateTableConstraint) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"constraint":    TableConstraint{}.Type(ctx),
			"full_name_arg": types.StringType,
		},
	}
}

// GetConstraint returns the value of the Constraint field in CreateTableConstraint as
// a TableConstraint value.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateTableConstraint) GetConstraint(ctx context.Context) (TableConstraint, bool) {
	var e TableConstraint
	if m.Constraint.IsNull() || m.Constraint.IsUnknown() {
		return e, false
	}
	var v TableConstraint
	d := m.Constraint.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetConstraint sets the value of the Constraint field in CreateTableConstraint.
func (m *CreateTableConstraint) SetConstraint(ctx context.Context, v TableConstraint) {
	vs := v.ToObjectValue(ctx)
	m.Constraint = vs
}

type CreateTableRequest struct {
	// Name of parent catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// The array of __ColumnInfo__ definitions of the table's columns.
	Columns types.List `tfsdk:"columns"`

	DataSourceFormat types.String `tfsdk:"data_source_format"`
	// Name of table, relative to parent schema.
	Name types.String `tfsdk:"name"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
	// Name of parent schema relative to its parent catalog.
	SchemaName types.String `tfsdk:"schema_name"`
	// Storage root URL for table (for **MANAGED**, **EXTERNAL** tables).
	StorageLocation types.String `tfsdk:"storage_location"`

	TableType types.String `tfsdk:"table_type"`
}

func (to *CreateTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateTableRequest) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
}

func (to *CreateTableRequest) SyncFieldsDuringRead(ctx context.Context, from CreateTableRequest) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
}

func (m CreateTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["data_source_format"] = attrs["data_source_format"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()
	attrs["storage_location"] = attrs["storage_location"].SetRequired()
	attrs["table_type"] = attrs["table_type"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":    reflect.TypeOf(ColumnInfo{}),
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateTableRequest
// only implements ToObjectValue() and Type().
func (m CreateTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":       m.CatalogName,
			"columns":            m.Columns,
			"data_source_format": m.DataSourceFormat,
			"name":               m.Name,
			"properties":         m.Properties,
			"schema_name":        m.SchemaName,
			"storage_location":   m.StorageLocation,
			"table_type":         m.TableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name": types.StringType,
			"columns": basetypes.ListType{
				ElemType: ColumnInfo{}.Type(ctx),
			},
			"data_source_format": types.StringType,
			"name":               types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"schema_name":      types.StringType,
			"storage_location": types.StringType,
			"table_type":       types.StringType,
		},
	}
}

// GetColumns returns the value of the Columns field in CreateTableRequest as
// a slice of ColumnInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateTableRequest) GetColumns(ctx context.Context) ([]ColumnInfo, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []ColumnInfo
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in CreateTableRequest.
func (m *CreateTableRequest) SetColumns(ctx context.Context, v []ColumnInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in CreateTableRequest as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *CreateTableRequest) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in CreateTableRequest.
func (m *CreateTableRequest) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

type CreateVolumeRequestContent struct {
	// The name of the catalog where the schema and the volume are
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the volume
	Comment types.String `tfsdk:"comment"`
	// The name of the volume
	Name types.String `tfsdk:"name"`
	// The name of the schema where the volume is
	SchemaName types.String `tfsdk:"schema_name"`
	// The storage location on the cloud
	StorageLocation types.String `tfsdk:"storage_location"`
	// The type of the volume. An external volume is located in the specified
	// external location. A managed volume is located in the default location
	// which is specified by the parent schema, or the parent catalog, or the
	// Metastore. [Learn more]
	//
	// [Learn more]: https://docs.databricks.com/aws/en/volumes/managed-vs-external
	VolumeType types.String `tfsdk:"volume_type"`
}

func (to *CreateVolumeRequestContent) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CreateVolumeRequestContent) {
}

func (to *CreateVolumeRequestContent) SyncFieldsDuringRead(ctx context.Context, from CreateVolumeRequestContent) {
}

func (m CreateVolumeRequestContent) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["volume_type"] = attrs["volume_type"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CreateVolumeRequestContent.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CreateVolumeRequestContent) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CreateVolumeRequestContent
// only implements ToObjectValue() and Type().
func (m CreateVolumeRequestContent) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":     m.CatalogName,
			"comment":          m.Comment,
			"name":             m.Name,
			"schema_name":      m.SchemaName,
			"storage_location": m.StorageLocation,
			"volume_type":      m.VolumeType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CreateVolumeRequestContent) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":     types.StringType,
			"comment":          types.StringType,
			"name":             types.StringType,
			"schema_name":      types.StringType,
			"storage_location": types.StringType,
			"volume_type":      types.StringType,
		},
	}
}

// A credential that is dependent on a SQL object.
type CredentialDependency struct {
	// Full name of the dependent credential, in the form of
	// __credential_name__.
	CredentialName types.String `tfsdk:"credential_name"`
}

func (to *CredentialDependency) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CredentialDependency) {
}

func (to *CredentialDependency) SyncFieldsDuringRead(ctx context.Context, from CredentialDependency) {
}

func (m CredentialDependency) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_name"] = attrs["credential_name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CredentialDependency.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CredentialDependency) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CredentialDependency
// only implements ToObjectValue() and Type().
func (m CredentialDependency) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_name": m.CredentialName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CredentialDependency) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_name": types.StringType,
		},
	}
}

type CredentialInfo struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// Time at which this credential was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of credential creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The full name of the credential.
	FullName types.String `tfsdk:"full_name"`
	// The unique identifier of the credential.
	Id types.String `tfsdk:"id"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Unique identifier of the parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The credential name. The name must be unique among storage and service
	// credentials within the metastore.
	Name types.String `tfsdk:"name"`
	// Username of current owner of credential.
	Owner types.String `tfsdk:"owner"`
	// Indicates the purpose of the credential.
	Purpose types.String `tfsdk:"purpose"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Time at which this credential was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the credential.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// Whether this credential is the current metastore's root storage
	// credential. Only applicable when purpose is **STORAGE**.
	UsedForManagedStorage types.Bool `tfsdk:"used_for_managed_storage"`
}

func (to *CredentialInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CredentialInfo) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *CredentialInfo) SyncFieldsDuringRead(ctx context.Context, from CredentialInfo) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m CredentialInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["id"] = attrs["id"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["purpose"] = attrs["purpose"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["used_for_managed_storage"] = attrs["used_for_managed_storage"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CredentialInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CredentialInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRole{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentity{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccount{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CredentialInfo
// only implements ToObjectValue() and Type().
func (m CredentialInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"comment":                        m.Comment,
			"created_at":                     m.CreatedAt,
			"created_by":                     m.CreatedBy,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"full_name":                      m.FullName,
			"id":                             m.Id,
			"isolation_mode":                 m.IsolationMode,
			"metastore_id":                   m.MetastoreId,
			"name":                           m.Name,
			"owner":                          m.Owner,
			"purpose":                        m.Purpose,
			"read_only":                      m.ReadOnly,
			"updated_at":                     m.UpdatedAt,
			"updated_by":                     m.UpdatedBy,
			"used_for_managed_storage":       m.UsedForManagedStorage,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CredentialInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRole{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentity{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"comment":                        types.StringType,
			"created_at":                     types.Int64Type,
			"created_by":                     types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccount{}.Type(ctx),
			"full_name":                      types.StringType,
			"id":                             types.StringType,
			"isolation_mode":                 types.StringType,
			"metastore_id":                   types.StringType,
			"name":                           types.StringType,
			"owner":                          types.StringType,
			"purpose":                        types.StringType,
			"read_only":                      types.BoolType,
			"updated_at":                     types.Int64Type,
			"updated_by":                     types.StringType,
			"used_for_managed_storage":       types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in CredentialInfo as
// a AwsIamRole value.
// If the field is unknown or null, the boolean return value is false.
func (m *CredentialInfo) GetAwsIamRole(ctx context.Context) (AwsIamRole, bool) {
	var e AwsIamRole
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRole
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in CredentialInfo.
func (m *CredentialInfo) SetAwsIamRole(ctx context.Context, v AwsIamRole) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in CredentialInfo as
// a AzureManagedIdentity value.
// If the field is unknown or null, the boolean return value is false.
func (m *CredentialInfo) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentity, bool) {
	var e AzureManagedIdentity
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentity
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in CredentialInfo.
func (m *CredentialInfo) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentity) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in CredentialInfo as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *CredentialInfo) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in CredentialInfo.
func (m *CredentialInfo) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in CredentialInfo as
// a DatabricksGcpServiceAccount value.
// If the field is unknown or null, the boolean return value is false.
func (m *CredentialInfo) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccount, bool) {
	var e DatabricksGcpServiceAccount
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccount
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in CredentialInfo.
func (m *CredentialInfo) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccount) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type CredentialValidationResult struct {
	// Error message would exist when the result does not equal to **PASS**.
	Message types.String `tfsdk:"message"`
	// The results of the tested operation.
	Result types.String `tfsdk:"result"`
}

func (to *CredentialValidationResult) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CredentialValidationResult) {
}

func (to *CredentialValidationResult) SyncFieldsDuringRead(ctx context.Context, from CredentialValidationResult) {
}

func (m CredentialValidationResult) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["message"] = attrs["message"].SetOptional()
	attrs["result"] = attrs["result"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CredentialValidationResult.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CredentialValidationResult) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CredentialValidationResult
// only implements ToObjectValue() and Type().
func (m CredentialValidationResult) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"message": m.Message,
			"result":  m.Result,
		})
}

// Type implements basetypes.ObjectValuable.
func (m CredentialValidationResult) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"message": types.StringType,
			"result":  types.StringType,
		},
	}
}

type CurrentRequest struct {
}

func (to *CurrentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from CurrentRequest) {
}

func (to *CurrentRequest) SyncFieldsDuringRead(ctx context.Context, from CurrentRequest) {
}

func (m CurrentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in CurrentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m CurrentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, CurrentRequest
// only implements ToObjectValue() and Type().
func (m CurrentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m CurrentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// GCP long-lived credential. Databricks-created Google Cloud Storage service
// account.
type DatabricksGcpServiceAccount struct {
	// The Databricks internal ID that represents this managed identity.
	CredentialId types.String `tfsdk:"credential_id"`
	// The email of the service account.
	Email types.String `tfsdk:"email"`
	// The ID that represents the private key for this Service Account
	PrivateKeyId types.String `tfsdk:"private_key_id"`
}

func (to *DatabricksGcpServiceAccount) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DatabricksGcpServiceAccount) {
}

func (to *DatabricksGcpServiceAccount) SyncFieldsDuringRead(ctx context.Context, from DatabricksGcpServiceAccount) {
}

func (m DatabricksGcpServiceAccount) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_id"] = attrs["credential_id"].SetComputed()
	attrs["email"] = attrs["email"].SetComputed()
	attrs["private_key_id"] = attrs["private_key_id"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DatabricksGcpServiceAccount.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DatabricksGcpServiceAccount) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DatabricksGcpServiceAccount
// only implements ToObjectValue() and Type().
func (m DatabricksGcpServiceAccount) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_id":  m.CredentialId,
			"email":          m.Email,
			"private_key_id": m.PrivateKeyId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DatabricksGcpServiceAccount) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_id":  types.StringType,
			"email":          types.StringType,
			"private_key_id": types.StringType,
		},
	}
}

// GCP long-lived credential. Databricks-created Google Cloud Storage service
// account.
type DatabricksGcpServiceAccountRequest struct {
}

func (to *DatabricksGcpServiceAccountRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DatabricksGcpServiceAccountRequest) {
}

func (to *DatabricksGcpServiceAccountRequest) SyncFieldsDuringRead(ctx context.Context, from DatabricksGcpServiceAccountRequest) {
}

func (m DatabricksGcpServiceAccountRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DatabricksGcpServiceAccountRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DatabricksGcpServiceAccountRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DatabricksGcpServiceAccountRequest
// only implements ToObjectValue() and Type().
func (m DatabricksGcpServiceAccountRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DatabricksGcpServiceAccountRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// GCP long-lived credential. Databricks-created Google Cloud Storage service
// account.
type DatabricksGcpServiceAccountResponse struct {
	// The Databricks internal ID that represents this managed identity.
	CredentialId types.String `tfsdk:"credential_id"`
	// The email of the service account.
	Email types.String `tfsdk:"email"`
}

func (to *DatabricksGcpServiceAccountResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DatabricksGcpServiceAccountResponse) {
}

func (to *DatabricksGcpServiceAccountResponse) SyncFieldsDuringRead(ctx context.Context, from DatabricksGcpServiceAccountResponse) {
}

func (m DatabricksGcpServiceAccountResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credential_id"] = attrs["credential_id"].SetComputed()
	attrs["email"] = attrs["email"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DatabricksGcpServiceAccountResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DatabricksGcpServiceAccountResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DatabricksGcpServiceAccountResponse
// only implements ToObjectValue() and Type().
func (m DatabricksGcpServiceAccountResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credential_id": m.CredentialId,
			"email":         m.Email,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DatabricksGcpServiceAccountResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credential_id": types.StringType,
			"email":         types.StringType,
		},
	}
}

type DeleteAccountMetastoreAssignmentRequest struct {
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *DeleteAccountMetastoreAssignmentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteAccountMetastoreAssignmentRequest) {
}

func (to *DeleteAccountMetastoreAssignmentRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteAccountMetastoreAssignmentRequest) {
}

func (m DeleteAccountMetastoreAssignmentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteAccountMetastoreAssignmentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteAccountMetastoreAssignmentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteAccountMetastoreAssignmentRequest
// only implements ToObjectValue() and Type().
func (m DeleteAccountMetastoreAssignmentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id": m.MetastoreId,
			"workspace_id": m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteAccountMetastoreAssignmentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id": types.StringType,
			"workspace_id": types.Int64Type,
		},
	}
}

type DeleteAccountMetastoreRequest struct {
	// Force deletion even if the metastore is not empty. Default is false.
	Force types.Bool `tfsdk:"-"`
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
}

func (to *DeleteAccountMetastoreRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteAccountMetastoreRequest) {
}

func (to *DeleteAccountMetastoreRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteAccountMetastoreRequest) {
}

func (m DeleteAccountMetastoreRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteAccountMetastoreRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteAccountMetastoreRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteAccountMetastoreRequest
// only implements ToObjectValue() and Type().
func (m DeleteAccountMetastoreRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force":        m.Force,
			"metastore_id": m.MetastoreId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteAccountMetastoreRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force":        types.BoolType,
			"metastore_id": types.StringType,
		},
	}
}

type DeleteAccountStorageCredentialRequest struct {
	// Force deletion even if the Storage Credential is not empty. Default is
	// false.
	Force types.Bool `tfsdk:"-"`
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Name of the storage credential.
	StorageCredentialName types.String `tfsdk:"-"`
}

func (to *DeleteAccountStorageCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteAccountStorageCredentialRequest) {
}

func (to *DeleteAccountStorageCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteAccountStorageCredentialRequest) {
}

func (m DeleteAccountStorageCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["storage_credential_name"] = attrs["storage_credential_name"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteAccountStorageCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteAccountStorageCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteAccountStorageCredentialRequest
// only implements ToObjectValue() and Type().
func (m DeleteAccountStorageCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force":                   m.Force,
			"metastore_id":            m.MetastoreId,
			"storage_credential_name": m.StorageCredentialName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteAccountStorageCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force":                   types.BoolType,
			"metastore_id":            types.StringType,
			"storage_credential_name": types.StringType,
		},
	}
}

type DeleteAliasRequest struct {
	// The name of the alias
	Alias types.String `tfsdk:"-"`
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"-"`
}

func (to *DeleteAliasRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteAliasRequest) {
}

func (to *DeleteAliasRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteAliasRequest) {
}

func (m DeleteAliasRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["alias"] = attrs["alias"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteAliasRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteAliasRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteAliasRequest
// only implements ToObjectValue() and Type().
func (m DeleteAliasRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"alias":     m.Alias,
			"full_name": m.FullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteAliasRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"alias":     types.StringType,
			"full_name": types.StringType,
		},
	}
}

type DeleteCatalogRequest struct {
	// Force deletion even if the catalog is not empty.
	Force types.Bool `tfsdk:"-"`
	// The name of the catalog.
	Name types.String `tfsdk:"-"`
}

func (to *DeleteCatalogRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteCatalogRequest) {
}

func (to *DeleteCatalogRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteCatalogRequest) {
}

func (m DeleteCatalogRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteCatalogRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteCatalogRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteCatalogRequest
// only implements ToObjectValue() and Type().
func (m DeleteCatalogRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force": m.Force,
			"name":  m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteCatalogRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force": types.BoolType,
			"name":  types.StringType,
		},
	}
}

type DeleteConnectionRequest struct {
	// The name of the connection to be deleted.
	Name types.String `tfsdk:"-"`
}

func (to *DeleteConnectionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteConnectionRequest) {
}

func (to *DeleteConnectionRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteConnectionRequest) {
}

func (m DeleteConnectionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteConnectionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteConnectionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteConnectionRequest
// only implements ToObjectValue() and Type().
func (m DeleteConnectionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteConnectionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type DeleteCredentialRequest struct {
	// Force an update even if there are dependent services (when purpose is
	// **SERVICE**) or dependent external locations and external tables (when
	// purpose is **STORAGE**).
	Force types.Bool `tfsdk:"-"`
	// Name of the credential.
	NameArg types.String `tfsdk:"-"`
}

func (to *DeleteCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteCredentialRequest) {
}

func (to *DeleteCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteCredentialRequest) {
}

func (m DeleteCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name_arg"] = attrs["name_arg"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteCredentialRequest
// only implements ToObjectValue() and Type().
func (m DeleteCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force":    m.Force,
			"name_arg": m.NameArg,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force":    types.BoolType,
			"name_arg": types.StringType,
		},
	}
}

type DeleteCredentialResponse struct {
}

func (to *DeleteCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteCredentialResponse) {
}

func (to *DeleteCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from DeleteCredentialResponse) {
}

func (m DeleteCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteCredentialResponse
// only implements ToObjectValue() and Type().
func (m DeleteCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type DeleteEntityTagAssignmentRequest struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName types.String `tfsdk:"-"`
	// The type of the entity to which the tag is assigned. Allowed values are:
	// catalogs, schemas, tables, columns, volumes.
	EntityType types.String `tfsdk:"-"`
	// Required. The key of the tag to delete
	TagKey types.String `tfsdk:"-"`
}

func (to *DeleteEntityTagAssignmentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteEntityTagAssignmentRequest) {
}

func (to *DeleteEntityTagAssignmentRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteEntityTagAssignmentRequest) {
}

func (m DeleteEntityTagAssignmentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["entity_type"] = attrs["entity_type"].SetRequired()
	attrs["entity_name"] = attrs["entity_name"].SetRequired()
	attrs["tag_key"] = attrs["tag_key"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteEntityTagAssignmentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteEntityTagAssignmentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteEntityTagAssignmentRequest
// only implements ToObjectValue() and Type().
func (m DeleteEntityTagAssignmentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"entity_name": m.EntityName,
			"entity_type": m.EntityType,
			"tag_key":     m.TagKey,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteEntityTagAssignmentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"entity_name": types.StringType,
			"entity_type": types.StringType,
			"tag_key":     types.StringType,
		},
	}
}

type DeleteExternalLineageRelationshipRequest struct {
	ExternalLineageRelationship types.Object `tfsdk:"-"`
}

func (to *DeleteExternalLineageRelationshipRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteExternalLineageRelationshipRequest) {
	if !from.ExternalLineageRelationship.IsNull() && !from.ExternalLineageRelationship.IsUnknown() {
		if toExternalLineageRelationship, ok := to.GetExternalLineageRelationship(ctx); ok {
			if fromExternalLineageRelationship, ok := from.GetExternalLineageRelationship(ctx); ok {
				// Recursively sync the fields of ExternalLineageRelationship
				toExternalLineageRelationship.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalLineageRelationship)
				to.SetExternalLineageRelationship(ctx, toExternalLineageRelationship)
			}
		}
	}
}

func (to *DeleteExternalLineageRelationshipRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteExternalLineageRelationshipRequest) {
	if !from.ExternalLineageRelationship.IsNull() && !from.ExternalLineageRelationship.IsUnknown() {
		if toExternalLineageRelationship, ok := to.GetExternalLineageRelationship(ctx); ok {
			if fromExternalLineageRelationship, ok := from.GetExternalLineageRelationship(ctx); ok {
				toExternalLineageRelationship.SyncFieldsDuringRead(ctx, fromExternalLineageRelationship)
				to.SetExternalLineageRelationship(ctx, toExternalLineageRelationship)
			}
		}
	}
}

func (m DeleteExternalLineageRelationshipRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_lineage_relationship"] = attrs["external_lineage_relationship"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteExternalLineageRelationshipRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteExternalLineageRelationshipRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_lineage_relationship": reflect.TypeOf(DeleteRequestExternalLineage{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteExternalLineageRelationshipRequest
// only implements ToObjectValue() and Type().
func (m DeleteExternalLineageRelationshipRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_lineage_relationship": m.ExternalLineageRelationship,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteExternalLineageRelationshipRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_lineage_relationship": DeleteRequestExternalLineage{}.Type(ctx),
		},
	}
}

// GetExternalLineageRelationship returns the value of the ExternalLineageRelationship field in DeleteExternalLineageRelationshipRequest as
// a DeleteRequestExternalLineage value.
// If the field is unknown or null, the boolean return value is false.
func (m *DeleteExternalLineageRelationshipRequest) GetExternalLineageRelationship(ctx context.Context) (DeleteRequestExternalLineage, bool) {
	var e DeleteRequestExternalLineage
	if m.ExternalLineageRelationship.IsNull() || m.ExternalLineageRelationship.IsUnknown() {
		return e, false
	}
	var v DeleteRequestExternalLineage
	d := m.ExternalLineageRelationship.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalLineageRelationship sets the value of the ExternalLineageRelationship field in DeleteExternalLineageRelationshipRequest.
func (m *DeleteExternalLineageRelationshipRequest) SetExternalLineageRelationship(ctx context.Context, v DeleteRequestExternalLineage) {
	vs := v.ToObjectValue(ctx)
	m.ExternalLineageRelationship = vs
}

type DeleteExternalLocationRequest struct {
	// Force deletion even if there are dependent external tables or mounts.
	Force types.Bool `tfsdk:"-"`
	// Name of the external location.
	Name types.String `tfsdk:"-"`
}

func (to *DeleteExternalLocationRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteExternalLocationRequest) {
}

func (to *DeleteExternalLocationRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteExternalLocationRequest) {
}

func (m DeleteExternalLocationRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteExternalLocationRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteExternalLocationRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteExternalLocationRequest
// only implements ToObjectValue() and Type().
func (m DeleteExternalLocationRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force": m.Force,
			"name":  m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteExternalLocationRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force": types.BoolType,
			"name":  types.StringType,
		},
	}
}

type DeleteExternalMetadataRequest struct {
	Name types.String `tfsdk:"-"`
}

func (to *DeleteExternalMetadataRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteExternalMetadataRequest) {
}

func (to *DeleteExternalMetadataRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteExternalMetadataRequest) {
}

func (m DeleteExternalMetadataRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteExternalMetadataRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteExternalMetadataRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteExternalMetadataRequest
// only implements ToObjectValue() and Type().
func (m DeleteExternalMetadataRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteExternalMetadataRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type DeleteFunctionRequest struct {
	// Force deletion even if the function is notempty.
	Force types.Bool `tfsdk:"-"`
	// The fully-qualified name of the function (of the form
	// __catalog_name__.__schema_name__.__function__name__) .
	Name types.String `tfsdk:"-"`
}

func (to *DeleteFunctionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteFunctionRequest) {
}

func (to *DeleteFunctionRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteFunctionRequest) {
}

func (m DeleteFunctionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteFunctionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteFunctionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteFunctionRequest
// only implements ToObjectValue() and Type().
func (m DeleteFunctionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force": m.Force,
			"name":  m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteFunctionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force": types.BoolType,
			"name":  types.StringType,
		},
	}
}

type DeleteMetastoreRequest struct {
	// Force deletion even if the metastore is not empty. Default is false.
	Force types.Bool `tfsdk:"-"`
	// Unique ID of the metastore.
	Id types.String `tfsdk:"-"`
}

func (to *DeleteMetastoreRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteMetastoreRequest) {
}

func (to *DeleteMetastoreRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteMetastoreRequest) {
}

func (m DeleteMetastoreRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["id"] = attrs["id"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteMetastoreRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteMetastoreRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteMetastoreRequest
// only implements ToObjectValue() and Type().
func (m DeleteMetastoreRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force": m.Force,
			"id":    m.Id,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteMetastoreRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force": types.BoolType,
			"id":    types.StringType,
		},
	}
}

type DeleteModelVersionRequest struct {
	// The three-level (fully qualified) name of the model version
	FullName types.String `tfsdk:"-"`
	// The integer version number of the model version
	Version types.Int64 `tfsdk:"-"`
}

func (to *DeleteModelVersionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteModelVersionRequest) {
}

func (to *DeleteModelVersionRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteModelVersionRequest) {
}

func (m DeleteModelVersionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["version"] = attrs["version"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteModelVersionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteModelVersionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteModelVersionRequest
// only implements ToObjectValue() and Type().
func (m DeleteModelVersionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name": m.FullName,
			"version":   m.Version,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteModelVersionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name": types.StringType,
			"version":   types.Int64Type,
		},
	}
}

type DeleteMonitorResponse struct {
}

func (to *DeleteMonitorResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteMonitorResponse) {
}

func (to *DeleteMonitorResponse) SyncFieldsDuringRead(ctx context.Context, from DeleteMonitorResponse) {
}

func (m DeleteMonitorResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteMonitorResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteMonitorResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteMonitorResponse
// only implements ToObjectValue() and Type().
func (m DeleteMonitorResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteMonitorResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type DeleteOnlineTableRequest struct {
	// Full three-part (catalog, schema, table) name of the table.
	Name types.String `tfsdk:"-"`
}

func (to *DeleteOnlineTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteOnlineTableRequest) {
}

func (to *DeleteOnlineTableRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteOnlineTableRequest) {
}

func (m DeleteOnlineTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteOnlineTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteOnlineTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteOnlineTableRequest
// only implements ToObjectValue() and Type().
func (m DeleteOnlineTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteOnlineTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type DeletePolicyRequest struct {
	// Required. The name of the policy to delete
	Name types.String `tfsdk:"-"`
	// Required. The fully qualified name of the securable to delete the policy
	// from.
	OnSecurableFullname types.String `tfsdk:"-"`
	// Required. The type of the securable to delete the policy from.
	OnSecurableType types.String `tfsdk:"-"`
}

func (to *DeletePolicyRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeletePolicyRequest) {
}

func (to *DeletePolicyRequest) SyncFieldsDuringRead(ctx context.Context, from DeletePolicyRequest) {
}

func (m DeletePolicyRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["on_securable_type"] = attrs["on_securable_type"].SetRequired()
	attrs["on_securable_fullname"] = attrs["on_securable_fullname"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeletePolicyRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeletePolicyRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeletePolicyRequest
// only implements ToObjectValue() and Type().
func (m DeletePolicyRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":                  m.Name,
			"on_securable_fullname": m.OnSecurableFullname,
			"on_securable_type":     m.OnSecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeletePolicyRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":                  types.StringType,
			"on_securable_fullname": types.StringType,
			"on_securable_type":     types.StringType,
		},
	}
}

type DeletePolicyResponse struct {
}

func (to *DeletePolicyResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeletePolicyResponse) {
}

func (to *DeletePolicyResponse) SyncFieldsDuringRead(ctx context.Context, from DeletePolicyResponse) {
}

func (m DeletePolicyResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeletePolicyResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeletePolicyResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeletePolicyResponse
// only implements ToObjectValue() and Type().
func (m DeletePolicyResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DeletePolicyResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type DeleteQualityMonitorRequest struct {
	// UC table name in format `catalog.schema.table_name`. This field
	// corresponds to the {full_table_name_arg} arg in the endpoint path.
	TableName types.String `tfsdk:"-"`
}

func (to *DeleteQualityMonitorRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteQualityMonitorRequest) {
}

func (to *DeleteQualityMonitorRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteQualityMonitorRequest) {
}

func (m DeleteQualityMonitorRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteQualityMonitorRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteQualityMonitorRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteQualityMonitorRequest
// only implements ToObjectValue() and Type().
func (m DeleteQualityMonitorRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_name": m.TableName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteQualityMonitorRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_name": types.StringType,
		},
	}
}

type DeleteRegisteredModelRequest struct {
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"-"`
}

func (to *DeleteRegisteredModelRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteRegisteredModelRequest) {
}

func (to *DeleteRegisteredModelRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteRegisteredModelRequest) {
}

func (m DeleteRegisteredModelRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteRegisteredModelRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteRegisteredModelRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteRegisteredModelRequest
// only implements ToObjectValue() and Type().
func (m DeleteRegisteredModelRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name": m.FullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteRegisteredModelRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name": types.StringType,
		},
	}
}

type DeleteRequestExternalLineage struct {
	// Unique identifier of the external lineage relationship.
	Id types.String `tfsdk:"id"`
	// Source object of the external lineage relationship.
	Source types.Object `tfsdk:"source"`
	// Target object of the external lineage relationship.
	Target types.Object `tfsdk:"target"`
}

func (to *DeleteRequestExternalLineage) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteRequestExternalLineage) {
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				// Recursively sync the fields of Source
				toSource.SyncFieldsDuringCreateOrUpdate(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				// Recursively sync the fields of Target
				toTarget.SyncFieldsDuringCreateOrUpdate(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (to *DeleteRequestExternalLineage) SyncFieldsDuringRead(ctx context.Context, from DeleteRequestExternalLineage) {
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				toSource.SyncFieldsDuringRead(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				toTarget.SyncFieldsDuringRead(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (m DeleteRequestExternalLineage) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["id"] = attrs["id"].SetComputed()
	attrs["source"] = attrs["source"].SetRequired()
	attrs["target"] = attrs["target"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteRequestExternalLineage.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteRequestExternalLineage) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"source": reflect.TypeOf(ExternalLineageObject{}),
		"target": reflect.TypeOf(ExternalLineageObject{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteRequestExternalLineage
// only implements ToObjectValue() and Type().
func (m DeleteRequestExternalLineage) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"id":     m.Id,
			"source": m.Source,
			"target": m.Target,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteRequestExternalLineage) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"id":     types.StringType,
			"source": ExternalLineageObject{}.Type(ctx),
			"target": ExternalLineageObject{}.Type(ctx),
		},
	}
}

// GetSource returns the value of the Source field in DeleteRequestExternalLineage as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *DeleteRequestExternalLineage) GetSource(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Source.IsNull() || m.Source.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Source.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSource sets the value of the Source field in DeleteRequestExternalLineage.
func (m *DeleteRequestExternalLineage) SetSource(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Source = vs
}

// GetTarget returns the value of the Target field in DeleteRequestExternalLineage as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *DeleteRequestExternalLineage) GetTarget(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Target.IsNull() || m.Target.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Target.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTarget sets the value of the Target field in DeleteRequestExternalLineage.
func (m *DeleteRequestExternalLineage) SetTarget(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Target = vs
}

type DeleteResponse struct {
}

func (to *DeleteResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteResponse) {
}

func (to *DeleteResponse) SyncFieldsDuringRead(ctx context.Context, from DeleteResponse) {
}

func (m DeleteResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteResponse
// only implements ToObjectValue() and Type().
func (m DeleteResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type DeleteSchemaRequest struct {
	// Force deletion even if the schema is not empty.
	Force types.Bool `tfsdk:"-"`
	// Full name of the schema.
	FullName types.String `tfsdk:"-"`
}

func (to *DeleteSchemaRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteSchemaRequest) {
}

func (to *DeleteSchemaRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteSchemaRequest) {
}

func (m DeleteSchemaRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteSchemaRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteSchemaRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteSchemaRequest
// only implements ToObjectValue() and Type().
func (m DeleteSchemaRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force":     m.Force,
			"full_name": m.FullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteSchemaRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force":     types.BoolType,
			"full_name": types.StringType,
		},
	}
}

type DeleteStorageCredentialRequest struct {
	// Force an update even if there are dependent external locations or
	// external tables (when purpose is **STORAGE**) or dependent services (when
	// purpose is **SERVICE**).
	Force types.Bool `tfsdk:"-"`
	// Name of the storage credential.
	Name types.String `tfsdk:"-"`
}

func (to *DeleteStorageCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteStorageCredentialRequest) {
}

func (to *DeleteStorageCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteStorageCredentialRequest) {
}

func (m DeleteStorageCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["force"] = attrs["force"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteStorageCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteStorageCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteStorageCredentialRequest
// only implements ToObjectValue() and Type().
func (m DeleteStorageCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"force": m.Force,
			"name":  m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteStorageCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"force": types.BoolType,
			"name":  types.StringType,
		},
	}
}

type DeleteTableConstraintRequest struct {
	// If true, try deleting all child constraints of the current constraint. If
	// false, reject this operation if the current constraint has any child
	// constraints.
	Cascade types.Bool `tfsdk:"-"`
	// The name of the constraint to delete.
	ConstraintName types.String `tfsdk:"-"`
	// Full name of the table referenced by the constraint.
	FullName types.String `tfsdk:"-"`
}

func (to *DeleteTableConstraintRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteTableConstraintRequest) {
}

func (to *DeleteTableConstraintRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteTableConstraintRequest) {
}

func (m DeleteTableConstraintRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["constraint_name"] = attrs["constraint_name"].SetRequired()
	attrs["cascade"] = attrs["cascade"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteTableConstraintRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteTableConstraintRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteTableConstraintRequest
// only implements ToObjectValue() and Type().
func (m DeleteTableConstraintRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"cascade":         m.Cascade,
			"constraint_name": m.ConstraintName,
			"full_name":       m.FullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteTableConstraintRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"cascade":         types.BoolType,
			"constraint_name": types.StringType,
			"full_name":       types.StringType,
		},
	}
}

type DeleteTableConstraintResponse struct {
}

func (to *DeleteTableConstraintResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteTableConstraintResponse) {
}

func (to *DeleteTableConstraintResponse) SyncFieldsDuringRead(ctx context.Context, from DeleteTableConstraintResponse) {
}

func (m DeleteTableConstraintResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteTableConstraintResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteTableConstraintResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteTableConstraintResponse
// only implements ToObjectValue() and Type().
func (m DeleteTableConstraintResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteTableConstraintResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type DeleteTableRequest struct {
	// Full name of the table.
	FullName types.String `tfsdk:"-"`
}

func (to *DeleteTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteTableRequest) {
}

func (to *DeleteTableRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteTableRequest) {
}

func (m DeleteTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteTableRequest
// only implements ToObjectValue() and Type().
func (m DeleteTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name": m.FullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name": types.StringType,
		},
	}
}

type DeleteVolumeRequest struct {
	// The three-level (fully qualified) name of the volume
	Name types.String `tfsdk:"-"`
}

func (to *DeleteVolumeRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeleteVolumeRequest) {
}

func (to *DeleteVolumeRequest) SyncFieldsDuringRead(ctx context.Context, from DeleteVolumeRequest) {
}

func (m DeleteVolumeRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeleteVolumeRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeleteVolumeRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeleteVolumeRequest
// only implements ToObjectValue() and Type().
func (m DeleteVolumeRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeleteVolumeRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

// Properties pertaining to the current state of the delta table as given by the
// commit server. This does not contain **delta.*** (input) properties in
// __TableInfo.properties__.
type DeltaRuntimePropertiesKvPairs struct {
	// A map of key-value properties attached to the securable.
	DeltaRuntimeProperties types.Map `tfsdk:"delta_runtime_properties"`
}

func (to *DeltaRuntimePropertiesKvPairs) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DeltaRuntimePropertiesKvPairs) {
}

func (to *DeltaRuntimePropertiesKvPairs) SyncFieldsDuringRead(ctx context.Context, from DeltaRuntimePropertiesKvPairs) {
}

func (m DeltaRuntimePropertiesKvPairs) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["delta_runtime_properties"] = attrs["delta_runtime_properties"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DeltaRuntimePropertiesKvPairs.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DeltaRuntimePropertiesKvPairs) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"delta_runtime_properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DeltaRuntimePropertiesKvPairs
// only implements ToObjectValue() and Type().
func (m DeltaRuntimePropertiesKvPairs) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"delta_runtime_properties": m.DeltaRuntimeProperties,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DeltaRuntimePropertiesKvPairs) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"delta_runtime_properties": basetypes.MapType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetDeltaRuntimeProperties returns the value of the DeltaRuntimeProperties field in DeltaRuntimePropertiesKvPairs as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *DeltaRuntimePropertiesKvPairs) GetDeltaRuntimeProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.DeltaRuntimeProperties.IsNull() || m.DeltaRuntimeProperties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.DeltaRuntimeProperties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDeltaRuntimeProperties sets the value of the DeltaRuntimeProperties field in DeltaRuntimePropertiesKvPairs.
func (m *DeltaRuntimePropertiesKvPairs) SetDeltaRuntimeProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["delta_runtime_properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.DeltaRuntimeProperties = types.MapValueMust(t, vs)
}

// A dependency of a SQL object. One of the following fields must be defined:
// __table__, __function__, __connection__, or __credential__.
type Dependency struct {
	Connection types.Object `tfsdk:"connection"`

	Credential types.Object `tfsdk:"credential"`

	Function types.Object `tfsdk:"function"`

	Table types.Object `tfsdk:"table"`
}

func (to *Dependency) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from Dependency) {
	if !from.Connection.IsNull() && !from.Connection.IsUnknown() {
		if toConnection, ok := to.GetConnection(ctx); ok {
			if fromConnection, ok := from.GetConnection(ctx); ok {
				// Recursively sync the fields of Connection
				toConnection.SyncFieldsDuringCreateOrUpdate(ctx, fromConnection)
				to.SetConnection(ctx, toConnection)
			}
		}
	}
	if !from.Credential.IsNull() && !from.Credential.IsUnknown() {
		if toCredential, ok := to.GetCredential(ctx); ok {
			if fromCredential, ok := from.GetCredential(ctx); ok {
				// Recursively sync the fields of Credential
				toCredential.SyncFieldsDuringCreateOrUpdate(ctx, fromCredential)
				to.SetCredential(ctx, toCredential)
			}
		}
	}
	if !from.Function.IsNull() && !from.Function.IsUnknown() {
		if toFunction, ok := to.GetFunction(ctx); ok {
			if fromFunction, ok := from.GetFunction(ctx); ok {
				// Recursively sync the fields of Function
				toFunction.SyncFieldsDuringCreateOrUpdate(ctx, fromFunction)
				to.SetFunction(ctx, toFunction)
			}
		}
	}
	if !from.Table.IsNull() && !from.Table.IsUnknown() {
		if toTable, ok := to.GetTable(ctx); ok {
			if fromTable, ok := from.GetTable(ctx); ok {
				// Recursively sync the fields of Table
				toTable.SyncFieldsDuringCreateOrUpdate(ctx, fromTable)
				to.SetTable(ctx, toTable)
			}
		}
	}
}

func (to *Dependency) SyncFieldsDuringRead(ctx context.Context, from Dependency) {
	if !from.Connection.IsNull() && !from.Connection.IsUnknown() {
		if toConnection, ok := to.GetConnection(ctx); ok {
			if fromConnection, ok := from.GetConnection(ctx); ok {
				toConnection.SyncFieldsDuringRead(ctx, fromConnection)
				to.SetConnection(ctx, toConnection)
			}
		}
	}
	if !from.Credential.IsNull() && !from.Credential.IsUnknown() {
		if toCredential, ok := to.GetCredential(ctx); ok {
			if fromCredential, ok := from.GetCredential(ctx); ok {
				toCredential.SyncFieldsDuringRead(ctx, fromCredential)
				to.SetCredential(ctx, toCredential)
			}
		}
	}
	if !from.Function.IsNull() && !from.Function.IsUnknown() {
		if toFunction, ok := to.GetFunction(ctx); ok {
			if fromFunction, ok := from.GetFunction(ctx); ok {
				toFunction.SyncFieldsDuringRead(ctx, fromFunction)
				to.SetFunction(ctx, toFunction)
			}
		}
	}
	if !from.Table.IsNull() && !from.Table.IsUnknown() {
		if toTable, ok := to.GetTable(ctx); ok {
			if fromTable, ok := from.GetTable(ctx); ok {
				toTable.SyncFieldsDuringRead(ctx, fromTable)
				to.SetTable(ctx, toTable)
			}
		}
	}
}

func (m Dependency) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["connection"] = attrs["connection"].SetOptional()
	attrs["credential"] = attrs["credential"].SetOptional()
	attrs["function"] = attrs["function"].SetOptional()
	attrs["table"] = attrs["table"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in Dependency.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m Dependency) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"connection": reflect.TypeOf(ConnectionDependency{}),
		"credential": reflect.TypeOf(CredentialDependency{}),
		"function":   reflect.TypeOf(FunctionDependency{}),
		"table":      reflect.TypeOf(TableDependency{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, Dependency
// only implements ToObjectValue() and Type().
func (m Dependency) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"connection": m.Connection,
			"credential": m.Credential,
			"function":   m.Function,
			"table":      m.Table,
		})
}

// Type implements basetypes.ObjectValuable.
func (m Dependency) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"connection": ConnectionDependency{}.Type(ctx),
			"credential": CredentialDependency{}.Type(ctx),
			"function":   FunctionDependency{}.Type(ctx),
			"table":      TableDependency{}.Type(ctx),
		},
	}
}

// GetConnection returns the value of the Connection field in Dependency as
// a ConnectionDependency value.
// If the field is unknown or null, the boolean return value is false.
func (m *Dependency) GetConnection(ctx context.Context) (ConnectionDependency, bool) {
	var e ConnectionDependency
	if m.Connection.IsNull() || m.Connection.IsUnknown() {
		return e, false
	}
	var v ConnectionDependency
	d := m.Connection.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetConnection sets the value of the Connection field in Dependency.
func (m *Dependency) SetConnection(ctx context.Context, v ConnectionDependency) {
	vs := v.ToObjectValue(ctx)
	m.Connection = vs
}

// GetCredential returns the value of the Credential field in Dependency as
// a CredentialDependency value.
// If the field is unknown or null, the boolean return value is false.
func (m *Dependency) GetCredential(ctx context.Context) (CredentialDependency, bool) {
	var e CredentialDependency
	if m.Credential.IsNull() || m.Credential.IsUnknown() {
		return e, false
	}
	var v CredentialDependency
	d := m.Credential.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredential sets the value of the Credential field in Dependency.
func (m *Dependency) SetCredential(ctx context.Context, v CredentialDependency) {
	vs := v.ToObjectValue(ctx)
	m.Credential = vs
}

// GetFunction returns the value of the Function field in Dependency as
// a FunctionDependency value.
// If the field is unknown or null, the boolean return value is false.
func (m *Dependency) GetFunction(ctx context.Context) (FunctionDependency, bool) {
	var e FunctionDependency
	if m.Function.IsNull() || m.Function.IsUnknown() {
		return e, false
	}
	var v FunctionDependency
	d := m.Function.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFunction sets the value of the Function field in Dependency.
func (m *Dependency) SetFunction(ctx context.Context, v FunctionDependency) {
	vs := v.ToObjectValue(ctx)
	m.Function = vs
}

// GetTable returns the value of the Table field in Dependency as
// a TableDependency value.
// If the field is unknown or null, the boolean return value is false.
func (m *Dependency) GetTable(ctx context.Context) (TableDependency, bool) {
	var e TableDependency
	if m.Table.IsNull() || m.Table.IsUnknown() {
		return e, false
	}
	var v TableDependency
	d := m.Table.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTable sets the value of the Table field in Dependency.
func (m *Dependency) SetTable(ctx context.Context, v TableDependency) {
	vs := v.ToObjectValue(ctx)
	m.Table = vs
}

// A list of dependencies.
type DependencyList struct {
	// Array of dependencies.
	Dependencies types.List `tfsdk:"dependencies"`
}

func (to *DependencyList) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DependencyList) {
	if !from.Dependencies.IsNull() && !from.Dependencies.IsUnknown() && to.Dependencies.IsNull() && len(from.Dependencies.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Dependencies, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Dependencies = from.Dependencies
	}
}

func (to *DependencyList) SyncFieldsDuringRead(ctx context.Context, from DependencyList) {
	if !from.Dependencies.IsNull() && !from.Dependencies.IsUnknown() && to.Dependencies.IsNull() && len(from.Dependencies.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Dependencies, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Dependencies = from.Dependencies
	}
}

func (m DependencyList) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["dependencies"] = attrs["dependencies"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DependencyList.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DependencyList) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"dependencies": reflect.TypeOf(Dependency{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DependencyList
// only implements ToObjectValue() and Type().
func (m DependencyList) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"dependencies": m.Dependencies,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DependencyList) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"dependencies": basetypes.ListType{
				ElemType: Dependency{}.Type(ctx),
			},
		},
	}
}

// GetDependencies returns the value of the Dependencies field in DependencyList as
// a slice of Dependency values.
// If the field is unknown or null, the boolean return value is false.
func (m *DependencyList) GetDependencies(ctx context.Context) ([]Dependency, bool) {
	if m.Dependencies.IsNull() || m.Dependencies.IsUnknown() {
		return nil, false
	}
	var v []Dependency
	d := m.Dependencies.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDependencies sets the value of the Dependencies field in DependencyList.
func (m *DependencyList) SetDependencies(ctx context.Context, v []Dependency) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["dependencies"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Dependencies = types.ListValueMust(t, vs)
}

type DisableRequest struct {
	// The metastore ID under which the system schema lives.
	MetastoreId types.String `tfsdk:"-"`
	// Full name of the system schema.
	SchemaName types.String `tfsdk:"-"`
}

func (to *DisableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DisableRequest) {
}

func (to *DisableRequest) SyncFieldsDuringRead(ctx context.Context, from DisableRequest) {
}

func (m DisableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DisableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DisableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DisableRequest
// only implements ToObjectValue() and Type().
func (m DisableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id": m.MetastoreId,
			"schema_name":  m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m DisableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id": types.StringType,
			"schema_name":  types.StringType,
		},
	}
}

type DisableResponse struct {
}

func (to *DisableResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from DisableResponse) {
}

func (to *DisableResponse) SyncFieldsDuringRead(ctx context.Context, from DisableResponse) {
}

func (m DisableResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in DisableResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m DisableResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, DisableResponse
// only implements ToObjectValue() and Type().
func (m DisableResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m DisableResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type EffectivePermissionsList struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
	// The privileges conveyed to each principal (either directly or via
	// inheritance)
	PrivilegeAssignments types.List `tfsdk:"privilege_assignments"`
}

func (to *EffectivePermissionsList) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EffectivePermissionsList) {
	if !from.PrivilegeAssignments.IsNull() && !from.PrivilegeAssignments.IsUnknown() && to.PrivilegeAssignments.IsNull() && len(from.PrivilegeAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrivilegeAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrivilegeAssignments = from.PrivilegeAssignments
	}
}

func (to *EffectivePermissionsList) SyncFieldsDuringRead(ctx context.Context, from EffectivePermissionsList) {
	if !from.PrivilegeAssignments.IsNull() && !from.PrivilegeAssignments.IsUnknown() && to.PrivilegeAssignments.IsNull() && len(from.PrivilegeAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrivilegeAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrivilegeAssignments = from.PrivilegeAssignments
	}
}

func (m EffectivePermissionsList) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["privilege_assignments"] = attrs["privilege_assignments"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EffectivePermissionsList.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EffectivePermissionsList) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"privilege_assignments": reflect.TypeOf(EffectivePrivilegeAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EffectivePermissionsList
// only implements ToObjectValue() and Type().
func (m EffectivePermissionsList) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token":       m.NextPageToken,
			"privilege_assignments": m.PrivilegeAssignments,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EffectivePermissionsList) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"privilege_assignments": basetypes.ListType{
				ElemType: EffectivePrivilegeAssignment{}.Type(ctx),
			},
		},
	}
}

// GetPrivilegeAssignments returns the value of the PrivilegeAssignments field in EffectivePermissionsList as
// a slice of EffectivePrivilegeAssignment values.
// If the field is unknown or null, the boolean return value is false.
func (m *EffectivePermissionsList) GetPrivilegeAssignments(ctx context.Context) ([]EffectivePrivilegeAssignment, bool) {
	if m.PrivilegeAssignments.IsNull() || m.PrivilegeAssignments.IsUnknown() {
		return nil, false
	}
	var v []EffectivePrivilegeAssignment
	d := m.PrivilegeAssignments.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrivilegeAssignments sets the value of the PrivilegeAssignments field in EffectivePermissionsList.
func (m *EffectivePermissionsList) SetPrivilegeAssignments(ctx context.Context, v []EffectivePrivilegeAssignment) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["privilege_assignments"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.PrivilegeAssignments = types.ListValueMust(t, vs)
}

type EffectivePredictiveOptimizationFlag struct {
	// The name of the object from which the flag was inherited. If there was no
	// inheritance, this field is left blank.
	InheritedFromName types.String `tfsdk:"inherited_from_name"`
	// The type of the object from which the flag was inherited. If there was no
	// inheritance, this field is left blank.
	InheritedFromType types.String `tfsdk:"inherited_from_type"`
	// Whether predictive optimization should be enabled for this object and
	// objects under it.
	Value types.String `tfsdk:"value"`
}

func (to *EffectivePredictiveOptimizationFlag) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EffectivePredictiveOptimizationFlag) {
}

func (to *EffectivePredictiveOptimizationFlag) SyncFieldsDuringRead(ctx context.Context, from EffectivePredictiveOptimizationFlag) {
}

func (m EffectivePredictiveOptimizationFlag) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["inherited_from_name"] = attrs["inherited_from_name"].SetOptional()
	attrs["inherited_from_type"] = attrs["inherited_from_type"].SetOptional()
	attrs["value"] = attrs["value"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EffectivePredictiveOptimizationFlag.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EffectivePredictiveOptimizationFlag) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EffectivePredictiveOptimizationFlag
// only implements ToObjectValue() and Type().
func (m EffectivePredictiveOptimizationFlag) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"inherited_from_name": m.InheritedFromName,
			"inherited_from_type": m.InheritedFromType,
			"value":               m.Value,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EffectivePredictiveOptimizationFlag) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"inherited_from_name": types.StringType,
			"inherited_from_type": types.StringType,
			"value":               types.StringType,
		},
	}
}

type EffectivePrivilege struct {
	// The full name of the object that conveys this privilege via inheritance.
	// This field is omitted when privilege is not inherited (it's assigned to
	// the securable itself).
	InheritedFromName types.String `tfsdk:"inherited_from_name"`
	// The type of the object that conveys this privilege via inheritance. This
	// field is omitted when privilege is not inherited (it's assigned to the
	// securable itself).
	InheritedFromType types.String `tfsdk:"inherited_from_type"`
	// The privilege assigned to the principal.
	Privilege types.String `tfsdk:"privilege"`
}

func (to *EffectivePrivilege) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EffectivePrivilege) {
}

func (to *EffectivePrivilege) SyncFieldsDuringRead(ctx context.Context, from EffectivePrivilege) {
}

func (m EffectivePrivilege) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["inherited_from_name"] = attrs["inherited_from_name"].SetOptional()
	attrs["inherited_from_type"] = attrs["inherited_from_type"].SetOptional()
	attrs["privilege"] = attrs["privilege"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EffectivePrivilege.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EffectivePrivilege) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EffectivePrivilege
// only implements ToObjectValue() and Type().
func (m EffectivePrivilege) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"inherited_from_name": m.InheritedFromName,
			"inherited_from_type": m.InheritedFromType,
			"privilege":           m.Privilege,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EffectivePrivilege) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"inherited_from_name": types.StringType,
			"inherited_from_type": types.StringType,
			"privilege":           types.StringType,
		},
	}
}

type EffectivePrivilegeAssignment struct {
	// The principal (user email address or group name).
	Principal types.String `tfsdk:"principal"`
	// The privileges conveyed to the principal (either directly or via
	// inheritance).
	Privileges types.List `tfsdk:"privileges"`
}

func (to *EffectivePrivilegeAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EffectivePrivilegeAssignment) {
	if !from.Privileges.IsNull() && !from.Privileges.IsUnknown() && to.Privileges.IsNull() && len(from.Privileges.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Privileges, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Privileges = from.Privileges
	}
}

func (to *EffectivePrivilegeAssignment) SyncFieldsDuringRead(ctx context.Context, from EffectivePrivilegeAssignment) {
	if !from.Privileges.IsNull() && !from.Privileges.IsUnknown() && to.Privileges.IsNull() && len(from.Privileges.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Privileges, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Privileges = from.Privileges
	}
}

func (m EffectivePrivilegeAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["principal"] = attrs["principal"].SetOptional()
	attrs["privileges"] = attrs["privileges"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EffectivePrivilegeAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EffectivePrivilegeAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"privileges": reflect.TypeOf(EffectivePrivilege{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EffectivePrivilegeAssignment
// only implements ToObjectValue() and Type().
func (m EffectivePrivilegeAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"principal":  m.Principal,
			"privileges": m.Privileges,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EffectivePrivilegeAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"principal": types.StringType,
			"privileges": basetypes.ListType{
				ElemType: EffectivePrivilege{}.Type(ctx),
			},
		},
	}
}

// GetPrivileges returns the value of the Privileges field in EffectivePrivilegeAssignment as
// a slice of EffectivePrivilege values.
// If the field is unknown or null, the boolean return value is false.
func (m *EffectivePrivilegeAssignment) GetPrivileges(ctx context.Context) ([]EffectivePrivilege, bool) {
	if m.Privileges.IsNull() || m.Privileges.IsUnknown() {
		return nil, false
	}
	var v []EffectivePrivilege
	d := m.Privileges.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrivileges sets the value of the Privileges field in EffectivePrivilegeAssignment.
func (m *EffectivePrivilegeAssignment) SetPrivileges(ctx context.Context, v []EffectivePrivilege) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["privileges"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Privileges = types.ListValueMust(t, vs)
}

type EnableRequest struct {
	// the catalog for which the system schema is to enabled in
	CatalogName types.String `tfsdk:"catalog_name"`
	// The metastore ID under which the system schema lives.
	MetastoreId types.String `tfsdk:"-"`
	// Full name of the system schema.
	SchemaName types.String `tfsdk:"-"`
}

func (to *EnableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EnableRequest) {
}

func (to *EnableRequest) SyncFieldsDuringRead(ctx context.Context, from EnableRequest) {
}

func (m EnableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EnableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EnableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EnableRequest
// only implements ToObjectValue() and Type().
func (m EnableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name": m.CatalogName,
			"metastore_id": m.MetastoreId,
			"schema_name":  m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EnableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name": types.StringType,
			"metastore_id": types.StringType,
			"schema_name":  types.StringType,
		},
	}
}

type EnableResponse struct {
}

func (to *EnableResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EnableResponse) {
}

func (to *EnableResponse) SyncFieldsDuringRead(ctx context.Context, from EnableResponse) {
}

func (m EnableResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EnableResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EnableResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EnableResponse
// only implements ToObjectValue() and Type().
func (m EnableResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m EnableResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// Encryption options that apply to clients connecting to cloud storage.
type EncryptionDetails struct {
	// Server-Side Encryption properties for clients communicating with AWS s3.
	SseEncryptionDetails types.Object `tfsdk:"sse_encryption_details"`
}

func (to *EncryptionDetails) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EncryptionDetails) {
	if !from.SseEncryptionDetails.IsNull() && !from.SseEncryptionDetails.IsUnknown() {
		if toSseEncryptionDetails, ok := to.GetSseEncryptionDetails(ctx); ok {
			if fromSseEncryptionDetails, ok := from.GetSseEncryptionDetails(ctx); ok {
				// Recursively sync the fields of SseEncryptionDetails
				toSseEncryptionDetails.SyncFieldsDuringCreateOrUpdate(ctx, fromSseEncryptionDetails)
				to.SetSseEncryptionDetails(ctx, toSseEncryptionDetails)
			}
		}
	}
}

func (to *EncryptionDetails) SyncFieldsDuringRead(ctx context.Context, from EncryptionDetails) {
	if !from.SseEncryptionDetails.IsNull() && !from.SseEncryptionDetails.IsUnknown() {
		if toSseEncryptionDetails, ok := to.GetSseEncryptionDetails(ctx); ok {
			if fromSseEncryptionDetails, ok := from.GetSseEncryptionDetails(ctx); ok {
				toSseEncryptionDetails.SyncFieldsDuringRead(ctx, fromSseEncryptionDetails)
				to.SetSseEncryptionDetails(ctx, toSseEncryptionDetails)
			}
		}
	}
}

func (m EncryptionDetails) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["sse_encryption_details"] = attrs["sse_encryption_details"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EncryptionDetails.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EncryptionDetails) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"sse_encryption_details": reflect.TypeOf(SseEncryptionDetails{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EncryptionDetails
// only implements ToObjectValue() and Type().
func (m EncryptionDetails) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"sse_encryption_details": m.SseEncryptionDetails,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EncryptionDetails) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"sse_encryption_details": SseEncryptionDetails{}.Type(ctx),
		},
	}
}

// GetSseEncryptionDetails returns the value of the SseEncryptionDetails field in EncryptionDetails as
// a SseEncryptionDetails value.
// If the field is unknown or null, the boolean return value is false.
func (m *EncryptionDetails) GetSseEncryptionDetails(ctx context.Context) (SseEncryptionDetails, bool) {
	var e SseEncryptionDetails
	if m.SseEncryptionDetails.IsNull() || m.SseEncryptionDetails.IsUnknown() {
		return e, false
	}
	var v SseEncryptionDetails
	d := m.SseEncryptionDetails.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSseEncryptionDetails sets the value of the SseEncryptionDetails field in EncryptionDetails.
func (m *EncryptionDetails) SetSseEncryptionDetails(ctx context.Context, v SseEncryptionDetails) {
	vs := v.ToObjectValue(ctx)
	m.SseEncryptionDetails = vs
}

// Represents a tag assignment to an entity
type EntityTagAssignment struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName types.String `tfsdk:"entity_name"`
	// The type of the entity to which the tag is assigned. Allowed values are:
	// catalogs, schemas, tables, columns, volumes.
	EntityType types.String `tfsdk:"entity_type"`
	// The key of the tag
	TagKey types.String `tfsdk:"tag_key"`
	// The value of the tag
	TagValue types.String `tfsdk:"tag_value"`
}

func (to *EntityTagAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from EntityTagAssignment) {
}

func (to *EntityTagAssignment) SyncFieldsDuringRead(ctx context.Context, from EntityTagAssignment) {
}

func (m EntityTagAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["entity_name"] = attrs["entity_name"].SetRequired()
	attrs["entity_name"] = attrs["entity_name"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["entity_type"] = attrs["entity_type"].SetRequired()
	attrs["entity_type"] = attrs["entity_type"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["tag_key"] = attrs["tag_key"].SetRequired()
	attrs["tag_key"] = attrs["tag_key"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["tag_value"] = attrs["tag_value"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in EntityTagAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m EntityTagAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, EntityTagAssignment
// only implements ToObjectValue() and Type().
func (m EntityTagAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"entity_name": m.EntityName,
			"entity_type": m.EntityType,
			"tag_key":     m.TagKey,
			"tag_value":   m.TagValue,
		})
}

// Type implements basetypes.ObjectValuable.
func (m EntityTagAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"entity_name": types.StringType,
			"entity_type": types.StringType,
			"tag_key":     types.StringType,
			"tag_value":   types.StringType,
		},
	}
}

type ExistsRequest struct {
	// Full name of the table.
	FullName types.String `tfsdk:"-"`
}

func (to *ExistsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExistsRequest) {
}

func (to *ExistsRequest) SyncFieldsDuringRead(ctx context.Context, from ExistsRequest) {
}

func (m ExistsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExistsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExistsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExistsRequest
// only implements ToObjectValue() and Type().
func (m ExistsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name": m.FullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExistsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name": types.StringType,
		},
	}
}

type ExternalLineageExternalMetadata struct {
	Name types.String `tfsdk:"name"`
}

func (to *ExternalLineageExternalMetadata) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageExternalMetadata) {
}

func (to *ExternalLineageExternalMetadata) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageExternalMetadata) {
}

func (m ExternalLineageExternalMetadata) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageExternalMetadata.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageExternalMetadata) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageExternalMetadata
// only implements ToObjectValue() and Type().
func (m ExternalLineageExternalMetadata) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageExternalMetadata) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

// Represents the external metadata object in the lineage event.
type ExternalLineageExternalMetadataInfo struct {
	// Type of entity represented by the external metadata object.
	EntityType types.String `tfsdk:"entity_type"`
	// Timestamp of the lineage event.
	EventTime types.String `tfsdk:"event_time"`
	// Name of the external metadata object.
	Name types.String `tfsdk:"name"`
	// Type of external system.
	SystemType types.String `tfsdk:"system_type"`
}

func (to *ExternalLineageExternalMetadataInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageExternalMetadataInfo) {
}

func (to *ExternalLineageExternalMetadataInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageExternalMetadataInfo) {
}

func (m ExternalLineageExternalMetadataInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["entity_type"] = attrs["entity_type"].SetOptional()
	attrs["event_time"] = attrs["event_time"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["system_type"] = attrs["system_type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageExternalMetadataInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageExternalMetadataInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageExternalMetadataInfo
// only implements ToObjectValue() and Type().
func (m ExternalLineageExternalMetadataInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"entity_type": m.EntityType,
			"event_time":  m.EventTime,
			"name":        m.Name,
			"system_type": m.SystemType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageExternalMetadataInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"entity_type": types.StringType,
			"event_time":  types.StringType,
			"name":        types.StringType,
			"system_type": types.StringType,
		},
	}
}

// Represents the path information in the lineage event.
type ExternalLineageFileInfo struct {
	// Timestamp of the lineage event.
	EventTime types.String `tfsdk:"event_time"`
	// URL of the path.
	Path types.String `tfsdk:"path"`
	// The full name of the securable on the path.
	SecurableName types.String `tfsdk:"securable_name"`
	// The securable type of the securable on the path.
	SecurableType types.String `tfsdk:"securable_type"`
	// The storage location associated with securable on the path.
	StorageLocation types.String `tfsdk:"storage_location"`
}

func (to *ExternalLineageFileInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageFileInfo) {
}

func (to *ExternalLineageFileInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageFileInfo) {
}

func (m ExternalLineageFileInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["event_time"] = attrs["event_time"].SetOptional()
	attrs["path"] = attrs["path"].SetOptional()
	attrs["securable_name"] = attrs["securable_name"].SetOptional()
	attrs["securable_type"] = attrs["securable_type"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageFileInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageFileInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageFileInfo
// only implements ToObjectValue() and Type().
func (m ExternalLineageFileInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"event_time":       m.EventTime,
			"path":             m.Path,
			"securable_name":   m.SecurableName,
			"securable_type":   m.SecurableType,
			"storage_location": m.StorageLocation,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageFileInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"event_time":       types.StringType,
			"path":             types.StringType,
			"securable_name":   types.StringType,
			"securable_type":   types.StringType,
			"storage_location": types.StringType,
		},
	}
}

// Lineage response containing lineage information of a data asset.
type ExternalLineageInfo struct {
	// Information about the edge metadata of the external lineage relationship.
	ExternalLineageInfo types.Object `tfsdk:"external_lineage_info"`
	// Information about external metadata involved in the lineage relationship.
	ExternalMetadataInfo types.Object `tfsdk:"external_metadata_info"`
	// Information about the file involved in the lineage relationship.
	FileInfo types.Object `tfsdk:"file_info"`
	// Information about the model version involved in the lineage relationship.
	ModelInfo types.Object `tfsdk:"model_info"`
	// Information about the table involved in the lineage relationship.
	TableInfo types.Object `tfsdk:"table_info"`
}

func (to *ExternalLineageInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageInfo) {
	if !from.ExternalLineageInfo.IsNull() && !from.ExternalLineageInfo.IsUnknown() {
		if toExternalLineageInfo, ok := to.GetExternalLineageInfo(ctx); ok {
			if fromExternalLineageInfo, ok := from.GetExternalLineageInfo(ctx); ok {
				// Recursively sync the fields of ExternalLineageInfo
				toExternalLineageInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalLineageInfo)
				to.SetExternalLineageInfo(ctx, toExternalLineageInfo)
			}
		}
	}
	if !from.ExternalMetadataInfo.IsNull() && !from.ExternalMetadataInfo.IsUnknown() {
		if toExternalMetadataInfo, ok := to.GetExternalMetadataInfo(ctx); ok {
			if fromExternalMetadataInfo, ok := from.GetExternalMetadataInfo(ctx); ok {
				// Recursively sync the fields of ExternalMetadataInfo
				toExternalMetadataInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalMetadataInfo)
				to.SetExternalMetadataInfo(ctx, toExternalMetadataInfo)
			}
		}
	}
	if !from.FileInfo.IsNull() && !from.FileInfo.IsUnknown() {
		if toFileInfo, ok := to.GetFileInfo(ctx); ok {
			if fromFileInfo, ok := from.GetFileInfo(ctx); ok {
				// Recursively sync the fields of FileInfo
				toFileInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromFileInfo)
				to.SetFileInfo(ctx, toFileInfo)
			}
		}
	}
	if !from.ModelInfo.IsNull() && !from.ModelInfo.IsUnknown() {
		if toModelInfo, ok := to.GetModelInfo(ctx); ok {
			if fromModelInfo, ok := from.GetModelInfo(ctx); ok {
				// Recursively sync the fields of ModelInfo
				toModelInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromModelInfo)
				to.SetModelInfo(ctx, toModelInfo)
			}
		}
	}
	if !from.TableInfo.IsNull() && !from.TableInfo.IsUnknown() {
		if toTableInfo, ok := to.GetTableInfo(ctx); ok {
			if fromTableInfo, ok := from.GetTableInfo(ctx); ok {
				// Recursively sync the fields of TableInfo
				toTableInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromTableInfo)
				to.SetTableInfo(ctx, toTableInfo)
			}
		}
	}
}

func (to *ExternalLineageInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageInfo) {
	if !from.ExternalLineageInfo.IsNull() && !from.ExternalLineageInfo.IsUnknown() {
		if toExternalLineageInfo, ok := to.GetExternalLineageInfo(ctx); ok {
			if fromExternalLineageInfo, ok := from.GetExternalLineageInfo(ctx); ok {
				toExternalLineageInfo.SyncFieldsDuringRead(ctx, fromExternalLineageInfo)
				to.SetExternalLineageInfo(ctx, toExternalLineageInfo)
			}
		}
	}
	if !from.ExternalMetadataInfo.IsNull() && !from.ExternalMetadataInfo.IsUnknown() {
		if toExternalMetadataInfo, ok := to.GetExternalMetadataInfo(ctx); ok {
			if fromExternalMetadataInfo, ok := from.GetExternalMetadataInfo(ctx); ok {
				toExternalMetadataInfo.SyncFieldsDuringRead(ctx, fromExternalMetadataInfo)
				to.SetExternalMetadataInfo(ctx, toExternalMetadataInfo)
			}
		}
	}
	if !from.FileInfo.IsNull() && !from.FileInfo.IsUnknown() {
		if toFileInfo, ok := to.GetFileInfo(ctx); ok {
			if fromFileInfo, ok := from.GetFileInfo(ctx); ok {
				toFileInfo.SyncFieldsDuringRead(ctx, fromFileInfo)
				to.SetFileInfo(ctx, toFileInfo)
			}
		}
	}
	if !from.ModelInfo.IsNull() && !from.ModelInfo.IsUnknown() {
		if toModelInfo, ok := to.GetModelInfo(ctx); ok {
			if fromModelInfo, ok := from.GetModelInfo(ctx); ok {
				toModelInfo.SyncFieldsDuringRead(ctx, fromModelInfo)
				to.SetModelInfo(ctx, toModelInfo)
			}
		}
	}
	if !from.TableInfo.IsNull() && !from.TableInfo.IsUnknown() {
		if toTableInfo, ok := to.GetTableInfo(ctx); ok {
			if fromTableInfo, ok := from.GetTableInfo(ctx); ok {
				toTableInfo.SyncFieldsDuringRead(ctx, fromTableInfo)
				to.SetTableInfo(ctx, toTableInfo)
			}
		}
	}
}

func (m ExternalLineageInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_lineage_info"] = attrs["external_lineage_info"].SetOptional()
	attrs["external_metadata_info"] = attrs["external_metadata_info"].SetOptional()
	attrs["file_info"] = attrs["file_info"].SetOptional()
	attrs["model_info"] = attrs["model_info"].SetOptional()
	attrs["table_info"] = attrs["table_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_lineage_info":  reflect.TypeOf(ExternalLineageRelationshipInfo{}),
		"external_metadata_info": reflect.TypeOf(ExternalLineageExternalMetadataInfo{}),
		"file_info":              reflect.TypeOf(ExternalLineageFileInfo{}),
		"model_info":             reflect.TypeOf(ExternalLineageModelVersionInfo{}),
		"table_info":             reflect.TypeOf(ExternalLineageTableInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageInfo
// only implements ToObjectValue() and Type().
func (m ExternalLineageInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_lineage_info":  m.ExternalLineageInfo,
			"external_metadata_info": m.ExternalMetadataInfo,
			"file_info":              m.FileInfo,
			"model_info":             m.ModelInfo,
			"table_info":             m.TableInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_lineage_info":  ExternalLineageRelationshipInfo{}.Type(ctx),
			"external_metadata_info": ExternalLineageExternalMetadataInfo{}.Type(ctx),
			"file_info":              ExternalLineageFileInfo{}.Type(ctx),
			"model_info":             ExternalLineageModelVersionInfo{}.Type(ctx),
			"table_info":             ExternalLineageTableInfo{}.Type(ctx),
		},
	}
}

// GetExternalLineageInfo returns the value of the ExternalLineageInfo field in ExternalLineageInfo as
// a ExternalLineageRelationshipInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageInfo) GetExternalLineageInfo(ctx context.Context) (ExternalLineageRelationshipInfo, bool) {
	var e ExternalLineageRelationshipInfo
	if m.ExternalLineageInfo.IsNull() || m.ExternalLineageInfo.IsUnknown() {
		return e, false
	}
	var v ExternalLineageRelationshipInfo
	d := m.ExternalLineageInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalLineageInfo sets the value of the ExternalLineageInfo field in ExternalLineageInfo.
func (m *ExternalLineageInfo) SetExternalLineageInfo(ctx context.Context, v ExternalLineageRelationshipInfo) {
	vs := v.ToObjectValue(ctx)
	m.ExternalLineageInfo = vs
}

// GetExternalMetadataInfo returns the value of the ExternalMetadataInfo field in ExternalLineageInfo as
// a ExternalLineageExternalMetadataInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageInfo) GetExternalMetadataInfo(ctx context.Context) (ExternalLineageExternalMetadataInfo, bool) {
	var e ExternalLineageExternalMetadataInfo
	if m.ExternalMetadataInfo.IsNull() || m.ExternalMetadataInfo.IsUnknown() {
		return e, false
	}
	var v ExternalLineageExternalMetadataInfo
	d := m.ExternalMetadataInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalMetadataInfo sets the value of the ExternalMetadataInfo field in ExternalLineageInfo.
func (m *ExternalLineageInfo) SetExternalMetadataInfo(ctx context.Context, v ExternalLineageExternalMetadataInfo) {
	vs := v.ToObjectValue(ctx)
	m.ExternalMetadataInfo = vs
}

// GetFileInfo returns the value of the FileInfo field in ExternalLineageInfo as
// a ExternalLineageFileInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageInfo) GetFileInfo(ctx context.Context) (ExternalLineageFileInfo, bool) {
	var e ExternalLineageFileInfo
	if m.FileInfo.IsNull() || m.FileInfo.IsUnknown() {
		return e, false
	}
	var v ExternalLineageFileInfo
	d := m.FileInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFileInfo sets the value of the FileInfo field in ExternalLineageInfo.
func (m *ExternalLineageInfo) SetFileInfo(ctx context.Context, v ExternalLineageFileInfo) {
	vs := v.ToObjectValue(ctx)
	m.FileInfo = vs
}

// GetModelInfo returns the value of the ModelInfo field in ExternalLineageInfo as
// a ExternalLineageModelVersionInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageInfo) GetModelInfo(ctx context.Context) (ExternalLineageModelVersionInfo, bool) {
	var e ExternalLineageModelVersionInfo
	if m.ModelInfo.IsNull() || m.ModelInfo.IsUnknown() {
		return e, false
	}
	var v ExternalLineageModelVersionInfo
	d := m.ModelInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetModelInfo sets the value of the ModelInfo field in ExternalLineageInfo.
func (m *ExternalLineageInfo) SetModelInfo(ctx context.Context, v ExternalLineageModelVersionInfo) {
	vs := v.ToObjectValue(ctx)
	m.ModelInfo = vs
}

// GetTableInfo returns the value of the TableInfo field in ExternalLineageInfo as
// a ExternalLineageTableInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageInfo) GetTableInfo(ctx context.Context) (ExternalLineageTableInfo, bool) {
	var e ExternalLineageTableInfo
	if m.TableInfo.IsNull() || m.TableInfo.IsUnknown() {
		return e, false
	}
	var v ExternalLineageTableInfo
	d := m.TableInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTableInfo sets the value of the TableInfo field in ExternalLineageInfo.
func (m *ExternalLineageInfo) SetTableInfo(ctx context.Context, v ExternalLineageTableInfo) {
	vs := v.ToObjectValue(ctx)
	m.TableInfo = vs
}

type ExternalLineageModelVersion struct {
	Name types.String `tfsdk:"name"`

	Version types.String `tfsdk:"version"`
}

func (to *ExternalLineageModelVersion) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageModelVersion) {
}

func (to *ExternalLineageModelVersion) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageModelVersion) {
}

func (m ExternalLineageModelVersion) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetOptional()
	attrs["version"] = attrs["version"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageModelVersion.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageModelVersion) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageModelVersion
// only implements ToObjectValue() and Type().
func (m ExternalLineageModelVersion) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":    m.Name,
			"version": m.Version,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageModelVersion) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":    types.StringType,
			"version": types.StringType,
		},
	}
}

// Represents the model version information in the lineage event.
type ExternalLineageModelVersionInfo struct {
	// Timestamp of the lineage event.
	EventTime types.String `tfsdk:"event_time"`
	// Name of the model.
	ModelName types.String `tfsdk:"model_name"`
	// Version number of the model.
	Version types.Int64 `tfsdk:"version"`
}

func (to *ExternalLineageModelVersionInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageModelVersionInfo) {
}

func (to *ExternalLineageModelVersionInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageModelVersionInfo) {
}

func (m ExternalLineageModelVersionInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["event_time"] = attrs["event_time"].SetOptional()
	attrs["model_name"] = attrs["model_name"].SetOptional()
	attrs["version"] = attrs["version"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageModelVersionInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageModelVersionInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageModelVersionInfo
// only implements ToObjectValue() and Type().
func (m ExternalLineageModelVersionInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"event_time": m.EventTime,
			"model_name": m.ModelName,
			"version":    m.Version,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageModelVersionInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"event_time": types.StringType,
			"model_name": types.StringType,
			"version":    types.Int64Type,
		},
	}
}

type ExternalLineageObject struct {
	ExternalMetadata types.Object `tfsdk:"external_metadata"`

	ModelVersion types.Object `tfsdk:"model_version"`

	Path types.Object `tfsdk:"path"`

	Table types.Object `tfsdk:"table"`
}

func (to *ExternalLineageObject) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageObject) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() {
		if toExternalMetadata, ok := to.GetExternalMetadata(ctx); ok {
			if fromExternalMetadata, ok := from.GetExternalMetadata(ctx); ok {
				// Recursively sync the fields of ExternalMetadata
				toExternalMetadata.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalMetadata)
				to.SetExternalMetadata(ctx, toExternalMetadata)
			}
		}
	}
	if !from.ModelVersion.IsNull() && !from.ModelVersion.IsUnknown() {
		if toModelVersion, ok := to.GetModelVersion(ctx); ok {
			if fromModelVersion, ok := from.GetModelVersion(ctx); ok {
				// Recursively sync the fields of ModelVersion
				toModelVersion.SyncFieldsDuringCreateOrUpdate(ctx, fromModelVersion)
				to.SetModelVersion(ctx, toModelVersion)
			}
		}
	}
	if !from.Path.IsNull() && !from.Path.IsUnknown() {
		if toPath, ok := to.GetPath(ctx); ok {
			if fromPath, ok := from.GetPath(ctx); ok {
				// Recursively sync the fields of Path
				toPath.SyncFieldsDuringCreateOrUpdate(ctx, fromPath)
				to.SetPath(ctx, toPath)
			}
		}
	}
	if !from.Table.IsNull() && !from.Table.IsUnknown() {
		if toTable, ok := to.GetTable(ctx); ok {
			if fromTable, ok := from.GetTable(ctx); ok {
				// Recursively sync the fields of Table
				toTable.SyncFieldsDuringCreateOrUpdate(ctx, fromTable)
				to.SetTable(ctx, toTable)
			}
		}
	}
}

func (to *ExternalLineageObject) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageObject) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() {
		if toExternalMetadata, ok := to.GetExternalMetadata(ctx); ok {
			if fromExternalMetadata, ok := from.GetExternalMetadata(ctx); ok {
				toExternalMetadata.SyncFieldsDuringRead(ctx, fromExternalMetadata)
				to.SetExternalMetadata(ctx, toExternalMetadata)
			}
		}
	}
	if !from.ModelVersion.IsNull() && !from.ModelVersion.IsUnknown() {
		if toModelVersion, ok := to.GetModelVersion(ctx); ok {
			if fromModelVersion, ok := from.GetModelVersion(ctx); ok {
				toModelVersion.SyncFieldsDuringRead(ctx, fromModelVersion)
				to.SetModelVersion(ctx, toModelVersion)
			}
		}
	}
	if !from.Path.IsNull() && !from.Path.IsUnknown() {
		if toPath, ok := to.GetPath(ctx); ok {
			if fromPath, ok := from.GetPath(ctx); ok {
				toPath.SyncFieldsDuringRead(ctx, fromPath)
				to.SetPath(ctx, toPath)
			}
		}
	}
	if !from.Table.IsNull() && !from.Table.IsUnknown() {
		if toTable, ok := to.GetTable(ctx); ok {
			if fromTable, ok := from.GetTable(ctx); ok {
				toTable.SyncFieldsDuringRead(ctx, fromTable)
				to.SetTable(ctx, toTable)
			}
		}
	}
}

func (m ExternalLineageObject) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_metadata"] = attrs["external_metadata"].SetOptional()
	attrs["model_version"] = attrs["model_version"].SetOptional()
	attrs["path"] = attrs["path"].SetOptional()
	attrs["table"] = attrs["table"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageObject.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageObject) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_metadata": reflect.TypeOf(ExternalLineageExternalMetadata{}),
		"model_version":     reflect.TypeOf(ExternalLineageModelVersion{}),
		"path":              reflect.TypeOf(ExternalLineagePath{}),
		"table":             reflect.TypeOf(ExternalLineageTable{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageObject
// only implements ToObjectValue() and Type().
func (m ExternalLineageObject) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_metadata": m.ExternalMetadata,
			"model_version":     m.ModelVersion,
			"path":              m.Path,
			"table":             m.Table,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageObject) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_metadata": ExternalLineageExternalMetadata{}.Type(ctx),
			"model_version":     ExternalLineageModelVersion{}.Type(ctx),
			"path":              ExternalLineagePath{}.Type(ctx),
			"table":             ExternalLineageTable{}.Type(ctx),
		},
	}
}

// GetExternalMetadata returns the value of the ExternalMetadata field in ExternalLineageObject as
// a ExternalLineageExternalMetadata value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageObject) GetExternalMetadata(ctx context.Context) (ExternalLineageExternalMetadata, bool) {
	var e ExternalLineageExternalMetadata
	if m.ExternalMetadata.IsNull() || m.ExternalMetadata.IsUnknown() {
		return e, false
	}
	var v ExternalLineageExternalMetadata
	d := m.ExternalMetadata.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalMetadata sets the value of the ExternalMetadata field in ExternalLineageObject.
func (m *ExternalLineageObject) SetExternalMetadata(ctx context.Context, v ExternalLineageExternalMetadata) {
	vs := v.ToObjectValue(ctx)
	m.ExternalMetadata = vs
}

// GetModelVersion returns the value of the ModelVersion field in ExternalLineageObject as
// a ExternalLineageModelVersion value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageObject) GetModelVersion(ctx context.Context) (ExternalLineageModelVersion, bool) {
	var e ExternalLineageModelVersion
	if m.ModelVersion.IsNull() || m.ModelVersion.IsUnknown() {
		return e, false
	}
	var v ExternalLineageModelVersion
	d := m.ModelVersion.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetModelVersion sets the value of the ModelVersion field in ExternalLineageObject.
func (m *ExternalLineageObject) SetModelVersion(ctx context.Context, v ExternalLineageModelVersion) {
	vs := v.ToObjectValue(ctx)
	m.ModelVersion = vs
}

// GetPath returns the value of the Path field in ExternalLineageObject as
// a ExternalLineagePath value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageObject) GetPath(ctx context.Context) (ExternalLineagePath, bool) {
	var e ExternalLineagePath
	if m.Path.IsNull() || m.Path.IsUnknown() {
		return e, false
	}
	var v ExternalLineagePath
	d := m.Path.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPath sets the value of the Path field in ExternalLineageObject.
func (m *ExternalLineageObject) SetPath(ctx context.Context, v ExternalLineagePath) {
	vs := v.ToObjectValue(ctx)
	m.Path = vs
}

// GetTable returns the value of the Table field in ExternalLineageObject as
// a ExternalLineageTable value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageObject) GetTable(ctx context.Context) (ExternalLineageTable, bool) {
	var e ExternalLineageTable
	if m.Table.IsNull() || m.Table.IsUnknown() {
		return e, false
	}
	var v ExternalLineageTable
	d := m.Table.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTable sets the value of the Table field in ExternalLineageObject.
func (m *ExternalLineageObject) SetTable(ctx context.Context, v ExternalLineageTable) {
	vs := v.ToObjectValue(ctx)
	m.Table = vs
}

type ExternalLineagePath struct {
	Url types.String `tfsdk:"url"`
}

func (to *ExternalLineagePath) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineagePath) {
}

func (to *ExternalLineagePath) SyncFieldsDuringRead(ctx context.Context, from ExternalLineagePath) {
}

func (m ExternalLineagePath) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineagePath.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineagePath) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineagePath
// only implements ToObjectValue() and Type().
func (m ExternalLineagePath) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"url": m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineagePath) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"url": types.StringType,
		},
	}
}

type ExternalLineageRelationship struct {
	// List of column relationships between source and target objects.
	Columns types.List `tfsdk:"columns"`
	// Unique identifier of the external lineage relationship.
	Id types.String `tfsdk:"id"`
	// Key-value properties associated with the external lineage relationship.
	Properties types.Map `tfsdk:"properties"`
	// Source object of the external lineage relationship.
	Source types.Object `tfsdk:"source"`
	// Target object of the external lineage relationship.
	Target types.Object `tfsdk:"target"`
}

func (to *ExternalLineageRelationship) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageRelationship) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				// Recursively sync the fields of Source
				toSource.SyncFieldsDuringCreateOrUpdate(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				// Recursively sync the fields of Target
				toTarget.SyncFieldsDuringCreateOrUpdate(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (to *ExternalLineageRelationship) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageRelationship) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				toSource.SyncFieldsDuringRead(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				toTarget.SyncFieldsDuringRead(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (m ExternalLineageRelationship) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["id"] = attrs["id"].SetComputed()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["source"] = attrs["source"].SetRequired()
	attrs["target"] = attrs["target"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageRelationship.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageRelationship) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":    reflect.TypeOf(ColumnRelationship{}),
		"properties": reflect.TypeOf(types.String{}),
		"source":     reflect.TypeOf(ExternalLineageObject{}),
		"target":     reflect.TypeOf(ExternalLineageObject{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageRelationship
// only implements ToObjectValue() and Type().
func (m ExternalLineageRelationship) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"columns":    m.Columns,
			"id":         m.Id,
			"properties": m.Properties,
			"source":     m.Source,
			"target":     m.Target,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageRelationship) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"columns": basetypes.ListType{
				ElemType: ColumnRelationship{}.Type(ctx),
			},
			"id": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"source": ExternalLineageObject{}.Type(ctx),
			"target": ExternalLineageObject{}.Type(ctx),
		},
	}
}

// GetColumns returns the value of the Columns field in ExternalLineageRelationship as
// a slice of ColumnRelationship values.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationship) GetColumns(ctx context.Context) ([]ColumnRelationship, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []ColumnRelationship
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in ExternalLineageRelationship.
func (m *ExternalLineageRelationship) SetColumns(ctx context.Context, v []ColumnRelationship) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in ExternalLineageRelationship as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationship) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in ExternalLineageRelationship.
func (m *ExternalLineageRelationship) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetSource returns the value of the Source field in ExternalLineageRelationship as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationship) GetSource(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Source.IsNull() || m.Source.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Source.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSource sets the value of the Source field in ExternalLineageRelationship.
func (m *ExternalLineageRelationship) SetSource(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Source = vs
}

// GetTarget returns the value of the Target field in ExternalLineageRelationship as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationship) GetTarget(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Target.IsNull() || m.Target.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Target.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTarget sets the value of the Target field in ExternalLineageRelationship.
func (m *ExternalLineageRelationship) SetTarget(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Target = vs
}

type ExternalLineageRelationshipInfo struct {
	// List of column relationships between source and target objects.
	Columns types.List `tfsdk:"columns"`
	// Unique identifier of the external lineage relationship.
	Id types.String `tfsdk:"id"`
	// Key-value properties associated with the external lineage relationship.
	Properties types.Map `tfsdk:"properties"`
	// Source object of the external lineage relationship.
	Source types.Object `tfsdk:"source"`
	// Target object of the external lineage relationship.
	Target types.Object `tfsdk:"target"`
}

func (to *ExternalLineageRelationshipInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageRelationshipInfo) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				// Recursively sync the fields of Source
				toSource.SyncFieldsDuringCreateOrUpdate(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				// Recursively sync the fields of Target
				toTarget.SyncFieldsDuringCreateOrUpdate(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (to *ExternalLineageRelationshipInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageRelationshipInfo) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				toSource.SyncFieldsDuringRead(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				toTarget.SyncFieldsDuringRead(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (m ExternalLineageRelationshipInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["id"] = attrs["id"].SetComputed()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["source"] = attrs["source"].SetRequired()
	attrs["target"] = attrs["target"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageRelationshipInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageRelationshipInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":    reflect.TypeOf(ColumnRelationship{}),
		"properties": reflect.TypeOf(types.String{}),
		"source":     reflect.TypeOf(ExternalLineageObject{}),
		"target":     reflect.TypeOf(ExternalLineageObject{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageRelationshipInfo
// only implements ToObjectValue() and Type().
func (m ExternalLineageRelationshipInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"columns":    m.Columns,
			"id":         m.Id,
			"properties": m.Properties,
			"source":     m.Source,
			"target":     m.Target,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageRelationshipInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"columns": basetypes.ListType{
				ElemType: ColumnRelationship{}.Type(ctx),
			},
			"id": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"source": ExternalLineageObject{}.Type(ctx),
			"target": ExternalLineageObject{}.Type(ctx),
		},
	}
}

// GetColumns returns the value of the Columns field in ExternalLineageRelationshipInfo as
// a slice of ColumnRelationship values.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationshipInfo) GetColumns(ctx context.Context) ([]ColumnRelationship, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []ColumnRelationship
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in ExternalLineageRelationshipInfo.
func (m *ExternalLineageRelationshipInfo) SetColumns(ctx context.Context, v []ColumnRelationship) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in ExternalLineageRelationshipInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationshipInfo) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in ExternalLineageRelationshipInfo.
func (m *ExternalLineageRelationshipInfo) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetSource returns the value of the Source field in ExternalLineageRelationshipInfo as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationshipInfo) GetSource(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Source.IsNull() || m.Source.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Source.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSource sets the value of the Source field in ExternalLineageRelationshipInfo.
func (m *ExternalLineageRelationshipInfo) SetSource(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Source = vs
}

// GetTarget returns the value of the Target field in ExternalLineageRelationshipInfo as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLineageRelationshipInfo) GetTarget(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Target.IsNull() || m.Target.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Target.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTarget sets the value of the Target field in ExternalLineageRelationshipInfo.
func (m *ExternalLineageRelationshipInfo) SetTarget(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Target = vs
}

type ExternalLineageTable struct {
	Name types.String `tfsdk:"name"`
}

func (to *ExternalLineageTable) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageTable) {
}

func (to *ExternalLineageTable) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageTable) {
}

func (m ExternalLineageTable) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageTable.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageTable) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageTable
// only implements ToObjectValue() and Type().
func (m ExternalLineageTable) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageTable) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

// Represents the table information in the lineage event.
type ExternalLineageTableInfo struct {
	// Name of Catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// Timestamp of the lineage event.
	EventTime types.String `tfsdk:"event_time"`
	// Name of Table.
	Name types.String `tfsdk:"name"`
	// Name of Schema.
	SchemaName types.String `tfsdk:"schema_name"`
}

func (to *ExternalLineageTableInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLineageTableInfo) {
}

func (to *ExternalLineageTableInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLineageTableInfo) {
}

func (m ExternalLineageTableInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["event_time"] = attrs["event_time"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLineageTableInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLineageTableInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLineageTableInfo
// only implements ToObjectValue() and Type().
func (m ExternalLineageTableInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name": m.CatalogName,
			"event_time":   m.EventTime,
			"name":         m.Name,
			"schema_name":  m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLineageTableInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name": types.StringType,
			"event_time":   types.StringType,
			"name":         types.StringType,
			"schema_name":  types.StringType,
		},
	}
}

type ExternalLocationInfo struct {
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Time at which this external location was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of external location creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// Unique ID of the location's storage credential.
	CredentialId types.String `tfsdk:"credential_id"`
	// Name of the storage credential used with this location.
	CredentialName types.String `tfsdk:"credential_name"`
	// Whether to enable file events on this external location.
	EnableFileEvents types.Bool `tfsdk:"enable_file_events"`

	EncryptionDetails types.Object `tfsdk:"encryption_details"`
	// Indicates whether fallback mode is enabled for this external location.
	// When fallback mode is enabled, the access to the location falls back to
	// cluster credentials if UC credentials are not sufficient.
	Fallback types.Bool `tfsdk:"fallback"`
	// File event queue settings. If `enable_file_events` is `true`, must be
	// defined and have exactly one of the documented properties.
	FileEventQueue types.Object `tfsdk:"file_event_queue"`

	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Unique identifier of metastore hosting the external location.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of the external location.
	Name types.String `tfsdk:"name"`
	// The owner of the external location.
	Owner types.String `tfsdk:"owner"`
	// Indicates whether the external location is read-only.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Time at which external location this was last modified, in epoch
	// milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the external location.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// Path URL of the external location.
	Url types.String `tfsdk:"url"`
}

func (to *ExternalLocationInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalLocationInfo) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				// Recursively sync the fields of EncryptionDetails
				toEncryptionDetails.SyncFieldsDuringCreateOrUpdate(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.FileEventQueue.IsNull() && !from.FileEventQueue.IsUnknown() {
		if toFileEventQueue, ok := to.GetFileEventQueue(ctx); ok {
			if fromFileEventQueue, ok := from.GetFileEventQueue(ctx); ok {
				// Recursively sync the fields of FileEventQueue
				toFileEventQueue.SyncFieldsDuringCreateOrUpdate(ctx, fromFileEventQueue)
				to.SetFileEventQueue(ctx, toFileEventQueue)
			}
		}
	}
}

func (to *ExternalLocationInfo) SyncFieldsDuringRead(ctx context.Context, from ExternalLocationInfo) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				toEncryptionDetails.SyncFieldsDuringRead(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.FileEventQueue.IsNull() && !from.FileEventQueue.IsUnknown() {
		if toFileEventQueue, ok := to.GetFileEventQueue(ctx); ok {
			if fromFileEventQueue, ok := from.GetFileEventQueue(ctx); ok {
				toFileEventQueue.SyncFieldsDuringRead(ctx, fromFileEventQueue)
				to.SetFileEventQueue(ctx, toFileEventQueue)
			}
		}
	}
}

func (m ExternalLocationInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["credential_id"] = attrs["credential_id"].SetOptional()
	attrs["credential_name"] = attrs["credential_name"].SetOptional()
	attrs["enable_file_events"] = attrs["enable_file_events"].SetOptional()
	attrs["encryption_details"] = attrs["encryption_details"].SetOptional()
	attrs["fallback"] = attrs["fallback"].SetOptional()
	attrs["file_event_queue"] = attrs["file_event_queue"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalLocationInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalLocationInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"encryption_details": reflect.TypeOf(EncryptionDetails{}),
		"file_event_queue":   reflect.TypeOf(FileEventQueue{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalLocationInfo
// only implements ToObjectValue() and Type().
func (m ExternalLocationInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"browse_only":        m.BrowseOnly,
			"comment":            m.Comment,
			"created_at":         m.CreatedAt,
			"created_by":         m.CreatedBy,
			"credential_id":      m.CredentialId,
			"credential_name":    m.CredentialName,
			"enable_file_events": m.EnableFileEvents,
			"encryption_details": m.EncryptionDetails,
			"fallback":           m.Fallback,
			"file_event_queue":   m.FileEventQueue,
			"isolation_mode":     m.IsolationMode,
			"metastore_id":       m.MetastoreId,
			"name":               m.Name,
			"owner":              m.Owner,
			"read_only":          m.ReadOnly,
			"updated_at":         m.UpdatedAt,
			"updated_by":         m.UpdatedBy,
			"url":                m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalLocationInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"browse_only":        types.BoolType,
			"comment":            types.StringType,
			"created_at":         types.Int64Type,
			"created_by":         types.StringType,
			"credential_id":      types.StringType,
			"credential_name":    types.StringType,
			"enable_file_events": types.BoolType,
			"encryption_details": EncryptionDetails{}.Type(ctx),
			"fallback":           types.BoolType,
			"file_event_queue":   FileEventQueue{}.Type(ctx),
			"isolation_mode":     types.StringType,
			"metastore_id":       types.StringType,
			"name":               types.StringType,
			"owner":              types.StringType,
			"read_only":          types.BoolType,
			"updated_at":         types.Int64Type,
			"updated_by":         types.StringType,
			"url":                types.StringType,
		},
	}
}

// GetEncryptionDetails returns the value of the EncryptionDetails field in ExternalLocationInfo as
// a EncryptionDetails value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLocationInfo) GetEncryptionDetails(ctx context.Context) (EncryptionDetails, bool) {
	var e EncryptionDetails
	if m.EncryptionDetails.IsNull() || m.EncryptionDetails.IsUnknown() {
		return e, false
	}
	var v EncryptionDetails
	d := m.EncryptionDetails.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEncryptionDetails sets the value of the EncryptionDetails field in ExternalLocationInfo.
func (m *ExternalLocationInfo) SetEncryptionDetails(ctx context.Context, v EncryptionDetails) {
	vs := v.ToObjectValue(ctx)
	m.EncryptionDetails = vs
}

// GetFileEventQueue returns the value of the FileEventQueue field in ExternalLocationInfo as
// a FileEventQueue value.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalLocationInfo) GetFileEventQueue(ctx context.Context) (FileEventQueue, bool) {
	var e FileEventQueue
	if m.FileEventQueue.IsNull() || m.FileEventQueue.IsUnknown() {
		return e, false
	}
	var v FileEventQueue
	d := m.FileEventQueue.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFileEventQueue sets the value of the FileEventQueue field in ExternalLocationInfo.
func (m *ExternalLocationInfo) SetFileEventQueue(ctx context.Context, v FileEventQueue) {
	vs := v.ToObjectValue(ctx)
	m.FileEventQueue = vs
}

type ExternalMetadata struct {
	// List of columns associated with the external metadata object.
	Columns types.List `tfsdk:"columns"`
	// Time at which this external metadata object was created.
	CreateTime types.String `tfsdk:"create_time"`
	// Username of external metadata object creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// User-provided free-form text description.
	Description types.String `tfsdk:"description"`
	// Type of entity within the external system.
	EntityType types.String `tfsdk:"entity_type"`
	// Unique identifier of the external metadata object.
	Id types.String `tfsdk:"id"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of the external metadata object.
	Name types.String `tfsdk:"name"`
	// Owner of the external metadata object.
	Owner types.String `tfsdk:"owner"`
	// A map of key-value properties attached to the external metadata object.
	Properties types.Map `tfsdk:"properties"`
	// Type of external system.
	SystemType types.String `tfsdk:"system_type"`
	// Time at which this external metadata object was last modified.
	UpdateTime types.String `tfsdk:"update_time"`
	// Username of user who last modified external metadata object.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// URL associated with the external metadata object.
	Url types.String `tfsdk:"url"`
}

func (to *ExternalMetadata) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ExternalMetadata) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
}

func (to *ExternalMetadata) SyncFieldsDuringRead(ctx context.Context, from ExternalMetadata) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
}

func (m ExternalMetadata) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["create_time"] = attrs["create_time"].SetComputed()
	attrs["created_by"] = attrs["created_by"].SetComputed()
	attrs["description"] = attrs["description"].SetOptional()
	attrs["entity_type"] = attrs["entity_type"].SetRequired()
	attrs["id"] = attrs["id"].SetComputed()
	attrs["metastore_id"] = attrs["metastore_id"].SetComputed()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["system_type"] = attrs["system_type"].SetRequired()
	attrs["update_time"] = attrs["update_time"].SetComputed()
	attrs["updated_by"] = attrs["updated_by"].SetComputed()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ExternalMetadata.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ExternalMetadata) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":    reflect.TypeOf(types.String{}),
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ExternalMetadata
// only implements ToObjectValue() and Type().
func (m ExternalMetadata) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"columns":      m.Columns,
			"create_time":  m.CreateTime,
			"created_by":   m.CreatedBy,
			"description":  m.Description,
			"entity_type":  m.EntityType,
			"id":           m.Id,
			"metastore_id": m.MetastoreId,
			"name":         m.Name,
			"owner":        m.Owner,
			"properties":   m.Properties,
			"system_type":  m.SystemType,
			"update_time":  m.UpdateTime,
			"updated_by":   m.UpdatedBy,
			"url":          m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ExternalMetadata) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"columns": basetypes.ListType{
				ElemType: types.StringType,
			},
			"create_time":  types.StringType,
			"created_by":   types.StringType,
			"description":  types.StringType,
			"entity_type":  types.StringType,
			"id":           types.StringType,
			"metastore_id": types.StringType,
			"name":         types.StringType,
			"owner":        types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"system_type": types.StringType,
			"update_time": types.StringType,
			"updated_by":  types.StringType,
			"url":         types.StringType,
		},
	}
}

// GetColumns returns the value of the Columns field in ExternalMetadata as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalMetadata) GetColumns(ctx context.Context) ([]types.String, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in ExternalMetadata.
func (m *ExternalMetadata) SetColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in ExternalMetadata as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ExternalMetadata) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in ExternalMetadata.
func (m *ExternalMetadata) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// Detailed status of an online table. Shown if the online table is in the
// OFFLINE_FAILED or the ONLINE_PIPELINE_FAILED state.
type FailedStatus struct {
	// The last source table Delta version that was synced to the online table.
	// Note that this Delta version may only be partially synced to the online
	// table. Only populated if the table is still online and available for
	// serving.
	LastProcessedCommitVersion types.Int64 `tfsdk:"last_processed_commit_version"`
	// The timestamp of the last time any data was synchronized from the source
	// table to the online table. Only populated if the table is still online
	// and available for serving.
	Timestamp types.String `tfsdk:"timestamp"`
}

func (to *FailedStatus) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FailedStatus) {
}

func (to *FailedStatus) SyncFieldsDuringRead(ctx context.Context, from FailedStatus) {
}

func (m FailedStatus) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["last_processed_commit_version"] = attrs["last_processed_commit_version"].SetOptional()
	attrs["timestamp"] = attrs["timestamp"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FailedStatus.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FailedStatus) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FailedStatus
// only implements ToObjectValue() and Type().
func (m FailedStatus) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"last_processed_commit_version": m.LastProcessedCommitVersion,
			"timestamp":                     m.Timestamp,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FailedStatus) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"last_processed_commit_version": types.Int64Type,
			"timestamp":                     types.StringType,
		},
	}
}

type FileEventQueue struct {
	ManagedAqs types.Object `tfsdk:"managed_aqs"`

	ManagedPubsub types.Object `tfsdk:"managed_pubsub"`

	ManagedSqs types.Object `tfsdk:"managed_sqs"`

	ProvidedAqs types.Object `tfsdk:"provided_aqs"`

	ProvidedPubsub types.Object `tfsdk:"provided_pubsub"`

	ProvidedSqs types.Object `tfsdk:"provided_sqs"`
}

func (to *FileEventQueue) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FileEventQueue) {
	if !from.ManagedAqs.IsNull() && !from.ManagedAqs.IsUnknown() {
		if toManagedAqs, ok := to.GetManagedAqs(ctx); ok {
			if fromManagedAqs, ok := from.GetManagedAqs(ctx); ok {
				// Recursively sync the fields of ManagedAqs
				toManagedAqs.SyncFieldsDuringCreateOrUpdate(ctx, fromManagedAqs)
				to.SetManagedAqs(ctx, toManagedAqs)
			}
		}
	}
	if !from.ManagedPubsub.IsNull() && !from.ManagedPubsub.IsUnknown() {
		if toManagedPubsub, ok := to.GetManagedPubsub(ctx); ok {
			if fromManagedPubsub, ok := from.GetManagedPubsub(ctx); ok {
				// Recursively sync the fields of ManagedPubsub
				toManagedPubsub.SyncFieldsDuringCreateOrUpdate(ctx, fromManagedPubsub)
				to.SetManagedPubsub(ctx, toManagedPubsub)
			}
		}
	}
	if !from.ManagedSqs.IsNull() && !from.ManagedSqs.IsUnknown() {
		if toManagedSqs, ok := to.GetManagedSqs(ctx); ok {
			if fromManagedSqs, ok := from.GetManagedSqs(ctx); ok {
				// Recursively sync the fields of ManagedSqs
				toManagedSqs.SyncFieldsDuringCreateOrUpdate(ctx, fromManagedSqs)
				to.SetManagedSqs(ctx, toManagedSqs)
			}
		}
	}
	if !from.ProvidedAqs.IsNull() && !from.ProvidedAqs.IsUnknown() {
		if toProvidedAqs, ok := to.GetProvidedAqs(ctx); ok {
			if fromProvidedAqs, ok := from.GetProvidedAqs(ctx); ok {
				// Recursively sync the fields of ProvidedAqs
				toProvidedAqs.SyncFieldsDuringCreateOrUpdate(ctx, fromProvidedAqs)
				to.SetProvidedAqs(ctx, toProvidedAqs)
			}
		}
	}
	if !from.ProvidedPubsub.IsNull() && !from.ProvidedPubsub.IsUnknown() {
		if toProvidedPubsub, ok := to.GetProvidedPubsub(ctx); ok {
			if fromProvidedPubsub, ok := from.GetProvidedPubsub(ctx); ok {
				// Recursively sync the fields of ProvidedPubsub
				toProvidedPubsub.SyncFieldsDuringCreateOrUpdate(ctx, fromProvidedPubsub)
				to.SetProvidedPubsub(ctx, toProvidedPubsub)
			}
		}
	}
	if !from.ProvidedSqs.IsNull() && !from.ProvidedSqs.IsUnknown() {
		if toProvidedSqs, ok := to.GetProvidedSqs(ctx); ok {
			if fromProvidedSqs, ok := from.GetProvidedSqs(ctx); ok {
				// Recursively sync the fields of ProvidedSqs
				toProvidedSqs.SyncFieldsDuringCreateOrUpdate(ctx, fromProvidedSqs)
				to.SetProvidedSqs(ctx, toProvidedSqs)
			}
		}
	}
}

func (to *FileEventQueue) SyncFieldsDuringRead(ctx context.Context, from FileEventQueue) {
	if !from.ManagedAqs.IsNull() && !from.ManagedAqs.IsUnknown() {
		if toManagedAqs, ok := to.GetManagedAqs(ctx); ok {
			if fromManagedAqs, ok := from.GetManagedAqs(ctx); ok {
				toManagedAqs.SyncFieldsDuringRead(ctx, fromManagedAqs)
				to.SetManagedAqs(ctx, toManagedAqs)
			}
		}
	}
	if !from.ManagedPubsub.IsNull() && !from.ManagedPubsub.IsUnknown() {
		if toManagedPubsub, ok := to.GetManagedPubsub(ctx); ok {
			if fromManagedPubsub, ok := from.GetManagedPubsub(ctx); ok {
				toManagedPubsub.SyncFieldsDuringRead(ctx, fromManagedPubsub)
				to.SetManagedPubsub(ctx, toManagedPubsub)
			}
		}
	}
	if !from.ManagedSqs.IsNull() && !from.ManagedSqs.IsUnknown() {
		if toManagedSqs, ok := to.GetManagedSqs(ctx); ok {
			if fromManagedSqs, ok := from.GetManagedSqs(ctx); ok {
				toManagedSqs.SyncFieldsDuringRead(ctx, fromManagedSqs)
				to.SetManagedSqs(ctx, toManagedSqs)
			}
		}
	}
	if !from.ProvidedAqs.IsNull() && !from.ProvidedAqs.IsUnknown() {
		if toProvidedAqs, ok := to.GetProvidedAqs(ctx); ok {
			if fromProvidedAqs, ok := from.GetProvidedAqs(ctx); ok {
				toProvidedAqs.SyncFieldsDuringRead(ctx, fromProvidedAqs)
				to.SetProvidedAqs(ctx, toProvidedAqs)
			}
		}
	}
	if !from.ProvidedPubsub.IsNull() && !from.ProvidedPubsub.IsUnknown() {
		if toProvidedPubsub, ok := to.GetProvidedPubsub(ctx); ok {
			if fromProvidedPubsub, ok := from.GetProvidedPubsub(ctx); ok {
				toProvidedPubsub.SyncFieldsDuringRead(ctx, fromProvidedPubsub)
				to.SetProvidedPubsub(ctx, toProvidedPubsub)
			}
		}
	}
	if !from.ProvidedSqs.IsNull() && !from.ProvidedSqs.IsUnknown() {
		if toProvidedSqs, ok := to.GetProvidedSqs(ctx); ok {
			if fromProvidedSqs, ok := from.GetProvidedSqs(ctx); ok {
				toProvidedSqs.SyncFieldsDuringRead(ctx, fromProvidedSqs)
				to.SetProvidedSqs(ctx, toProvidedSqs)
			}
		}
	}
}

func (m FileEventQueue) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["managed_aqs"] = attrs["managed_aqs"].SetOptional()
	attrs["managed_pubsub"] = attrs["managed_pubsub"].SetOptional()
	attrs["managed_sqs"] = attrs["managed_sqs"].SetOptional()
	attrs["provided_aqs"] = attrs["provided_aqs"].SetOptional()
	attrs["provided_pubsub"] = attrs["provided_pubsub"].SetOptional()
	attrs["provided_sqs"] = attrs["provided_sqs"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FileEventQueue.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FileEventQueue) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"managed_aqs":     reflect.TypeOf(AzureQueueStorage{}),
		"managed_pubsub":  reflect.TypeOf(GcpPubsub{}),
		"managed_sqs":     reflect.TypeOf(AwsSqsQueue{}),
		"provided_aqs":    reflect.TypeOf(AzureQueueStorage{}),
		"provided_pubsub": reflect.TypeOf(GcpPubsub{}),
		"provided_sqs":    reflect.TypeOf(AwsSqsQueue{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FileEventQueue
// only implements ToObjectValue() and Type().
func (m FileEventQueue) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"managed_aqs":     m.ManagedAqs,
			"managed_pubsub":  m.ManagedPubsub,
			"managed_sqs":     m.ManagedSqs,
			"provided_aqs":    m.ProvidedAqs,
			"provided_pubsub": m.ProvidedPubsub,
			"provided_sqs":    m.ProvidedSqs,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FileEventQueue) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"managed_aqs":     AzureQueueStorage{}.Type(ctx),
			"managed_pubsub":  GcpPubsub{}.Type(ctx),
			"managed_sqs":     AwsSqsQueue{}.Type(ctx),
			"provided_aqs":    AzureQueueStorage{}.Type(ctx),
			"provided_pubsub": GcpPubsub{}.Type(ctx),
			"provided_sqs":    AwsSqsQueue{}.Type(ctx),
		},
	}
}

// GetManagedAqs returns the value of the ManagedAqs field in FileEventQueue as
// a AzureQueueStorage value.
// If the field is unknown or null, the boolean return value is false.
func (m *FileEventQueue) GetManagedAqs(ctx context.Context) (AzureQueueStorage, bool) {
	var e AzureQueueStorage
	if m.ManagedAqs.IsNull() || m.ManagedAqs.IsUnknown() {
		return e, false
	}
	var v AzureQueueStorage
	d := m.ManagedAqs.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetManagedAqs sets the value of the ManagedAqs field in FileEventQueue.
func (m *FileEventQueue) SetManagedAqs(ctx context.Context, v AzureQueueStorage) {
	vs := v.ToObjectValue(ctx)
	m.ManagedAqs = vs
}

// GetManagedPubsub returns the value of the ManagedPubsub field in FileEventQueue as
// a GcpPubsub value.
// If the field is unknown or null, the boolean return value is false.
func (m *FileEventQueue) GetManagedPubsub(ctx context.Context) (GcpPubsub, bool) {
	var e GcpPubsub
	if m.ManagedPubsub.IsNull() || m.ManagedPubsub.IsUnknown() {
		return e, false
	}
	var v GcpPubsub
	d := m.ManagedPubsub.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetManagedPubsub sets the value of the ManagedPubsub field in FileEventQueue.
func (m *FileEventQueue) SetManagedPubsub(ctx context.Context, v GcpPubsub) {
	vs := v.ToObjectValue(ctx)
	m.ManagedPubsub = vs
}

// GetManagedSqs returns the value of the ManagedSqs field in FileEventQueue as
// a AwsSqsQueue value.
// If the field is unknown or null, the boolean return value is false.
func (m *FileEventQueue) GetManagedSqs(ctx context.Context) (AwsSqsQueue, bool) {
	var e AwsSqsQueue
	if m.ManagedSqs.IsNull() || m.ManagedSqs.IsUnknown() {
		return e, false
	}
	var v AwsSqsQueue
	d := m.ManagedSqs.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetManagedSqs sets the value of the ManagedSqs field in FileEventQueue.
func (m *FileEventQueue) SetManagedSqs(ctx context.Context, v AwsSqsQueue) {
	vs := v.ToObjectValue(ctx)
	m.ManagedSqs = vs
}

// GetProvidedAqs returns the value of the ProvidedAqs field in FileEventQueue as
// a AzureQueueStorage value.
// If the field is unknown or null, the boolean return value is false.
func (m *FileEventQueue) GetProvidedAqs(ctx context.Context) (AzureQueueStorage, bool) {
	var e AzureQueueStorage
	if m.ProvidedAqs.IsNull() || m.ProvidedAqs.IsUnknown() {
		return e, false
	}
	var v AzureQueueStorage
	d := m.ProvidedAqs.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProvidedAqs sets the value of the ProvidedAqs field in FileEventQueue.
func (m *FileEventQueue) SetProvidedAqs(ctx context.Context, v AzureQueueStorage) {
	vs := v.ToObjectValue(ctx)
	m.ProvidedAqs = vs
}

// GetProvidedPubsub returns the value of the ProvidedPubsub field in FileEventQueue as
// a GcpPubsub value.
// If the field is unknown or null, the boolean return value is false.
func (m *FileEventQueue) GetProvidedPubsub(ctx context.Context) (GcpPubsub, bool) {
	var e GcpPubsub
	if m.ProvidedPubsub.IsNull() || m.ProvidedPubsub.IsUnknown() {
		return e, false
	}
	var v GcpPubsub
	d := m.ProvidedPubsub.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProvidedPubsub sets the value of the ProvidedPubsub field in FileEventQueue.
func (m *FileEventQueue) SetProvidedPubsub(ctx context.Context, v GcpPubsub) {
	vs := v.ToObjectValue(ctx)
	m.ProvidedPubsub = vs
}

// GetProvidedSqs returns the value of the ProvidedSqs field in FileEventQueue as
// a AwsSqsQueue value.
// If the field is unknown or null, the boolean return value is false.
func (m *FileEventQueue) GetProvidedSqs(ctx context.Context) (AwsSqsQueue, bool) {
	var e AwsSqsQueue
	if m.ProvidedSqs.IsNull() || m.ProvidedSqs.IsUnknown() {
		return e, false
	}
	var v AwsSqsQueue
	d := m.ProvidedSqs.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProvidedSqs sets the value of the ProvidedSqs field in FileEventQueue.
func (m *FileEventQueue) SetProvidedSqs(ctx context.Context, v AwsSqsQueue) {
	vs := v.ToObjectValue(ctx)
	m.ProvidedSqs = vs
}

type ForeignKeyConstraint struct {
	// Column names for this constraint.
	ChildColumns types.List `tfsdk:"child_columns"`
	// The name of the constraint.
	Name types.String `tfsdk:"name"`
	// Column names for this constraint.
	ParentColumns types.List `tfsdk:"parent_columns"`
	// The full name of the parent constraint.
	ParentTable types.String `tfsdk:"parent_table"`
	// True if the constraint is RELY, false or unset if NORELY.
	Rely types.Bool `tfsdk:"rely"`
}

func (to *ForeignKeyConstraint) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ForeignKeyConstraint) {
}

func (to *ForeignKeyConstraint) SyncFieldsDuringRead(ctx context.Context, from ForeignKeyConstraint) {
}

func (m ForeignKeyConstraint) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["child_columns"] = attrs["child_columns"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["parent_columns"] = attrs["parent_columns"].SetRequired()
	attrs["parent_table"] = attrs["parent_table"].SetRequired()
	attrs["rely"] = attrs["rely"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ForeignKeyConstraint.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ForeignKeyConstraint) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"child_columns":  reflect.TypeOf(types.String{}),
		"parent_columns": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ForeignKeyConstraint
// only implements ToObjectValue() and Type().
func (m ForeignKeyConstraint) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"child_columns":  m.ChildColumns,
			"name":           m.Name,
			"parent_columns": m.ParentColumns,
			"parent_table":   m.ParentTable,
			"rely":           m.Rely,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ForeignKeyConstraint) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"child_columns": basetypes.ListType{
				ElemType: types.StringType,
			},
			"name": types.StringType,
			"parent_columns": basetypes.ListType{
				ElemType: types.StringType,
			},
			"parent_table": types.StringType,
			"rely":         types.BoolType,
		},
	}
}

// GetChildColumns returns the value of the ChildColumns field in ForeignKeyConstraint as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ForeignKeyConstraint) GetChildColumns(ctx context.Context) ([]types.String, bool) {
	if m.ChildColumns.IsNull() || m.ChildColumns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.ChildColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetChildColumns sets the value of the ChildColumns field in ForeignKeyConstraint.
func (m *ForeignKeyConstraint) SetChildColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["child_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ChildColumns = types.ListValueMust(t, vs)
}

// GetParentColumns returns the value of the ParentColumns field in ForeignKeyConstraint as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *ForeignKeyConstraint) GetParentColumns(ctx context.Context) ([]types.String, bool) {
	if m.ParentColumns.IsNull() || m.ParentColumns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.ParentColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetParentColumns sets the value of the ParentColumns field in ForeignKeyConstraint.
func (m *ForeignKeyConstraint) SetParentColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["parent_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ParentColumns = types.ListValueMust(t, vs)
}

type FunctionArgument struct {
	// The alias of a matched column.
	Alias types.String `tfsdk:"alias"`
	// A constant literal.
	Constant types.String `tfsdk:"constant"`
}

func (to *FunctionArgument) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FunctionArgument) {
}

func (to *FunctionArgument) SyncFieldsDuringRead(ctx context.Context, from FunctionArgument) {
}

func (m FunctionArgument) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["alias"] = attrs["alias"].SetOptional()
	attrs["constant"] = attrs["constant"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FunctionArgument.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FunctionArgument) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FunctionArgument
// only implements ToObjectValue() and Type().
func (m FunctionArgument) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"alias":    m.Alias,
			"constant": m.Constant,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FunctionArgument) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"alias":    types.StringType,
			"constant": types.StringType,
		},
	}
}

// A function that is dependent on a SQL object.
type FunctionDependency struct {
	// Full name of the dependent function, in the form of
	// __catalog_name__.__schema_name__.__function_name__.
	FunctionFullName types.String `tfsdk:"function_full_name"`
}

func (to *FunctionDependency) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FunctionDependency) {
}

func (to *FunctionDependency) SyncFieldsDuringRead(ctx context.Context, from FunctionDependency) {
}

func (m FunctionDependency) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["function_full_name"] = attrs["function_full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FunctionDependency.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FunctionDependency) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FunctionDependency
// only implements ToObjectValue() and Type().
func (m FunctionDependency) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"function_full_name": m.FunctionFullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FunctionDependency) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"function_full_name": types.StringType,
		},
	}
}

type FunctionInfo struct {
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// Name of parent Catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Time at which this function was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of function creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// Scalar function return data type.
	DataType types.String `tfsdk:"data_type"`
	// External function language.
	ExternalLanguage types.String `tfsdk:"external_language"`
	// External function name.
	ExternalName types.String `tfsdk:"external_name"`
	// Pretty printed function data type.
	FullDataType types.String `tfsdk:"full_data_type"`
	// Full name of Function, in form of
	// **catalog_name**.**schema_name**.**function_name**
	FullName types.String `tfsdk:"full_name"`
	// Id of Function, relative to parent schema.
	FunctionId types.String `tfsdk:"function_id"`
	// Function input parameters.
	InputParams types.Object `tfsdk:"input_params"`
	// Whether the function is deterministic.
	IsDeterministic types.Bool `tfsdk:"is_deterministic"`
	// Function null call.
	IsNullCall types.Bool `tfsdk:"is_null_call"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of function, relative to parent schema.
	Name types.String `tfsdk:"name"`
	// Username of current owner of the function.
	Owner types.String `tfsdk:"owner"`
	// Function parameter style. **S** is the value for SQL.
	ParameterStyle types.String `tfsdk:"parameter_style"`
	// JSON-serialized key-value pair map, encoded (escaped) as a string.
	Properties types.String `tfsdk:"properties"`
	// Table function return parameters.
	ReturnParams types.Object `tfsdk:"return_params"`
	// Function language. When **EXTERNAL** is used, the language of the routine
	// function should be specified in the **external_language** field, and the
	// **return_params** of the function cannot be used (as **TABLE** return
	// type is not supported), and the **sql_data_access** field must be
	// **NO_SQL**.
	RoutineBody types.String `tfsdk:"routine_body"`
	// Function body.
	RoutineDefinition types.String `tfsdk:"routine_definition"`
	// function dependencies.
	RoutineDependencies types.Object `tfsdk:"routine_dependencies"`
	// Name of parent Schema relative to its parent Catalog.
	SchemaName types.String `tfsdk:"schema_name"`
	// Function security type.
	SecurityType types.String `tfsdk:"security_type"`
	// Specific name of the function; Reserved for future use.
	SpecificName types.String `tfsdk:"specific_name"`
	// Function SQL data access.
	SqlDataAccess types.String `tfsdk:"sql_data_access"`
	// List of schemes whose objects can be referenced without qualification.
	SqlPath types.String `tfsdk:"sql_path"`
	// Time at which this function was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the function.
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *FunctionInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FunctionInfo) {
	if !from.InputParams.IsNull() && !from.InputParams.IsUnknown() {
		if toInputParams, ok := to.GetInputParams(ctx); ok {
			if fromInputParams, ok := from.GetInputParams(ctx); ok {
				// Recursively sync the fields of InputParams
				toInputParams.SyncFieldsDuringCreateOrUpdate(ctx, fromInputParams)
				to.SetInputParams(ctx, toInputParams)
			}
		}
	}
	if !from.ReturnParams.IsNull() && !from.ReturnParams.IsUnknown() {
		if toReturnParams, ok := to.GetReturnParams(ctx); ok {
			if fromReturnParams, ok := from.GetReturnParams(ctx); ok {
				// Recursively sync the fields of ReturnParams
				toReturnParams.SyncFieldsDuringCreateOrUpdate(ctx, fromReturnParams)
				to.SetReturnParams(ctx, toReturnParams)
			}
		}
	}
	if !from.RoutineDependencies.IsNull() && !from.RoutineDependencies.IsUnknown() {
		if toRoutineDependencies, ok := to.GetRoutineDependencies(ctx); ok {
			if fromRoutineDependencies, ok := from.GetRoutineDependencies(ctx); ok {
				// Recursively sync the fields of RoutineDependencies
				toRoutineDependencies.SyncFieldsDuringCreateOrUpdate(ctx, fromRoutineDependencies)
				to.SetRoutineDependencies(ctx, toRoutineDependencies)
			}
		}
	}
}

func (to *FunctionInfo) SyncFieldsDuringRead(ctx context.Context, from FunctionInfo) {
	if !from.InputParams.IsNull() && !from.InputParams.IsUnknown() {
		if toInputParams, ok := to.GetInputParams(ctx); ok {
			if fromInputParams, ok := from.GetInputParams(ctx); ok {
				toInputParams.SyncFieldsDuringRead(ctx, fromInputParams)
				to.SetInputParams(ctx, toInputParams)
			}
		}
	}
	if !from.ReturnParams.IsNull() && !from.ReturnParams.IsUnknown() {
		if toReturnParams, ok := to.GetReturnParams(ctx); ok {
			if fromReturnParams, ok := from.GetReturnParams(ctx); ok {
				toReturnParams.SyncFieldsDuringRead(ctx, fromReturnParams)
				to.SetReturnParams(ctx, toReturnParams)
			}
		}
	}
	if !from.RoutineDependencies.IsNull() && !from.RoutineDependencies.IsUnknown() {
		if toRoutineDependencies, ok := to.GetRoutineDependencies(ctx); ok {
			if fromRoutineDependencies, ok := from.GetRoutineDependencies(ctx); ok {
				toRoutineDependencies.SyncFieldsDuringRead(ctx, fromRoutineDependencies)
				to.SetRoutineDependencies(ctx, toRoutineDependencies)
			}
		}
	}
}

func (m FunctionInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["data_type"] = attrs["data_type"].SetOptional()
	attrs["external_language"] = attrs["external_language"].SetOptional()
	attrs["external_name"] = attrs["external_name"].SetOptional()
	attrs["full_data_type"] = attrs["full_data_type"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["function_id"] = attrs["function_id"].SetOptional()
	attrs["input_params"] = attrs["input_params"].SetOptional()
	attrs["is_deterministic"] = attrs["is_deterministic"].SetOptional()
	attrs["is_null_call"] = attrs["is_null_call"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["parameter_style"] = attrs["parameter_style"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["return_params"] = attrs["return_params"].SetOptional()
	attrs["routine_body"] = attrs["routine_body"].SetOptional()
	attrs["routine_definition"] = attrs["routine_definition"].SetOptional()
	attrs["routine_dependencies"] = attrs["routine_dependencies"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["security_type"] = attrs["security_type"].SetOptional()
	attrs["specific_name"] = attrs["specific_name"].SetOptional()
	attrs["sql_data_access"] = attrs["sql_data_access"].SetOptional()
	attrs["sql_path"] = attrs["sql_path"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FunctionInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FunctionInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"input_params":         reflect.TypeOf(FunctionParameterInfos{}),
		"return_params":        reflect.TypeOf(FunctionParameterInfos{}),
		"routine_dependencies": reflect.TypeOf(DependencyList{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FunctionInfo
// only implements ToObjectValue() and Type().
func (m FunctionInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"browse_only":          m.BrowseOnly,
			"catalog_name":         m.CatalogName,
			"comment":              m.Comment,
			"created_at":           m.CreatedAt,
			"created_by":           m.CreatedBy,
			"data_type":            m.DataType,
			"external_language":    m.ExternalLanguage,
			"external_name":        m.ExternalName,
			"full_data_type":       m.FullDataType,
			"full_name":            m.FullName,
			"function_id":          m.FunctionId,
			"input_params":         m.InputParams,
			"is_deterministic":     m.IsDeterministic,
			"is_null_call":         m.IsNullCall,
			"metastore_id":         m.MetastoreId,
			"name":                 m.Name,
			"owner":                m.Owner,
			"parameter_style":      m.ParameterStyle,
			"properties":           m.Properties,
			"return_params":        m.ReturnParams,
			"routine_body":         m.RoutineBody,
			"routine_definition":   m.RoutineDefinition,
			"routine_dependencies": m.RoutineDependencies,
			"schema_name":          m.SchemaName,
			"security_type":        m.SecurityType,
			"specific_name":        m.SpecificName,
			"sql_data_access":      m.SqlDataAccess,
			"sql_path":             m.SqlPath,
			"updated_at":           m.UpdatedAt,
			"updated_by":           m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FunctionInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"browse_only":          types.BoolType,
			"catalog_name":         types.StringType,
			"comment":              types.StringType,
			"created_at":           types.Int64Type,
			"created_by":           types.StringType,
			"data_type":            types.StringType,
			"external_language":    types.StringType,
			"external_name":        types.StringType,
			"full_data_type":       types.StringType,
			"full_name":            types.StringType,
			"function_id":          types.StringType,
			"input_params":         FunctionParameterInfos{}.Type(ctx),
			"is_deterministic":     types.BoolType,
			"is_null_call":         types.BoolType,
			"metastore_id":         types.StringType,
			"name":                 types.StringType,
			"owner":                types.StringType,
			"parameter_style":      types.StringType,
			"properties":           types.StringType,
			"return_params":        FunctionParameterInfos{}.Type(ctx),
			"routine_body":         types.StringType,
			"routine_definition":   types.StringType,
			"routine_dependencies": DependencyList{}.Type(ctx),
			"schema_name":          types.StringType,
			"security_type":        types.StringType,
			"specific_name":        types.StringType,
			"sql_data_access":      types.StringType,
			"sql_path":             types.StringType,
			"updated_at":           types.Int64Type,
			"updated_by":           types.StringType,
		},
	}
}

// GetInputParams returns the value of the InputParams field in FunctionInfo as
// a FunctionParameterInfos value.
// If the field is unknown or null, the boolean return value is false.
func (m *FunctionInfo) GetInputParams(ctx context.Context) (FunctionParameterInfos, bool) {
	var e FunctionParameterInfos
	if m.InputParams.IsNull() || m.InputParams.IsUnknown() {
		return e, false
	}
	var v FunctionParameterInfos
	d := m.InputParams.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInputParams sets the value of the InputParams field in FunctionInfo.
func (m *FunctionInfo) SetInputParams(ctx context.Context, v FunctionParameterInfos) {
	vs := v.ToObjectValue(ctx)
	m.InputParams = vs
}

// GetReturnParams returns the value of the ReturnParams field in FunctionInfo as
// a FunctionParameterInfos value.
// If the field is unknown or null, the boolean return value is false.
func (m *FunctionInfo) GetReturnParams(ctx context.Context) (FunctionParameterInfos, bool) {
	var e FunctionParameterInfos
	if m.ReturnParams.IsNull() || m.ReturnParams.IsUnknown() {
		return e, false
	}
	var v FunctionParameterInfos
	d := m.ReturnParams.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetReturnParams sets the value of the ReturnParams field in FunctionInfo.
func (m *FunctionInfo) SetReturnParams(ctx context.Context, v FunctionParameterInfos) {
	vs := v.ToObjectValue(ctx)
	m.ReturnParams = vs
}

// GetRoutineDependencies returns the value of the RoutineDependencies field in FunctionInfo as
// a DependencyList value.
// If the field is unknown or null, the boolean return value is false.
func (m *FunctionInfo) GetRoutineDependencies(ctx context.Context) (DependencyList, bool) {
	var e DependencyList
	if m.RoutineDependencies.IsNull() || m.RoutineDependencies.IsUnknown() {
		return e, false
	}
	var v DependencyList
	d := m.RoutineDependencies.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRoutineDependencies sets the value of the RoutineDependencies field in FunctionInfo.
func (m *FunctionInfo) SetRoutineDependencies(ctx context.Context, v DependencyList) {
	vs := v.ToObjectValue(ctx)
	m.RoutineDependencies = vs
}

type FunctionParameterInfo struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Name of Parameter.
	Name types.String `tfsdk:"name"`
	// Default value of the parameter.
	ParameterDefault types.String `tfsdk:"parameter_default"`
	// Function parameter mode.
	ParameterMode types.String `tfsdk:"parameter_mode"`
	// Function parameter type.
	ParameterType types.String `tfsdk:"parameter_type"`
	// Ordinal position of column (starting at position 0).
	Position types.Int64 `tfsdk:"position"`
	// Format of IntervalType.
	TypeIntervalType types.String `tfsdk:"type_interval_type"`
	// Full data type spec, JSON-serialized.
	TypeJson types.String `tfsdk:"type_json"`
	// Name of type (INT, STRUCT, MAP, etc.)
	TypeName types.String `tfsdk:"type_name"`
	// Digits of precision; required on Create for DecimalTypes.
	TypePrecision types.Int64 `tfsdk:"type_precision"`
	// Digits to right of decimal; Required on Create for DecimalTypes.
	TypeScale types.Int64 `tfsdk:"type_scale"`
	// Full data type spec, SQL/catalogString text.
	TypeText types.String `tfsdk:"type_text"`
}

func (to *FunctionParameterInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FunctionParameterInfo) {
}

func (to *FunctionParameterInfo) SyncFieldsDuringRead(ctx context.Context, from FunctionParameterInfo) {
}

func (m FunctionParameterInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["parameter_default"] = attrs["parameter_default"].SetOptional()
	attrs["parameter_mode"] = attrs["parameter_mode"].SetOptional()
	attrs["parameter_type"] = attrs["parameter_type"].SetOptional()
	attrs["position"] = attrs["position"].SetRequired()
	attrs["type_interval_type"] = attrs["type_interval_type"].SetOptional()
	attrs["type_json"] = attrs["type_json"].SetOptional()
	attrs["type_name"] = attrs["type_name"].SetRequired()
	attrs["type_precision"] = attrs["type_precision"].SetOptional()
	attrs["type_scale"] = attrs["type_scale"].SetOptional()
	attrs["type_text"] = attrs["type_text"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FunctionParameterInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FunctionParameterInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FunctionParameterInfo
// only implements ToObjectValue() and Type().
func (m FunctionParameterInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":            m.Comment,
			"name":               m.Name,
			"parameter_default":  m.ParameterDefault,
			"parameter_mode":     m.ParameterMode,
			"parameter_type":     m.ParameterType,
			"position":           m.Position,
			"type_interval_type": m.TypeIntervalType,
			"type_json":          m.TypeJson,
			"type_name":          m.TypeName,
			"type_precision":     m.TypePrecision,
			"type_scale":         m.TypeScale,
			"type_text":          m.TypeText,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FunctionParameterInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":            types.StringType,
			"name":               types.StringType,
			"parameter_default":  types.StringType,
			"parameter_mode":     types.StringType,
			"parameter_type":     types.StringType,
			"position":           types.Int64Type,
			"type_interval_type": types.StringType,
			"type_json":          types.StringType,
			"type_name":          types.StringType,
			"type_precision":     types.Int64Type,
			"type_scale":         types.Int64Type,
			"type_text":          types.StringType,
		},
	}
}

type FunctionParameterInfos struct {
	Parameters types.List `tfsdk:"parameters"`
}

func (to *FunctionParameterInfos) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from FunctionParameterInfos) {
	if !from.Parameters.IsNull() && !from.Parameters.IsUnknown() && to.Parameters.IsNull() && len(from.Parameters.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Parameters, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Parameters = from.Parameters
	}
}

func (to *FunctionParameterInfos) SyncFieldsDuringRead(ctx context.Context, from FunctionParameterInfos) {
	if !from.Parameters.IsNull() && !from.Parameters.IsUnknown() && to.Parameters.IsNull() && len(from.Parameters.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Parameters, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Parameters = from.Parameters
	}
}

func (m FunctionParameterInfos) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["parameters"] = attrs["parameters"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in FunctionParameterInfos.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m FunctionParameterInfos) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"parameters": reflect.TypeOf(FunctionParameterInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, FunctionParameterInfos
// only implements ToObjectValue() and Type().
func (m FunctionParameterInfos) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"parameters": m.Parameters,
		})
}

// Type implements basetypes.ObjectValuable.
func (m FunctionParameterInfos) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"parameters": basetypes.ListType{
				ElemType: FunctionParameterInfo{}.Type(ctx),
			},
		},
	}
}

// GetParameters returns the value of the Parameters field in FunctionParameterInfos as
// a slice of FunctionParameterInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *FunctionParameterInfos) GetParameters(ctx context.Context) ([]FunctionParameterInfo, bool) {
	if m.Parameters.IsNull() || m.Parameters.IsUnknown() {
		return nil, false
	}
	var v []FunctionParameterInfo
	d := m.Parameters.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetParameters sets the value of the Parameters field in FunctionParameterInfos.
func (m *FunctionParameterInfos) SetParameters(ctx context.Context, v []FunctionParameterInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["parameters"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Parameters = types.ListValueMust(t, vs)
}

// GCP temporary credentials for API authentication. Read more at
// https://developers.google.com/identity/protocols/oauth2/service-account
type GcpOauthToken struct {
	OauthToken types.String `tfsdk:"oauth_token"`
}

func (to *GcpOauthToken) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GcpOauthToken) {
}

func (to *GcpOauthToken) SyncFieldsDuringRead(ctx context.Context, from GcpOauthToken) {
}

func (m GcpOauthToken) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["oauth_token"] = attrs["oauth_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GcpOauthToken.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GcpOauthToken) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GcpOauthToken
// only implements ToObjectValue() and Type().
func (m GcpOauthToken) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"oauth_token": m.OauthToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GcpOauthToken) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"oauth_token": types.StringType,
		},
	}
}

type GcpPubsub struct {
	// Unique identifier included in the name of file events managed cloud
	// resources.
	ManagedResourceId types.String `tfsdk:"managed_resource_id"`
	// The Pub/Sub subscription name in the format
	// projects/{project}/subscriptions/{subscription name} Required for
	// provided_pubsub.
	SubscriptionName types.String `tfsdk:"subscription_name"`
}

func (to *GcpPubsub) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GcpPubsub) {
}

func (to *GcpPubsub) SyncFieldsDuringRead(ctx context.Context, from GcpPubsub) {
}

func (m GcpPubsub) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["managed_resource_id"] = attrs["managed_resource_id"].SetComputed()
	attrs["subscription_name"] = attrs["subscription_name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GcpPubsub.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GcpPubsub) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GcpPubsub
// only implements ToObjectValue() and Type().
func (m GcpPubsub) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"managed_resource_id": m.ManagedResourceId,
			"subscription_name":   m.SubscriptionName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GcpPubsub) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"managed_resource_id": types.StringType,
			"subscription_name":   types.StringType,
		},
	}
}

type GenerateTemporaryPathCredentialRequest struct {
	// Optional. When set to true, the service will not validate that the
	// generated credentials can perform write operations, therefore no new
	// paths will be created and the response will not contain valid
	// credentials. Defaults to false.
	DryRun types.Bool `tfsdk:"dry_run"`
	// The operation being performed on the path.
	Operation types.String `tfsdk:"operation"`
	// URL for path-based access.
	Url types.String `tfsdk:"url"`
}

func (to *GenerateTemporaryPathCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryPathCredentialRequest) {
}

func (to *GenerateTemporaryPathCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryPathCredentialRequest) {
}

func (m GenerateTemporaryPathCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["dry_run"] = attrs["dry_run"].SetOptional()
	attrs["operation"] = attrs["operation"].SetRequired()
	attrs["url"] = attrs["url"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryPathCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryPathCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryPathCredentialRequest
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryPathCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"dry_run":   m.DryRun,
			"operation": m.Operation,
			"url":       m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryPathCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"dry_run":   types.BoolType,
			"operation": types.StringType,
			"url":       types.StringType,
		},
	}
}

type GenerateTemporaryPathCredentialResponse struct {
	AwsTempCredentials types.Object `tfsdk:"aws_temp_credentials"`

	AzureAad types.Object `tfsdk:"azure_aad"`

	AzureUserDelegationSas types.Object `tfsdk:"azure_user_delegation_sas"`
	// Server time when the credential will expire, in epoch milliseconds. The
	// API client is advised to cache the credential given this expiration time.
	ExpirationTime types.Int64 `tfsdk:"expiration_time"`

	GcpOauthToken types.Object `tfsdk:"gcp_oauth_token"`

	R2TempCredentials types.Object `tfsdk:"r2_temp_credentials"`
	// The URL of the storage path accessible by the temporary credential.
	Url types.String `tfsdk:"url"`
}

func (to *GenerateTemporaryPathCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryPathCredentialResponse) {
	if !from.AwsTempCredentials.IsNull() && !from.AwsTempCredentials.IsUnknown() {
		if toAwsTempCredentials, ok := to.GetAwsTempCredentials(ctx); ok {
			if fromAwsTempCredentials, ok := from.GetAwsTempCredentials(ctx); ok {
				// Recursively sync the fields of AwsTempCredentials
				toAwsTempCredentials.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsTempCredentials)
				to.SetAwsTempCredentials(ctx, toAwsTempCredentials)
			}
		}
	}
	if !from.AzureAad.IsNull() && !from.AzureAad.IsUnknown() {
		if toAzureAad, ok := to.GetAzureAad(ctx); ok {
			if fromAzureAad, ok := from.GetAzureAad(ctx); ok {
				// Recursively sync the fields of AzureAad
				toAzureAad.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureAad)
				to.SetAzureAad(ctx, toAzureAad)
			}
		}
	}
	if !from.AzureUserDelegationSas.IsNull() && !from.AzureUserDelegationSas.IsUnknown() {
		if toAzureUserDelegationSas, ok := to.GetAzureUserDelegationSas(ctx); ok {
			if fromAzureUserDelegationSas, ok := from.GetAzureUserDelegationSas(ctx); ok {
				// Recursively sync the fields of AzureUserDelegationSas
				toAzureUserDelegationSas.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureUserDelegationSas)
				to.SetAzureUserDelegationSas(ctx, toAzureUserDelegationSas)
			}
		}
	}
	if !from.GcpOauthToken.IsNull() && !from.GcpOauthToken.IsUnknown() {
		if toGcpOauthToken, ok := to.GetGcpOauthToken(ctx); ok {
			if fromGcpOauthToken, ok := from.GetGcpOauthToken(ctx); ok {
				// Recursively sync the fields of GcpOauthToken
				toGcpOauthToken.SyncFieldsDuringCreateOrUpdate(ctx, fromGcpOauthToken)
				to.SetGcpOauthToken(ctx, toGcpOauthToken)
			}
		}
	}
	if !from.R2TempCredentials.IsNull() && !from.R2TempCredentials.IsUnknown() {
		if toR2TempCredentials, ok := to.GetR2TempCredentials(ctx); ok {
			if fromR2TempCredentials, ok := from.GetR2TempCredentials(ctx); ok {
				// Recursively sync the fields of R2TempCredentials
				toR2TempCredentials.SyncFieldsDuringCreateOrUpdate(ctx, fromR2TempCredentials)
				to.SetR2TempCredentials(ctx, toR2TempCredentials)
			}
		}
	}
}

func (to *GenerateTemporaryPathCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryPathCredentialResponse) {
	if !from.AwsTempCredentials.IsNull() && !from.AwsTempCredentials.IsUnknown() {
		if toAwsTempCredentials, ok := to.GetAwsTempCredentials(ctx); ok {
			if fromAwsTempCredentials, ok := from.GetAwsTempCredentials(ctx); ok {
				toAwsTempCredentials.SyncFieldsDuringRead(ctx, fromAwsTempCredentials)
				to.SetAwsTempCredentials(ctx, toAwsTempCredentials)
			}
		}
	}
	if !from.AzureAad.IsNull() && !from.AzureAad.IsUnknown() {
		if toAzureAad, ok := to.GetAzureAad(ctx); ok {
			if fromAzureAad, ok := from.GetAzureAad(ctx); ok {
				toAzureAad.SyncFieldsDuringRead(ctx, fromAzureAad)
				to.SetAzureAad(ctx, toAzureAad)
			}
		}
	}
	if !from.AzureUserDelegationSas.IsNull() && !from.AzureUserDelegationSas.IsUnknown() {
		if toAzureUserDelegationSas, ok := to.GetAzureUserDelegationSas(ctx); ok {
			if fromAzureUserDelegationSas, ok := from.GetAzureUserDelegationSas(ctx); ok {
				toAzureUserDelegationSas.SyncFieldsDuringRead(ctx, fromAzureUserDelegationSas)
				to.SetAzureUserDelegationSas(ctx, toAzureUserDelegationSas)
			}
		}
	}
	if !from.GcpOauthToken.IsNull() && !from.GcpOauthToken.IsUnknown() {
		if toGcpOauthToken, ok := to.GetGcpOauthToken(ctx); ok {
			if fromGcpOauthToken, ok := from.GetGcpOauthToken(ctx); ok {
				toGcpOauthToken.SyncFieldsDuringRead(ctx, fromGcpOauthToken)
				to.SetGcpOauthToken(ctx, toGcpOauthToken)
			}
		}
	}
	if !from.R2TempCredentials.IsNull() && !from.R2TempCredentials.IsUnknown() {
		if toR2TempCredentials, ok := to.GetR2TempCredentials(ctx); ok {
			if fromR2TempCredentials, ok := from.GetR2TempCredentials(ctx); ok {
				toR2TempCredentials.SyncFieldsDuringRead(ctx, fromR2TempCredentials)
				to.SetR2TempCredentials(ctx, toR2TempCredentials)
			}
		}
	}
}

func (m GenerateTemporaryPathCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_temp_credentials"] = attrs["aws_temp_credentials"].SetOptional()
	attrs["azure_aad"] = attrs["azure_aad"].SetOptional()
	attrs["azure_user_delegation_sas"] = attrs["azure_user_delegation_sas"].SetOptional()
	attrs["expiration_time"] = attrs["expiration_time"].SetOptional()
	attrs["gcp_oauth_token"] = attrs["gcp_oauth_token"].SetOptional()
	attrs["r2_temp_credentials"] = attrs["r2_temp_credentials"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryPathCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryPathCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_temp_credentials":      reflect.TypeOf(AwsCredentials{}),
		"azure_aad":                 reflect.TypeOf(AzureActiveDirectoryToken{}),
		"azure_user_delegation_sas": reflect.TypeOf(AzureUserDelegationSas{}),
		"gcp_oauth_token":           reflect.TypeOf(GcpOauthToken{}),
		"r2_temp_credentials":       reflect.TypeOf(R2Credentials{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryPathCredentialResponse
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryPathCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_temp_credentials":      m.AwsTempCredentials,
			"azure_aad":                 m.AzureAad,
			"azure_user_delegation_sas": m.AzureUserDelegationSas,
			"expiration_time":           m.ExpirationTime,
			"gcp_oauth_token":           m.GcpOauthToken,
			"r2_temp_credentials":       m.R2TempCredentials,
			"url":                       m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryPathCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_temp_credentials":      AwsCredentials{}.Type(ctx),
			"azure_aad":                 AzureActiveDirectoryToken{}.Type(ctx),
			"azure_user_delegation_sas": AzureUserDelegationSas{}.Type(ctx),
			"expiration_time":           types.Int64Type,
			"gcp_oauth_token":           GcpOauthToken{}.Type(ctx),
			"r2_temp_credentials":       R2Credentials{}.Type(ctx),
			"url":                       types.StringType,
		},
	}
}

// GetAwsTempCredentials returns the value of the AwsTempCredentials field in GenerateTemporaryPathCredentialResponse as
// a AwsCredentials value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryPathCredentialResponse) GetAwsTempCredentials(ctx context.Context) (AwsCredentials, bool) {
	var e AwsCredentials
	if m.AwsTempCredentials.IsNull() || m.AwsTempCredentials.IsUnknown() {
		return e, false
	}
	var v AwsCredentials
	d := m.AwsTempCredentials.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsTempCredentials sets the value of the AwsTempCredentials field in GenerateTemporaryPathCredentialResponse.
func (m *GenerateTemporaryPathCredentialResponse) SetAwsTempCredentials(ctx context.Context, v AwsCredentials) {
	vs := v.ToObjectValue(ctx)
	m.AwsTempCredentials = vs
}

// GetAzureAad returns the value of the AzureAad field in GenerateTemporaryPathCredentialResponse as
// a AzureActiveDirectoryToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryPathCredentialResponse) GetAzureAad(ctx context.Context) (AzureActiveDirectoryToken, bool) {
	var e AzureActiveDirectoryToken
	if m.AzureAad.IsNull() || m.AzureAad.IsUnknown() {
		return e, false
	}
	var v AzureActiveDirectoryToken
	d := m.AzureAad.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureAad sets the value of the AzureAad field in GenerateTemporaryPathCredentialResponse.
func (m *GenerateTemporaryPathCredentialResponse) SetAzureAad(ctx context.Context, v AzureActiveDirectoryToken) {
	vs := v.ToObjectValue(ctx)
	m.AzureAad = vs
}

// GetAzureUserDelegationSas returns the value of the AzureUserDelegationSas field in GenerateTemporaryPathCredentialResponse as
// a AzureUserDelegationSas value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryPathCredentialResponse) GetAzureUserDelegationSas(ctx context.Context) (AzureUserDelegationSas, bool) {
	var e AzureUserDelegationSas
	if m.AzureUserDelegationSas.IsNull() || m.AzureUserDelegationSas.IsUnknown() {
		return e, false
	}
	var v AzureUserDelegationSas
	d := m.AzureUserDelegationSas.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureUserDelegationSas sets the value of the AzureUserDelegationSas field in GenerateTemporaryPathCredentialResponse.
func (m *GenerateTemporaryPathCredentialResponse) SetAzureUserDelegationSas(ctx context.Context, v AzureUserDelegationSas) {
	vs := v.ToObjectValue(ctx)
	m.AzureUserDelegationSas = vs
}

// GetGcpOauthToken returns the value of the GcpOauthToken field in GenerateTemporaryPathCredentialResponse as
// a GcpOauthToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryPathCredentialResponse) GetGcpOauthToken(ctx context.Context) (GcpOauthToken, bool) {
	var e GcpOauthToken
	if m.GcpOauthToken.IsNull() || m.GcpOauthToken.IsUnknown() {
		return e, false
	}
	var v GcpOauthToken
	d := m.GcpOauthToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetGcpOauthToken sets the value of the GcpOauthToken field in GenerateTemporaryPathCredentialResponse.
func (m *GenerateTemporaryPathCredentialResponse) SetGcpOauthToken(ctx context.Context, v GcpOauthToken) {
	vs := v.ToObjectValue(ctx)
	m.GcpOauthToken = vs
}

// GetR2TempCredentials returns the value of the R2TempCredentials field in GenerateTemporaryPathCredentialResponse as
// a R2Credentials value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryPathCredentialResponse) GetR2TempCredentials(ctx context.Context) (R2Credentials, bool) {
	var e R2Credentials
	if m.R2TempCredentials.IsNull() || m.R2TempCredentials.IsUnknown() {
		return e, false
	}
	var v R2Credentials
	d := m.R2TempCredentials.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetR2TempCredentials sets the value of the R2TempCredentials field in GenerateTemporaryPathCredentialResponse.
func (m *GenerateTemporaryPathCredentialResponse) SetR2TempCredentials(ctx context.Context, v R2Credentials) {
	vs := v.ToObjectValue(ctx)
	m.R2TempCredentials = vs
}

// The Azure cloud options to customize the requested temporary credential
type GenerateTemporaryServiceCredentialAzureOptions struct {
	// The resources to which the temporary Azure credential should apply. These
	// resources are the scopes that are passed to the token provider (see
	// https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python)
	Resources types.List `tfsdk:"resources"`
}

func (to *GenerateTemporaryServiceCredentialAzureOptions) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryServiceCredentialAzureOptions) {
	if !from.Resources.IsNull() && !from.Resources.IsUnknown() && to.Resources.IsNull() && len(from.Resources.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Resources, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Resources = from.Resources
	}
}

func (to *GenerateTemporaryServiceCredentialAzureOptions) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryServiceCredentialAzureOptions) {
	if !from.Resources.IsNull() && !from.Resources.IsUnknown() && to.Resources.IsNull() && len(from.Resources.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Resources, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Resources = from.Resources
	}
}

func (m GenerateTemporaryServiceCredentialAzureOptions) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["resources"] = attrs["resources"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryServiceCredentialAzureOptions.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryServiceCredentialAzureOptions) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"resources": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryServiceCredentialAzureOptions
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryServiceCredentialAzureOptions) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"resources": m.Resources,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryServiceCredentialAzureOptions) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"resources": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetResources returns the value of the Resources field in GenerateTemporaryServiceCredentialAzureOptions as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryServiceCredentialAzureOptions) GetResources(ctx context.Context) ([]types.String, bool) {
	if m.Resources.IsNull() || m.Resources.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Resources.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetResources sets the value of the Resources field in GenerateTemporaryServiceCredentialAzureOptions.
func (m *GenerateTemporaryServiceCredentialAzureOptions) SetResources(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["resources"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Resources = types.ListValueMust(t, vs)
}

// The GCP cloud options to customize the requested temporary credential
type GenerateTemporaryServiceCredentialGcpOptions struct {
	// The scopes to which the temporary GCP credential should apply. These
	// resources are the scopes that are passed to the token provider (see
	// https://google-auth.readthedocs.io/en/latest/reference/google.auth.html#google.auth.credentials.Credentials)
	Scopes types.List `tfsdk:"scopes"`
}

func (to *GenerateTemporaryServiceCredentialGcpOptions) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryServiceCredentialGcpOptions) {
	if !from.Scopes.IsNull() && !from.Scopes.IsUnknown() && to.Scopes.IsNull() && len(from.Scopes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Scopes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Scopes = from.Scopes
	}
}

func (to *GenerateTemporaryServiceCredentialGcpOptions) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryServiceCredentialGcpOptions) {
	if !from.Scopes.IsNull() && !from.Scopes.IsUnknown() && to.Scopes.IsNull() && len(from.Scopes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Scopes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Scopes = from.Scopes
	}
}

func (m GenerateTemporaryServiceCredentialGcpOptions) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["scopes"] = attrs["scopes"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryServiceCredentialGcpOptions.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryServiceCredentialGcpOptions) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"scopes": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryServiceCredentialGcpOptions
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryServiceCredentialGcpOptions) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"scopes": m.Scopes,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryServiceCredentialGcpOptions) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetScopes returns the value of the Scopes field in GenerateTemporaryServiceCredentialGcpOptions as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryServiceCredentialGcpOptions) GetScopes(ctx context.Context) ([]types.String, bool) {
	if m.Scopes.IsNull() || m.Scopes.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Scopes.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetScopes sets the value of the Scopes field in GenerateTemporaryServiceCredentialGcpOptions.
func (m *GenerateTemporaryServiceCredentialGcpOptions) SetScopes(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["scopes"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Scopes = types.ListValueMust(t, vs)
}

type GenerateTemporaryServiceCredentialRequest struct {
	AzureOptions types.Object `tfsdk:"azure_options"`
	// The name of the service credential used to generate a temporary
	// credential
	CredentialName types.String `tfsdk:"credential_name"`

	GcpOptions types.Object `tfsdk:"gcp_options"`
}

func (to *GenerateTemporaryServiceCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryServiceCredentialRequest) {
	if !from.AzureOptions.IsNull() && !from.AzureOptions.IsUnknown() {
		if toAzureOptions, ok := to.GetAzureOptions(ctx); ok {
			if fromAzureOptions, ok := from.GetAzureOptions(ctx); ok {
				// Recursively sync the fields of AzureOptions
				toAzureOptions.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureOptions)
				to.SetAzureOptions(ctx, toAzureOptions)
			}
		}
	}
	if !from.GcpOptions.IsNull() && !from.GcpOptions.IsUnknown() {
		if toGcpOptions, ok := to.GetGcpOptions(ctx); ok {
			if fromGcpOptions, ok := from.GetGcpOptions(ctx); ok {
				// Recursively sync the fields of GcpOptions
				toGcpOptions.SyncFieldsDuringCreateOrUpdate(ctx, fromGcpOptions)
				to.SetGcpOptions(ctx, toGcpOptions)
			}
		}
	}
}

func (to *GenerateTemporaryServiceCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryServiceCredentialRequest) {
	if !from.AzureOptions.IsNull() && !from.AzureOptions.IsUnknown() {
		if toAzureOptions, ok := to.GetAzureOptions(ctx); ok {
			if fromAzureOptions, ok := from.GetAzureOptions(ctx); ok {
				toAzureOptions.SyncFieldsDuringRead(ctx, fromAzureOptions)
				to.SetAzureOptions(ctx, toAzureOptions)
			}
		}
	}
	if !from.GcpOptions.IsNull() && !from.GcpOptions.IsUnknown() {
		if toGcpOptions, ok := to.GetGcpOptions(ctx); ok {
			if fromGcpOptions, ok := from.GetGcpOptions(ctx); ok {
				toGcpOptions.SyncFieldsDuringRead(ctx, fromGcpOptions)
				to.SetGcpOptions(ctx, toGcpOptions)
			}
		}
	}
}

func (m GenerateTemporaryServiceCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["azure_options"] = attrs["azure_options"].SetOptional()
	attrs["credential_name"] = attrs["credential_name"].SetRequired()
	attrs["gcp_options"] = attrs["gcp_options"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryServiceCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryServiceCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"azure_options": reflect.TypeOf(GenerateTemporaryServiceCredentialAzureOptions{}),
		"gcp_options":   reflect.TypeOf(GenerateTemporaryServiceCredentialGcpOptions{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryServiceCredentialRequest
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryServiceCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"azure_options":   m.AzureOptions,
			"credential_name": m.CredentialName,
			"gcp_options":     m.GcpOptions,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryServiceCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"azure_options":   GenerateTemporaryServiceCredentialAzureOptions{}.Type(ctx),
			"credential_name": types.StringType,
			"gcp_options":     GenerateTemporaryServiceCredentialGcpOptions{}.Type(ctx),
		},
	}
}

// GetAzureOptions returns the value of the AzureOptions field in GenerateTemporaryServiceCredentialRequest as
// a GenerateTemporaryServiceCredentialAzureOptions value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryServiceCredentialRequest) GetAzureOptions(ctx context.Context) (GenerateTemporaryServiceCredentialAzureOptions, bool) {
	var e GenerateTemporaryServiceCredentialAzureOptions
	if m.AzureOptions.IsNull() || m.AzureOptions.IsUnknown() {
		return e, false
	}
	var v GenerateTemporaryServiceCredentialAzureOptions
	d := m.AzureOptions.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureOptions sets the value of the AzureOptions field in GenerateTemporaryServiceCredentialRequest.
func (m *GenerateTemporaryServiceCredentialRequest) SetAzureOptions(ctx context.Context, v GenerateTemporaryServiceCredentialAzureOptions) {
	vs := v.ToObjectValue(ctx)
	m.AzureOptions = vs
}

// GetGcpOptions returns the value of the GcpOptions field in GenerateTemporaryServiceCredentialRequest as
// a GenerateTemporaryServiceCredentialGcpOptions value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryServiceCredentialRequest) GetGcpOptions(ctx context.Context) (GenerateTemporaryServiceCredentialGcpOptions, bool) {
	var e GenerateTemporaryServiceCredentialGcpOptions
	if m.GcpOptions.IsNull() || m.GcpOptions.IsUnknown() {
		return e, false
	}
	var v GenerateTemporaryServiceCredentialGcpOptions
	d := m.GcpOptions.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetGcpOptions sets the value of the GcpOptions field in GenerateTemporaryServiceCredentialRequest.
func (m *GenerateTemporaryServiceCredentialRequest) SetGcpOptions(ctx context.Context, v GenerateTemporaryServiceCredentialGcpOptions) {
	vs := v.ToObjectValue(ctx)
	m.GcpOptions = vs
}

type GenerateTemporaryTableCredentialRequest struct {
	// The operation performed against the table data, either READ or
	// READ_WRITE. If READ_WRITE is specified, the credentials returned will
	// have write permissions, otherwise, it will be read only.
	Operation types.String `tfsdk:"operation"`
	// UUID of the table to read or write.
	TableId types.String `tfsdk:"table_id"`
}

func (to *GenerateTemporaryTableCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryTableCredentialRequest) {
}

func (to *GenerateTemporaryTableCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryTableCredentialRequest) {
}

func (m GenerateTemporaryTableCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["operation"] = attrs["operation"].SetOptional()
	attrs["table_id"] = attrs["table_id"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryTableCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryTableCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryTableCredentialRequest
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryTableCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"operation": m.Operation,
			"table_id":  m.TableId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryTableCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"operation": types.StringType,
			"table_id":  types.StringType,
		},
	}
}

type GenerateTemporaryTableCredentialResponse struct {
	AwsTempCredentials types.Object `tfsdk:"aws_temp_credentials"`

	AzureAad types.Object `tfsdk:"azure_aad"`

	AzureUserDelegationSas types.Object `tfsdk:"azure_user_delegation_sas"`
	// Server time when the credential will expire, in epoch milliseconds. The
	// API client is advised to cache the credential given this expiration time.
	ExpirationTime types.Int64 `tfsdk:"expiration_time"`

	GcpOauthToken types.Object `tfsdk:"gcp_oauth_token"`

	R2TempCredentials types.Object `tfsdk:"r2_temp_credentials"`
	// The URL of the storage path accessible by the temporary credential.
	Url types.String `tfsdk:"url"`
}

func (to *GenerateTemporaryTableCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GenerateTemporaryTableCredentialResponse) {
	if !from.AwsTempCredentials.IsNull() && !from.AwsTempCredentials.IsUnknown() {
		if toAwsTempCredentials, ok := to.GetAwsTempCredentials(ctx); ok {
			if fromAwsTempCredentials, ok := from.GetAwsTempCredentials(ctx); ok {
				// Recursively sync the fields of AwsTempCredentials
				toAwsTempCredentials.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsTempCredentials)
				to.SetAwsTempCredentials(ctx, toAwsTempCredentials)
			}
		}
	}
	if !from.AzureAad.IsNull() && !from.AzureAad.IsUnknown() {
		if toAzureAad, ok := to.GetAzureAad(ctx); ok {
			if fromAzureAad, ok := from.GetAzureAad(ctx); ok {
				// Recursively sync the fields of AzureAad
				toAzureAad.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureAad)
				to.SetAzureAad(ctx, toAzureAad)
			}
		}
	}
	if !from.AzureUserDelegationSas.IsNull() && !from.AzureUserDelegationSas.IsUnknown() {
		if toAzureUserDelegationSas, ok := to.GetAzureUserDelegationSas(ctx); ok {
			if fromAzureUserDelegationSas, ok := from.GetAzureUserDelegationSas(ctx); ok {
				// Recursively sync the fields of AzureUserDelegationSas
				toAzureUserDelegationSas.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureUserDelegationSas)
				to.SetAzureUserDelegationSas(ctx, toAzureUserDelegationSas)
			}
		}
	}
	if !from.GcpOauthToken.IsNull() && !from.GcpOauthToken.IsUnknown() {
		if toGcpOauthToken, ok := to.GetGcpOauthToken(ctx); ok {
			if fromGcpOauthToken, ok := from.GetGcpOauthToken(ctx); ok {
				// Recursively sync the fields of GcpOauthToken
				toGcpOauthToken.SyncFieldsDuringCreateOrUpdate(ctx, fromGcpOauthToken)
				to.SetGcpOauthToken(ctx, toGcpOauthToken)
			}
		}
	}
	if !from.R2TempCredentials.IsNull() && !from.R2TempCredentials.IsUnknown() {
		if toR2TempCredentials, ok := to.GetR2TempCredentials(ctx); ok {
			if fromR2TempCredentials, ok := from.GetR2TempCredentials(ctx); ok {
				// Recursively sync the fields of R2TempCredentials
				toR2TempCredentials.SyncFieldsDuringCreateOrUpdate(ctx, fromR2TempCredentials)
				to.SetR2TempCredentials(ctx, toR2TempCredentials)
			}
		}
	}
}

func (to *GenerateTemporaryTableCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from GenerateTemporaryTableCredentialResponse) {
	if !from.AwsTempCredentials.IsNull() && !from.AwsTempCredentials.IsUnknown() {
		if toAwsTempCredentials, ok := to.GetAwsTempCredentials(ctx); ok {
			if fromAwsTempCredentials, ok := from.GetAwsTempCredentials(ctx); ok {
				toAwsTempCredentials.SyncFieldsDuringRead(ctx, fromAwsTempCredentials)
				to.SetAwsTempCredentials(ctx, toAwsTempCredentials)
			}
		}
	}
	if !from.AzureAad.IsNull() && !from.AzureAad.IsUnknown() {
		if toAzureAad, ok := to.GetAzureAad(ctx); ok {
			if fromAzureAad, ok := from.GetAzureAad(ctx); ok {
				toAzureAad.SyncFieldsDuringRead(ctx, fromAzureAad)
				to.SetAzureAad(ctx, toAzureAad)
			}
		}
	}
	if !from.AzureUserDelegationSas.IsNull() && !from.AzureUserDelegationSas.IsUnknown() {
		if toAzureUserDelegationSas, ok := to.GetAzureUserDelegationSas(ctx); ok {
			if fromAzureUserDelegationSas, ok := from.GetAzureUserDelegationSas(ctx); ok {
				toAzureUserDelegationSas.SyncFieldsDuringRead(ctx, fromAzureUserDelegationSas)
				to.SetAzureUserDelegationSas(ctx, toAzureUserDelegationSas)
			}
		}
	}
	if !from.GcpOauthToken.IsNull() && !from.GcpOauthToken.IsUnknown() {
		if toGcpOauthToken, ok := to.GetGcpOauthToken(ctx); ok {
			if fromGcpOauthToken, ok := from.GetGcpOauthToken(ctx); ok {
				toGcpOauthToken.SyncFieldsDuringRead(ctx, fromGcpOauthToken)
				to.SetGcpOauthToken(ctx, toGcpOauthToken)
			}
		}
	}
	if !from.R2TempCredentials.IsNull() && !from.R2TempCredentials.IsUnknown() {
		if toR2TempCredentials, ok := to.GetR2TempCredentials(ctx); ok {
			if fromR2TempCredentials, ok := from.GetR2TempCredentials(ctx); ok {
				toR2TempCredentials.SyncFieldsDuringRead(ctx, fromR2TempCredentials)
				to.SetR2TempCredentials(ctx, toR2TempCredentials)
			}
		}
	}
}

func (m GenerateTemporaryTableCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_temp_credentials"] = attrs["aws_temp_credentials"].SetOptional()
	attrs["azure_aad"] = attrs["azure_aad"].SetOptional()
	attrs["azure_user_delegation_sas"] = attrs["azure_user_delegation_sas"].SetOptional()
	attrs["expiration_time"] = attrs["expiration_time"].SetOptional()
	attrs["gcp_oauth_token"] = attrs["gcp_oauth_token"].SetOptional()
	attrs["r2_temp_credentials"] = attrs["r2_temp_credentials"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GenerateTemporaryTableCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GenerateTemporaryTableCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_temp_credentials":      reflect.TypeOf(AwsCredentials{}),
		"azure_aad":                 reflect.TypeOf(AzureActiveDirectoryToken{}),
		"azure_user_delegation_sas": reflect.TypeOf(AzureUserDelegationSas{}),
		"gcp_oauth_token":           reflect.TypeOf(GcpOauthToken{}),
		"r2_temp_credentials":       reflect.TypeOf(R2Credentials{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GenerateTemporaryTableCredentialResponse
// only implements ToObjectValue() and Type().
func (m GenerateTemporaryTableCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_temp_credentials":      m.AwsTempCredentials,
			"azure_aad":                 m.AzureAad,
			"azure_user_delegation_sas": m.AzureUserDelegationSas,
			"expiration_time":           m.ExpirationTime,
			"gcp_oauth_token":           m.GcpOauthToken,
			"r2_temp_credentials":       m.R2TempCredentials,
			"url":                       m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GenerateTemporaryTableCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_temp_credentials":      AwsCredentials{}.Type(ctx),
			"azure_aad":                 AzureActiveDirectoryToken{}.Type(ctx),
			"azure_user_delegation_sas": AzureUserDelegationSas{}.Type(ctx),
			"expiration_time":           types.Int64Type,
			"gcp_oauth_token":           GcpOauthToken{}.Type(ctx),
			"r2_temp_credentials":       R2Credentials{}.Type(ctx),
			"url":                       types.StringType,
		},
	}
}

// GetAwsTempCredentials returns the value of the AwsTempCredentials field in GenerateTemporaryTableCredentialResponse as
// a AwsCredentials value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryTableCredentialResponse) GetAwsTempCredentials(ctx context.Context) (AwsCredentials, bool) {
	var e AwsCredentials
	if m.AwsTempCredentials.IsNull() || m.AwsTempCredentials.IsUnknown() {
		return e, false
	}
	var v AwsCredentials
	d := m.AwsTempCredentials.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsTempCredentials sets the value of the AwsTempCredentials field in GenerateTemporaryTableCredentialResponse.
func (m *GenerateTemporaryTableCredentialResponse) SetAwsTempCredentials(ctx context.Context, v AwsCredentials) {
	vs := v.ToObjectValue(ctx)
	m.AwsTempCredentials = vs
}

// GetAzureAad returns the value of the AzureAad field in GenerateTemporaryTableCredentialResponse as
// a AzureActiveDirectoryToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryTableCredentialResponse) GetAzureAad(ctx context.Context) (AzureActiveDirectoryToken, bool) {
	var e AzureActiveDirectoryToken
	if m.AzureAad.IsNull() || m.AzureAad.IsUnknown() {
		return e, false
	}
	var v AzureActiveDirectoryToken
	d := m.AzureAad.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureAad sets the value of the AzureAad field in GenerateTemporaryTableCredentialResponse.
func (m *GenerateTemporaryTableCredentialResponse) SetAzureAad(ctx context.Context, v AzureActiveDirectoryToken) {
	vs := v.ToObjectValue(ctx)
	m.AzureAad = vs
}

// GetAzureUserDelegationSas returns the value of the AzureUserDelegationSas field in GenerateTemporaryTableCredentialResponse as
// a AzureUserDelegationSas value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryTableCredentialResponse) GetAzureUserDelegationSas(ctx context.Context) (AzureUserDelegationSas, bool) {
	var e AzureUserDelegationSas
	if m.AzureUserDelegationSas.IsNull() || m.AzureUserDelegationSas.IsUnknown() {
		return e, false
	}
	var v AzureUserDelegationSas
	d := m.AzureUserDelegationSas.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureUserDelegationSas sets the value of the AzureUserDelegationSas field in GenerateTemporaryTableCredentialResponse.
func (m *GenerateTemporaryTableCredentialResponse) SetAzureUserDelegationSas(ctx context.Context, v AzureUserDelegationSas) {
	vs := v.ToObjectValue(ctx)
	m.AzureUserDelegationSas = vs
}

// GetGcpOauthToken returns the value of the GcpOauthToken field in GenerateTemporaryTableCredentialResponse as
// a GcpOauthToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryTableCredentialResponse) GetGcpOauthToken(ctx context.Context) (GcpOauthToken, bool) {
	var e GcpOauthToken
	if m.GcpOauthToken.IsNull() || m.GcpOauthToken.IsUnknown() {
		return e, false
	}
	var v GcpOauthToken
	d := m.GcpOauthToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetGcpOauthToken sets the value of the GcpOauthToken field in GenerateTemporaryTableCredentialResponse.
func (m *GenerateTemporaryTableCredentialResponse) SetGcpOauthToken(ctx context.Context, v GcpOauthToken) {
	vs := v.ToObjectValue(ctx)
	m.GcpOauthToken = vs
}

// GetR2TempCredentials returns the value of the R2TempCredentials field in GenerateTemporaryTableCredentialResponse as
// a R2Credentials value.
// If the field is unknown or null, the boolean return value is false.
func (m *GenerateTemporaryTableCredentialResponse) GetR2TempCredentials(ctx context.Context) (R2Credentials, bool) {
	var e R2Credentials
	if m.R2TempCredentials.IsNull() || m.R2TempCredentials.IsUnknown() {
		return e, false
	}
	var v R2Credentials
	d := m.R2TempCredentials.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetR2TempCredentials sets the value of the R2TempCredentials field in GenerateTemporaryTableCredentialResponse.
func (m *GenerateTemporaryTableCredentialResponse) SetR2TempCredentials(ctx context.Context, v R2Credentials) {
	vs := v.ToObjectValue(ctx)
	m.R2TempCredentials = vs
}

type GetAccessRequestDestinationsRequest struct {
	// The full name of the securable.
	FullName types.String `tfsdk:"-"`
	// The type of the securable.
	SecurableType types.String `tfsdk:"-"`
}

func (to *GetAccessRequestDestinationsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetAccessRequestDestinationsRequest) {
}

func (to *GetAccessRequestDestinationsRequest) SyncFieldsDuringRead(ctx context.Context, from GetAccessRequestDestinationsRequest) {
}

func (m GetAccessRequestDestinationsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["securable_type"] = attrs["securable_type"].SetRequired()
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetAccessRequestDestinationsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetAccessRequestDestinationsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetAccessRequestDestinationsRequest
// only implements ToObjectValue() and Type().
func (m GetAccessRequestDestinationsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":      m.FullName,
			"securable_type": m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetAccessRequestDestinationsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":      types.StringType,
			"securable_type": types.StringType,
		},
	}
}

type GetAccountMetastoreAssignmentRequest struct {
	// Workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *GetAccountMetastoreAssignmentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetAccountMetastoreAssignmentRequest) {
}

func (to *GetAccountMetastoreAssignmentRequest) SyncFieldsDuringRead(ctx context.Context, from GetAccountMetastoreAssignmentRequest) {
}

func (m GetAccountMetastoreAssignmentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetAccountMetastoreAssignmentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetAccountMetastoreAssignmentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetAccountMetastoreAssignmentRequest
// only implements ToObjectValue() and Type().
func (m GetAccountMetastoreAssignmentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"workspace_id": m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetAccountMetastoreAssignmentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"workspace_id": types.Int64Type,
		},
	}
}

type GetAccountMetastoreRequest struct {
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
}

func (to *GetAccountMetastoreRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetAccountMetastoreRequest) {
}

func (to *GetAccountMetastoreRequest) SyncFieldsDuringRead(ctx context.Context, from GetAccountMetastoreRequest) {
}

func (m GetAccountMetastoreRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetAccountMetastoreRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetAccountMetastoreRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetAccountMetastoreRequest
// only implements ToObjectValue() and Type().
func (m GetAccountMetastoreRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id": m.MetastoreId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetAccountMetastoreRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id": types.StringType,
		},
	}
}

type GetAccountStorageCredentialRequest struct {
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
	// Required. Name of the storage credential.
	StorageCredentialName types.String `tfsdk:"-"`
}

func (to *GetAccountStorageCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetAccountStorageCredentialRequest) {
}

func (to *GetAccountStorageCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from GetAccountStorageCredentialRequest) {
}

func (m GetAccountStorageCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["storage_credential_name"] = attrs["storage_credential_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetAccountStorageCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetAccountStorageCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetAccountStorageCredentialRequest
// only implements ToObjectValue() and Type().
func (m GetAccountStorageCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id":            m.MetastoreId,
			"storage_credential_name": m.StorageCredentialName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetAccountStorageCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id":            types.StringType,
			"storage_credential_name": types.StringType,
		},
	}
}

type GetArtifactAllowlistRequest struct {
	// The artifact type of the allowlist.
	ArtifactType types.String `tfsdk:"-"`
}

func (to *GetArtifactAllowlistRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetArtifactAllowlistRequest) {
}

func (to *GetArtifactAllowlistRequest) SyncFieldsDuringRead(ctx context.Context, from GetArtifactAllowlistRequest) {
}

func (m GetArtifactAllowlistRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["artifact_type"] = attrs["artifact_type"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetArtifactAllowlistRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetArtifactAllowlistRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetArtifactAllowlistRequest
// only implements ToObjectValue() and Type().
func (m GetArtifactAllowlistRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"artifact_type": m.ArtifactType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetArtifactAllowlistRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"artifact_type": types.StringType,
		},
	}
}

type GetBindingsRequest struct {
	// Maximum number of workspace bindings to return. - When set to 0, the page
	// length is set to a server configured value (recommended); - When set to a
	// value greater than 0, the page length is the minimum of this value and a
	// server configured value; - When set to a value less than 0, an invalid
	// parameter error is returned; - If not set, all the workspace bindings are
	// returned (not recommended).
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
	// The name of the securable.
	SecurableName types.String `tfsdk:"-"`
	// The type of the securable to bind to a workspace (catalog,
	// storage_credential, credential, or external_location).
	SecurableType types.String `tfsdk:"-"`
}

func (to *GetBindingsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetBindingsRequest) {
}

func (to *GetBindingsRequest) SyncFieldsDuringRead(ctx context.Context, from GetBindingsRequest) {
}

func (m GetBindingsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["securable_type"] = attrs["securable_type"].SetRequired()
	attrs["securable_name"] = attrs["securable_name"].SetRequired()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetBindingsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetBindingsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetBindingsRequest
// only implements ToObjectValue() and Type().
func (m GetBindingsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
			"securable_name": m.SecurableName,
			"securable_type": m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetBindingsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
			"securable_name": types.StringType,
			"securable_type": types.StringType,
		},
	}
}

type GetByAliasRequest struct {
	// The name of the alias
	Alias types.String `tfsdk:"-"`
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"-"`
	// Whether to include aliases associated with the model version in the
	// response
	IncludeAliases types.Bool `tfsdk:"-"`
}

func (to *GetByAliasRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetByAliasRequest) {
}

func (to *GetByAliasRequest) SyncFieldsDuringRead(ctx context.Context, from GetByAliasRequest) {
}

func (m GetByAliasRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["alias"] = attrs["alias"].SetRequired()
	attrs["include_aliases"] = attrs["include_aliases"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetByAliasRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetByAliasRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetByAliasRequest
// only implements ToObjectValue() and Type().
func (m GetByAliasRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"alias":           m.Alias,
			"full_name":       m.FullName,
			"include_aliases": m.IncludeAliases,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetByAliasRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"alias":           types.StringType,
			"full_name":       types.StringType,
			"include_aliases": types.BoolType,
		},
	}
}

type GetCatalogRequest struct {
	// Whether to include catalogs in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// The name of the catalog.
	Name types.String `tfsdk:"-"`
}

func (to *GetCatalogRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetCatalogRequest) {
}

func (to *GetCatalogRequest) SyncFieldsDuringRead(ctx context.Context, from GetCatalogRequest) {
}

func (m GetCatalogRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetCatalogRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetCatalogRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetCatalogRequest
// only implements ToObjectValue() and Type().
func (m GetCatalogRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_browse": m.IncludeBrowse,
			"name":           m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetCatalogRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_browse": types.BoolType,
			"name":           types.StringType,
		},
	}
}

type GetCatalogWorkspaceBindingsResponse struct {
	// A list of workspace IDs
	Workspaces types.List `tfsdk:"workspaces"`
}

func (to *GetCatalogWorkspaceBindingsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetCatalogWorkspaceBindingsResponse) {
	if !from.Workspaces.IsNull() && !from.Workspaces.IsUnknown() && to.Workspaces.IsNull() && len(from.Workspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Workspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Workspaces = from.Workspaces
	}
}

func (to *GetCatalogWorkspaceBindingsResponse) SyncFieldsDuringRead(ctx context.Context, from GetCatalogWorkspaceBindingsResponse) {
	if !from.Workspaces.IsNull() && !from.Workspaces.IsUnknown() && to.Workspaces.IsNull() && len(from.Workspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Workspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Workspaces = from.Workspaces
	}
}

func (m GetCatalogWorkspaceBindingsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["workspaces"] = attrs["workspaces"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetCatalogWorkspaceBindingsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetCatalogWorkspaceBindingsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"workspaces": reflect.TypeOf(types.Int64{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetCatalogWorkspaceBindingsResponse
// only implements ToObjectValue() and Type().
func (m GetCatalogWorkspaceBindingsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"workspaces": m.Workspaces,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetCatalogWorkspaceBindingsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"workspaces": basetypes.ListType{
				ElemType: types.Int64Type,
			},
		},
	}
}

// GetWorkspaces returns the value of the Workspaces field in GetCatalogWorkspaceBindingsResponse as
// a slice of types.Int64 values.
// If the field is unknown or null, the boolean return value is false.
func (m *GetCatalogWorkspaceBindingsResponse) GetWorkspaces(ctx context.Context) ([]types.Int64, bool) {
	if m.Workspaces.IsNull() || m.Workspaces.IsUnknown() {
		return nil, false
	}
	var v []types.Int64
	d := m.Workspaces.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetWorkspaces sets the value of the Workspaces field in GetCatalogWorkspaceBindingsResponse.
func (m *GetCatalogWorkspaceBindingsResponse) SetWorkspaces(ctx context.Context, v []types.Int64) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["workspaces"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Workspaces = types.ListValueMust(t, vs)
}

type GetConnectionRequest struct {
	// Name of the connection.
	Name types.String `tfsdk:"-"`
}

func (to *GetConnectionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetConnectionRequest) {
}

func (to *GetConnectionRequest) SyncFieldsDuringRead(ctx context.Context, from GetConnectionRequest) {
}

func (m GetConnectionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetConnectionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetConnectionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetConnectionRequest
// only implements ToObjectValue() and Type().
func (m GetConnectionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetConnectionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type GetCredentialRequest struct {
	// Name of the credential.
	NameArg types.String `tfsdk:"-"`
}

func (to *GetCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetCredentialRequest) {
}

func (to *GetCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from GetCredentialRequest) {
}

func (m GetCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name_arg"] = attrs["name_arg"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetCredentialRequest
// only implements ToObjectValue() and Type().
func (m GetCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name_arg": m.NameArg,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name_arg": types.StringType,
		},
	}
}

type GetEffectiveRequest struct {
	// Full name of securable.
	FullName types.String `tfsdk:"-"`
	// Specifies the maximum number of privileges to return (page length). Every
	// EffectivePrivilegeAssignment present in a single page response is
	// guaranteed to contain all the effective privileges granted on (or
	// inherited by) the requested Securable for the respective principal.
	//
	// If not set, all the effective permissions are returned. If set to -
	// lesser than 0: invalid parameter error - 0: page length is set to a
	// server configured value - lesser than 150 but greater than 0: invalid
	// parameter error (this is to ensure that server is able to return at least
	// one complete EffectivePrivilegeAssignment in a single page response) -
	// greater than (or equal to) 150: page length is the minimum of this value
	// and a server configured value
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque token for the next page of results (pagination).
	PageToken types.String `tfsdk:"-"`
	// If provided, only the effective permissions for the specified principal
	// (user or group) are returned.
	Principal types.String `tfsdk:"-"`
	// Type of securable.
	SecurableType types.String `tfsdk:"-"`
}

func (to *GetEffectiveRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetEffectiveRequest) {
}

func (to *GetEffectiveRequest) SyncFieldsDuringRead(ctx context.Context, from GetEffectiveRequest) {
}

func (m GetEffectiveRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["securable_type"] = attrs["securable_type"].SetRequired()
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["principal"] = attrs["principal"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetEffectiveRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetEffectiveRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetEffectiveRequest
// only implements ToObjectValue() and Type().
func (m GetEffectiveRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":      m.FullName,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
			"principal":      m.Principal,
			"securable_type": m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetEffectiveRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":      types.StringType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
			"principal":      types.StringType,
			"securable_type": types.StringType,
		},
	}
}

type GetEntityTagAssignmentRequest struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName types.String `tfsdk:"-"`
	// The type of the entity to which the tag is assigned. Allowed values are:
	// catalogs, schemas, tables, columns, volumes.
	EntityType types.String `tfsdk:"-"`
	// Required. The key of the tag
	TagKey types.String `tfsdk:"-"`
}

func (to *GetEntityTagAssignmentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetEntityTagAssignmentRequest) {
}

func (to *GetEntityTagAssignmentRequest) SyncFieldsDuringRead(ctx context.Context, from GetEntityTagAssignmentRequest) {
}

func (m GetEntityTagAssignmentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["entity_type"] = attrs["entity_type"].SetRequired()
	attrs["entity_name"] = attrs["entity_name"].SetRequired()
	attrs["tag_key"] = attrs["tag_key"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetEntityTagAssignmentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetEntityTagAssignmentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetEntityTagAssignmentRequest
// only implements ToObjectValue() and Type().
func (m GetEntityTagAssignmentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"entity_name": m.EntityName,
			"entity_type": m.EntityType,
			"tag_key":     m.TagKey,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetEntityTagAssignmentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"entity_name": types.StringType,
			"entity_type": types.StringType,
			"tag_key":     types.StringType,
		},
	}
}

type GetExternalLocationRequest struct {
	// Whether to include external locations in the response for which the
	// principal can only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Name of the external location.
	Name types.String `tfsdk:"-"`
}

func (to *GetExternalLocationRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetExternalLocationRequest) {
}

func (to *GetExternalLocationRequest) SyncFieldsDuringRead(ctx context.Context, from GetExternalLocationRequest) {
}

func (m GetExternalLocationRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetExternalLocationRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetExternalLocationRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetExternalLocationRequest
// only implements ToObjectValue() and Type().
func (m GetExternalLocationRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_browse": m.IncludeBrowse,
			"name":           m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetExternalLocationRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_browse": types.BoolType,
			"name":           types.StringType,
		},
	}
}

type GetExternalMetadataRequest struct {
	Name types.String `tfsdk:"-"`
}

func (to *GetExternalMetadataRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetExternalMetadataRequest) {
}

func (to *GetExternalMetadataRequest) SyncFieldsDuringRead(ctx context.Context, from GetExternalMetadataRequest) {
}

func (m GetExternalMetadataRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetExternalMetadataRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetExternalMetadataRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetExternalMetadataRequest
// only implements ToObjectValue() and Type().
func (m GetExternalMetadataRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetExternalMetadataRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type GetFunctionRequest struct {
	// Whether to include functions in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// The fully-qualified name of the function (of the form
	// __catalog_name__.__schema_name__.__function__name__).
	Name types.String `tfsdk:"-"`
}

func (to *GetFunctionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetFunctionRequest) {
}

func (to *GetFunctionRequest) SyncFieldsDuringRead(ctx context.Context, from GetFunctionRequest) {
}

func (m GetFunctionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetFunctionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetFunctionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetFunctionRequest
// only implements ToObjectValue() and Type().
func (m GetFunctionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_browse": m.IncludeBrowse,
			"name":           m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetFunctionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_browse": types.BoolType,
			"name":           types.StringType,
		},
	}
}

type GetGrantRequest struct {
	// Full name of securable.
	FullName types.String `tfsdk:"-"`
	// Specifies the maximum number of privileges to return (page length). Every
	// PrivilegeAssignment present in a single page response is guaranteed to
	// contain all the privileges granted on the requested Securable for the
	// respective principal.
	//
	// If not set, all the permissions are returned. If set to - lesser than 0:
	// invalid parameter error - 0: page length is set to a server configured
	// value - lesser than 150 but greater than 0: invalid parameter error (this
	// is to ensure that server is able to return at least one complete
	// PrivilegeAssignment in a single page response) - greater than (or equal
	// to) 150: page length is the minimum of this value and a server configured
	// value
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
	// If provided, only the permissions for the specified principal (user or
	// group) are returned.
	Principal types.String `tfsdk:"-"`
	// Type of securable.
	SecurableType types.String `tfsdk:"-"`
}

func (to *GetGrantRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetGrantRequest) {
}

func (to *GetGrantRequest) SyncFieldsDuringRead(ctx context.Context, from GetGrantRequest) {
}

func (m GetGrantRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["securable_type"] = attrs["securable_type"].SetRequired()
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["principal"] = attrs["principal"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetGrantRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetGrantRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetGrantRequest
// only implements ToObjectValue() and Type().
func (m GetGrantRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":      m.FullName,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
			"principal":      m.Principal,
			"securable_type": m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetGrantRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":      types.StringType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
			"principal":      types.StringType,
			"securable_type": types.StringType,
		},
	}
}

type GetMetastoreRequest struct {
	// Unique ID of the metastore.
	Id types.String `tfsdk:"-"`
}

func (to *GetMetastoreRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetMetastoreRequest) {
}

func (to *GetMetastoreRequest) SyncFieldsDuringRead(ctx context.Context, from GetMetastoreRequest) {
}

func (m GetMetastoreRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["id"] = attrs["id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetMetastoreRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetMetastoreRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetMetastoreRequest
// only implements ToObjectValue() and Type().
func (m GetMetastoreRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"id": m.Id,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetMetastoreRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"id": types.StringType,
		},
	}
}

type GetMetastoreSummaryResponse struct {
	// Cloud vendor of the metastore home shard (e.g., `aws`, `azure`, `gcp`).
	Cloud types.String `tfsdk:"cloud"`
	// Time at which this metastore was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of metastore creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// Unique identifier of the metastore's (Default) Data Access Configuration.
	DefaultDataAccessConfigId types.String `tfsdk:"default_data_access_config_id"`
	// The organization name of a Delta Sharing entity, to be used in
	// Databricks-to-Databricks Delta Sharing as the official name.
	DeltaSharingOrganizationName types.String `tfsdk:"delta_sharing_organization_name"`
	// The lifetime of delta sharing recipient token in seconds.
	DeltaSharingRecipientTokenLifetimeInSeconds types.Int64 `tfsdk:"delta_sharing_recipient_token_lifetime_in_seconds"`
	// The scope of Delta Sharing enabled for the metastore.
	DeltaSharingScope types.String `tfsdk:"delta_sharing_scope"`
	// Whether to allow non-DBR clients to directly access entities under the
	// metastore.
	ExternalAccessEnabled types.Bool `tfsdk:"external_access_enabled"`
	// Globally unique metastore ID across clouds and regions, of the form
	// `cloud:region:metastore_id`.
	GlobalMetastoreId types.String `tfsdk:"global_metastore_id"`
	// Unique identifier of metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The user-specified name of the metastore.
	Name types.String `tfsdk:"name"`
	// The owner of the metastore.
	Owner types.String `tfsdk:"owner"`
	// Privilege model version of the metastore, of the form `major.minor`
	// (e.g., `1.0`).
	PrivilegeModelVersion types.String `tfsdk:"privilege_model_version"`
	// Cloud region which the metastore serves (e.g., `us-west-2`, `westus`).
	Region types.String `tfsdk:"region"`
	// The storage root URL for metastore
	StorageRoot types.String `tfsdk:"storage_root"`
	// UUID of storage credential to access the metastore storage_root.
	StorageRootCredentialId types.String `tfsdk:"storage_root_credential_id"`
	// Name of the storage credential to access the metastore storage_root.
	StorageRootCredentialName types.String `tfsdk:"storage_root_credential_name"`
	// Time at which the metastore was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the metastore.
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *GetMetastoreSummaryResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetMetastoreSummaryResponse) {
}

func (to *GetMetastoreSummaryResponse) SyncFieldsDuringRead(ctx context.Context, from GetMetastoreSummaryResponse) {
}

func (m GetMetastoreSummaryResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["cloud"] = attrs["cloud"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["default_data_access_config_id"] = attrs["default_data_access_config_id"].SetOptional()
	attrs["delta_sharing_organization_name"] = attrs["delta_sharing_organization_name"].SetOptional()
	attrs["delta_sharing_recipient_token_lifetime_in_seconds"] = attrs["delta_sharing_recipient_token_lifetime_in_seconds"].SetOptional()
	attrs["delta_sharing_scope"] = attrs["delta_sharing_scope"].SetOptional()
	attrs["external_access_enabled"] = attrs["external_access_enabled"].SetOptional()
	attrs["global_metastore_id"] = attrs["global_metastore_id"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["privilege_model_version"] = attrs["privilege_model_version"].SetOptional()
	attrs["region"] = attrs["region"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()
	attrs["storage_root_credential_id"] = attrs["storage_root_credential_id"].SetOptional()
	attrs["storage_root_credential_name"] = attrs["storage_root_credential_name"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetMetastoreSummaryResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetMetastoreSummaryResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetMetastoreSummaryResponse
// only implements ToObjectValue() and Type().
func (m GetMetastoreSummaryResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"cloud":                           m.Cloud,
			"created_at":                      m.CreatedAt,
			"created_by":                      m.CreatedBy,
			"default_data_access_config_id":   m.DefaultDataAccessConfigId,
			"delta_sharing_organization_name": m.DeltaSharingOrganizationName,
			"delta_sharing_recipient_token_lifetime_in_seconds": m.DeltaSharingRecipientTokenLifetimeInSeconds,
			"delta_sharing_scope":                               m.DeltaSharingScope,
			"external_access_enabled":                           m.ExternalAccessEnabled,
			"global_metastore_id":                               m.GlobalMetastoreId,
			"metastore_id":                                      m.MetastoreId,
			"name":                                              m.Name,
			"owner":                                             m.Owner,
			"privilege_model_version":                           m.PrivilegeModelVersion,
			"region":                                            m.Region,
			"storage_root":                                      m.StorageRoot,
			"storage_root_credential_id":                        m.StorageRootCredentialId,
			"storage_root_credential_name":                      m.StorageRootCredentialName,
			"updated_at":                                        m.UpdatedAt,
			"updated_by":                                        m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetMetastoreSummaryResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"cloud":                           types.StringType,
			"created_at":                      types.Int64Type,
			"created_by":                      types.StringType,
			"default_data_access_config_id":   types.StringType,
			"delta_sharing_organization_name": types.StringType,
			"delta_sharing_recipient_token_lifetime_in_seconds": types.Int64Type,
			"delta_sharing_scope":                               types.StringType,
			"external_access_enabled":                           types.BoolType,
			"global_metastore_id":                               types.StringType,
			"metastore_id":                                      types.StringType,
			"name":                                              types.StringType,
			"owner":                                             types.StringType,
			"privilege_model_version":                           types.StringType,
			"region":                                            types.StringType,
			"storage_root":                                      types.StringType,
			"storage_root_credential_id":                        types.StringType,
			"storage_root_credential_name":                      types.StringType,
			"updated_at":                                        types.Int64Type,
			"updated_by":                                        types.StringType,
		},
	}
}

type GetModelVersionRequest struct {
	// The three-level (fully qualified) name of the model version
	FullName types.String `tfsdk:"-"`
	// Whether to include aliases associated with the model version in the
	// response
	IncludeAliases types.Bool `tfsdk:"-"`
	// Whether to include model versions in the response for which the principal
	// can only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// The integer version number of the model version
	Version types.Int64 `tfsdk:"-"`
}

func (to *GetModelVersionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetModelVersionRequest) {
}

func (to *GetModelVersionRequest) SyncFieldsDuringRead(ctx context.Context, from GetModelVersionRequest) {
}

func (m GetModelVersionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["version"] = attrs["version"].SetRequired()
	attrs["include_aliases"] = attrs["include_aliases"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetModelVersionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetModelVersionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetModelVersionRequest
// only implements ToObjectValue() and Type().
func (m GetModelVersionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":       m.FullName,
			"include_aliases": m.IncludeAliases,
			"include_browse":  m.IncludeBrowse,
			"version":         m.Version,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetModelVersionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":       types.StringType,
			"include_aliases": types.BoolType,
			"include_browse":  types.BoolType,
			"version":         types.Int64Type,
		},
	}
}

type GetOnlineTableRequest struct {
	// Full three-part (catalog, schema, table) name of the table.
	Name types.String `tfsdk:"-"`
}

func (to *GetOnlineTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetOnlineTableRequest) {
}

func (to *GetOnlineTableRequest) SyncFieldsDuringRead(ctx context.Context, from GetOnlineTableRequest) {
}

func (m GetOnlineTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetOnlineTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetOnlineTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetOnlineTableRequest
// only implements ToObjectValue() and Type().
func (m GetOnlineTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetOnlineTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type GetPermissionsResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
	// The privileges assigned to each principal
	PrivilegeAssignments types.List `tfsdk:"privilege_assignments"`
}

func (to *GetPermissionsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetPermissionsResponse) {
	if !from.PrivilegeAssignments.IsNull() && !from.PrivilegeAssignments.IsUnknown() && to.PrivilegeAssignments.IsNull() && len(from.PrivilegeAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrivilegeAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrivilegeAssignments = from.PrivilegeAssignments
	}
}

func (to *GetPermissionsResponse) SyncFieldsDuringRead(ctx context.Context, from GetPermissionsResponse) {
	if !from.PrivilegeAssignments.IsNull() && !from.PrivilegeAssignments.IsUnknown() && to.PrivilegeAssignments.IsNull() && len(from.PrivilegeAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrivilegeAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrivilegeAssignments = from.PrivilegeAssignments
	}
}

func (m GetPermissionsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["privilege_assignments"] = attrs["privilege_assignments"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetPermissionsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetPermissionsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"privilege_assignments": reflect.TypeOf(PrivilegeAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetPermissionsResponse
// only implements ToObjectValue() and Type().
func (m GetPermissionsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token":       m.NextPageToken,
			"privilege_assignments": m.PrivilegeAssignments,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetPermissionsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"privilege_assignments": basetypes.ListType{
				ElemType: PrivilegeAssignment{}.Type(ctx),
			},
		},
	}
}

// GetPrivilegeAssignments returns the value of the PrivilegeAssignments field in GetPermissionsResponse as
// a slice of PrivilegeAssignment values.
// If the field is unknown or null, the boolean return value is false.
func (m *GetPermissionsResponse) GetPrivilegeAssignments(ctx context.Context) ([]PrivilegeAssignment, bool) {
	if m.PrivilegeAssignments.IsNull() || m.PrivilegeAssignments.IsUnknown() {
		return nil, false
	}
	var v []PrivilegeAssignment
	d := m.PrivilegeAssignments.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrivilegeAssignments sets the value of the PrivilegeAssignments field in GetPermissionsResponse.
func (m *GetPermissionsResponse) SetPrivilegeAssignments(ctx context.Context, v []PrivilegeAssignment) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["privilege_assignments"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.PrivilegeAssignments = types.ListValueMust(t, vs)
}

type GetPolicyRequest struct {
	// Required. The name of the policy to retrieve.
	Name types.String `tfsdk:"-"`
	// Required. The fully qualified name of securable to retrieve policy for.
	OnSecurableFullname types.String `tfsdk:"-"`
	// Required. The type of the securable to retrieve the policy for.
	OnSecurableType types.String `tfsdk:"-"`
}

func (to *GetPolicyRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetPolicyRequest) {
}

func (to *GetPolicyRequest) SyncFieldsDuringRead(ctx context.Context, from GetPolicyRequest) {
}

func (m GetPolicyRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["on_securable_type"] = attrs["on_securable_type"].SetRequired()
	attrs["on_securable_fullname"] = attrs["on_securable_fullname"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetPolicyRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetPolicyRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetPolicyRequest
// only implements ToObjectValue() and Type().
func (m GetPolicyRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":                  m.Name,
			"on_securable_fullname": m.OnSecurableFullname,
			"on_securable_type":     m.OnSecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetPolicyRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":                  types.StringType,
			"on_securable_fullname": types.StringType,
			"on_securable_type":     types.StringType,
		},
	}
}

type GetQualityMonitorRequest struct {
	// UC table name in format `catalog.schema.table_name`. This field
	// corresponds to the {full_table_name_arg} arg in the endpoint path.
	TableName types.String `tfsdk:"-"`
}

func (to *GetQualityMonitorRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetQualityMonitorRequest) {
}

func (to *GetQualityMonitorRequest) SyncFieldsDuringRead(ctx context.Context, from GetQualityMonitorRequest) {
}

func (m GetQualityMonitorRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetQualityMonitorRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetQualityMonitorRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetQualityMonitorRequest
// only implements ToObjectValue() and Type().
func (m GetQualityMonitorRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_name": m.TableName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetQualityMonitorRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_name": types.StringType,
		},
	}
}

type GetQuotaRequest struct {
	// Full name of the parent resource. Provide the metastore ID if the parent
	// is a metastore.
	ParentFullName types.String `tfsdk:"-"`
	// Securable type of the quota parent.
	ParentSecurableType types.String `tfsdk:"-"`
	// Name of the quota. Follows the pattern of the quota type, with "-quota"
	// added as a suffix.
	QuotaName types.String `tfsdk:"-"`
}

func (to *GetQuotaRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetQuotaRequest) {
}

func (to *GetQuotaRequest) SyncFieldsDuringRead(ctx context.Context, from GetQuotaRequest) {
}

func (m GetQuotaRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["parent_securable_type"] = attrs["parent_securable_type"].SetRequired()
	attrs["parent_full_name"] = attrs["parent_full_name"].SetRequired()
	attrs["quota_name"] = attrs["quota_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetQuotaRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetQuotaRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetQuotaRequest
// only implements ToObjectValue() and Type().
func (m GetQuotaRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"parent_full_name":      m.ParentFullName,
			"parent_securable_type": m.ParentSecurableType,
			"quota_name":            m.QuotaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetQuotaRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"parent_full_name":      types.StringType,
			"parent_securable_type": types.StringType,
			"quota_name":            types.StringType,
		},
	}
}

type GetQuotaResponse struct {
	// The returned QuotaInfo.
	QuotaInfo types.Object `tfsdk:"quota_info"`
}

func (to *GetQuotaResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetQuotaResponse) {
	if !from.QuotaInfo.IsNull() && !from.QuotaInfo.IsUnknown() {
		if toQuotaInfo, ok := to.GetQuotaInfo(ctx); ok {
			if fromQuotaInfo, ok := from.GetQuotaInfo(ctx); ok {
				// Recursively sync the fields of QuotaInfo
				toQuotaInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromQuotaInfo)
				to.SetQuotaInfo(ctx, toQuotaInfo)
			}
		}
	}
}

func (to *GetQuotaResponse) SyncFieldsDuringRead(ctx context.Context, from GetQuotaResponse) {
	if !from.QuotaInfo.IsNull() && !from.QuotaInfo.IsUnknown() {
		if toQuotaInfo, ok := to.GetQuotaInfo(ctx); ok {
			if fromQuotaInfo, ok := from.GetQuotaInfo(ctx); ok {
				toQuotaInfo.SyncFieldsDuringRead(ctx, fromQuotaInfo)
				to.SetQuotaInfo(ctx, toQuotaInfo)
			}
		}
	}
}

func (m GetQuotaResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["quota_info"] = attrs["quota_info"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetQuotaResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetQuotaResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"quota_info": reflect.TypeOf(QuotaInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetQuotaResponse
// only implements ToObjectValue() and Type().
func (m GetQuotaResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"quota_info": m.QuotaInfo,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetQuotaResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"quota_info": QuotaInfo{}.Type(ctx),
		},
	}
}

// GetQuotaInfo returns the value of the QuotaInfo field in GetQuotaResponse as
// a QuotaInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *GetQuotaResponse) GetQuotaInfo(ctx context.Context) (QuotaInfo, bool) {
	var e QuotaInfo
	if m.QuotaInfo.IsNull() || m.QuotaInfo.IsUnknown() {
		return e, false
	}
	var v QuotaInfo
	d := m.QuotaInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetQuotaInfo sets the value of the QuotaInfo field in GetQuotaResponse.
func (m *GetQuotaResponse) SetQuotaInfo(ctx context.Context, v QuotaInfo) {
	vs := v.ToObjectValue(ctx)
	m.QuotaInfo = vs
}

type GetRefreshRequest struct {
	// ID of the refresh.
	RefreshId types.Int64 `tfsdk:"-"`
	// Full name of the table.
	TableName types.String `tfsdk:"-"`
}

func (to *GetRefreshRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetRefreshRequest) {
}

func (to *GetRefreshRequest) SyncFieldsDuringRead(ctx context.Context, from GetRefreshRequest) {
}

func (m GetRefreshRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_name"] = attrs["table_name"].SetRequired()
	attrs["refresh_id"] = attrs["refresh_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetRefreshRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetRefreshRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetRefreshRequest
// only implements ToObjectValue() and Type().
func (m GetRefreshRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"refresh_id": m.RefreshId,
			"table_name": m.TableName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetRefreshRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"refresh_id": types.Int64Type,
			"table_name": types.StringType,
		},
	}
}

type GetRegisteredModelRequest struct {
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"-"`
	// Whether to include registered model aliases in the response
	IncludeAliases types.Bool `tfsdk:"-"`
	// Whether to include registered models in the response for which the
	// principal can only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
}

func (to *GetRegisteredModelRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetRegisteredModelRequest) {
}

func (to *GetRegisteredModelRequest) SyncFieldsDuringRead(ctx context.Context, from GetRegisteredModelRequest) {
}

func (m GetRegisteredModelRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["include_aliases"] = attrs["include_aliases"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetRegisteredModelRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetRegisteredModelRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetRegisteredModelRequest
// only implements ToObjectValue() and Type().
func (m GetRegisteredModelRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":       m.FullName,
			"include_aliases": m.IncludeAliases,
			"include_browse":  m.IncludeBrowse,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetRegisteredModelRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":       types.StringType,
			"include_aliases": types.BoolType,
			"include_browse":  types.BoolType,
		},
	}
}

type GetSchemaRequest struct {
	// Full name of the schema.
	FullName types.String `tfsdk:"-"`
	// Whether to include schemas in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
}

func (to *GetSchemaRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetSchemaRequest) {
}

func (to *GetSchemaRequest) SyncFieldsDuringRead(ctx context.Context, from GetSchemaRequest) {
}

func (m GetSchemaRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetSchemaRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetSchemaRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetSchemaRequest
// only implements ToObjectValue() and Type().
func (m GetSchemaRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":      m.FullName,
			"include_browse": m.IncludeBrowse,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetSchemaRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":      types.StringType,
			"include_browse": types.BoolType,
		},
	}
}

type GetStorageCredentialRequest struct {
	// Name of the storage credential.
	Name types.String `tfsdk:"-"`
}

func (to *GetStorageCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetStorageCredentialRequest) {
}

func (to *GetStorageCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from GetStorageCredentialRequest) {
}

func (m GetStorageCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetStorageCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetStorageCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetStorageCredentialRequest
// only implements ToObjectValue() and Type().
func (m GetStorageCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetStorageCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type GetTableRequest struct {
	// Full name of the table.
	FullName types.String `tfsdk:"-"`
	// Whether to include tables in the response for which the principal can
	// only access selective metadata for.
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Whether delta metadata should be included in the response.
	IncludeDeltaMetadata types.Bool `tfsdk:"-"`
	// Whether to include a manifest containing table capabilities in the
	// response.
	IncludeManifestCapabilities types.Bool `tfsdk:"-"`
}

func (to *GetTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetTableRequest) {
}

func (to *GetTableRequest) SyncFieldsDuringRead(ctx context.Context, from GetTableRequest) {
}

func (m GetTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["include_delta_metadata"] = attrs["include_delta_metadata"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["include_manifest_capabilities"] = attrs["include_manifest_capabilities"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetTableRequest
// only implements ToObjectValue() and Type().
func (m GetTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":                     m.FullName,
			"include_browse":                m.IncludeBrowse,
			"include_delta_metadata":        m.IncludeDeltaMetadata,
			"include_manifest_capabilities": m.IncludeManifestCapabilities,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":                     types.StringType,
			"include_browse":                types.BoolType,
			"include_delta_metadata":        types.BoolType,
			"include_manifest_capabilities": types.BoolType,
		},
	}
}

type GetWorkspaceBindingRequest struct {
	// The name of the catalog.
	Name types.String `tfsdk:"-"`
}

func (to *GetWorkspaceBindingRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetWorkspaceBindingRequest) {
}

func (to *GetWorkspaceBindingRequest) SyncFieldsDuringRead(ctx context.Context, from GetWorkspaceBindingRequest) {
}

func (m GetWorkspaceBindingRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetWorkspaceBindingRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetWorkspaceBindingRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetWorkspaceBindingRequest
// only implements ToObjectValue() and Type().
func (m GetWorkspaceBindingRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetWorkspaceBindingRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type GetWorkspaceBindingsResponse struct {
	// List of workspace bindings
	Bindings types.List `tfsdk:"bindings"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *GetWorkspaceBindingsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from GetWorkspaceBindingsResponse) {
	if !from.Bindings.IsNull() && !from.Bindings.IsUnknown() && to.Bindings.IsNull() && len(from.Bindings.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Bindings, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Bindings = from.Bindings
	}
}

func (to *GetWorkspaceBindingsResponse) SyncFieldsDuringRead(ctx context.Context, from GetWorkspaceBindingsResponse) {
	if !from.Bindings.IsNull() && !from.Bindings.IsUnknown() && to.Bindings.IsNull() && len(from.Bindings.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Bindings, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Bindings = from.Bindings
	}
}

func (m GetWorkspaceBindingsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["bindings"] = attrs["bindings"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in GetWorkspaceBindingsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m GetWorkspaceBindingsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"bindings": reflect.TypeOf(WorkspaceBinding{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, GetWorkspaceBindingsResponse
// only implements ToObjectValue() and Type().
func (m GetWorkspaceBindingsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"bindings":        m.Bindings,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m GetWorkspaceBindingsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"bindings": basetypes.ListType{
				ElemType: WorkspaceBinding{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetBindings returns the value of the Bindings field in GetWorkspaceBindingsResponse as
// a slice of WorkspaceBinding values.
// If the field is unknown or null, the boolean return value is false.
func (m *GetWorkspaceBindingsResponse) GetBindings(ctx context.Context) ([]WorkspaceBinding, bool) {
	if m.Bindings.IsNull() || m.Bindings.IsUnknown() {
		return nil, false
	}
	var v []WorkspaceBinding
	d := m.Bindings.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetBindings sets the value of the Bindings field in GetWorkspaceBindingsResponse.
func (m *GetWorkspaceBindingsResponse) SetBindings(ctx context.Context, v []WorkspaceBinding) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["bindings"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Bindings = types.ListValueMust(t, vs)
}

type ListAccountMetastoreAssignmentsRequest struct {
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
}

func (to *ListAccountMetastoreAssignmentsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListAccountMetastoreAssignmentsRequest) {
}

func (to *ListAccountMetastoreAssignmentsRequest) SyncFieldsDuringRead(ctx context.Context, from ListAccountMetastoreAssignmentsRequest) {
}

func (m ListAccountMetastoreAssignmentsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListAccountMetastoreAssignmentsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListAccountMetastoreAssignmentsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListAccountMetastoreAssignmentsRequest
// only implements ToObjectValue() and Type().
func (m ListAccountMetastoreAssignmentsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id": m.MetastoreId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListAccountMetastoreAssignmentsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id": types.StringType,
		},
	}
}

// The metastore assignments were successfully returned.
type ListAccountMetastoreAssignmentsResponse struct {
	WorkspaceIds types.List `tfsdk:"workspace_ids"`
}

func (to *ListAccountMetastoreAssignmentsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListAccountMetastoreAssignmentsResponse) {
	if !from.WorkspaceIds.IsNull() && !from.WorkspaceIds.IsUnknown() && to.WorkspaceIds.IsNull() && len(from.WorkspaceIds.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for WorkspaceIds, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.WorkspaceIds = from.WorkspaceIds
	}
}

func (to *ListAccountMetastoreAssignmentsResponse) SyncFieldsDuringRead(ctx context.Context, from ListAccountMetastoreAssignmentsResponse) {
	if !from.WorkspaceIds.IsNull() && !from.WorkspaceIds.IsUnknown() && to.WorkspaceIds.IsNull() && len(from.WorkspaceIds.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for WorkspaceIds, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.WorkspaceIds = from.WorkspaceIds
	}
}

func (m ListAccountMetastoreAssignmentsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["workspace_ids"] = attrs["workspace_ids"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListAccountMetastoreAssignmentsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListAccountMetastoreAssignmentsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"workspace_ids": reflect.TypeOf(types.Int64{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListAccountMetastoreAssignmentsResponse
// only implements ToObjectValue() and Type().
func (m ListAccountMetastoreAssignmentsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"workspace_ids": m.WorkspaceIds,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListAccountMetastoreAssignmentsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"workspace_ids": basetypes.ListType{
				ElemType: types.Int64Type,
			},
		},
	}
}

// GetWorkspaceIds returns the value of the WorkspaceIds field in ListAccountMetastoreAssignmentsResponse as
// a slice of types.Int64 values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListAccountMetastoreAssignmentsResponse) GetWorkspaceIds(ctx context.Context) ([]types.Int64, bool) {
	if m.WorkspaceIds.IsNull() || m.WorkspaceIds.IsUnknown() {
		return nil, false
	}
	var v []types.Int64
	d := m.WorkspaceIds.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetWorkspaceIds sets the value of the WorkspaceIds field in ListAccountMetastoreAssignmentsResponse.
func (m *ListAccountMetastoreAssignmentsResponse) SetWorkspaceIds(ctx context.Context, v []types.Int64) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["workspace_ids"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.WorkspaceIds = types.ListValueMust(t, vs)
}

type ListAccountMetastoresRequest struct {
}

func (to *ListAccountMetastoresRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListAccountMetastoresRequest) {
}

func (to *ListAccountMetastoresRequest) SyncFieldsDuringRead(ctx context.Context, from ListAccountMetastoresRequest) {
}

func (m ListAccountMetastoresRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListAccountMetastoresRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListAccountMetastoresRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListAccountMetastoresRequest
// only implements ToObjectValue() and Type().
func (m ListAccountMetastoresRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m ListAccountMetastoresRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type ListAccountStorageCredentialsRequest struct {
	// Unity Catalog metastore ID
	MetastoreId types.String `tfsdk:"-"`
}

func (to *ListAccountStorageCredentialsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListAccountStorageCredentialsRequest) {
}

func (to *ListAccountStorageCredentialsRequest) SyncFieldsDuringRead(ctx context.Context, from ListAccountStorageCredentialsRequest) {
}

func (m ListAccountStorageCredentialsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["account_id"] = attrs["account_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListAccountStorageCredentialsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListAccountStorageCredentialsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListAccountStorageCredentialsRequest
// only implements ToObjectValue() and Type().
func (m ListAccountStorageCredentialsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id": m.MetastoreId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListAccountStorageCredentialsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id": types.StringType,
		},
	}
}

// The metastore storage credentials were successfully returned.
type ListAccountStorageCredentialsResponse struct {
	// An array of metastore storage credentials.
	StorageCredentials types.List `tfsdk:"storage_credentials"`
}

func (to *ListAccountStorageCredentialsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListAccountStorageCredentialsResponse) {
	if !from.StorageCredentials.IsNull() && !from.StorageCredentials.IsUnknown() && to.StorageCredentials.IsNull() && len(from.StorageCredentials.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for StorageCredentials, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.StorageCredentials = from.StorageCredentials
	}
}

func (to *ListAccountStorageCredentialsResponse) SyncFieldsDuringRead(ctx context.Context, from ListAccountStorageCredentialsResponse) {
	if !from.StorageCredentials.IsNull() && !from.StorageCredentials.IsUnknown() && to.StorageCredentials.IsNull() && len(from.StorageCredentials.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for StorageCredentials, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.StorageCredentials = from.StorageCredentials
	}
}

func (m ListAccountStorageCredentialsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["storage_credentials"] = attrs["storage_credentials"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListAccountStorageCredentialsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListAccountStorageCredentialsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"storage_credentials": reflect.TypeOf(StorageCredentialInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListAccountStorageCredentialsResponse
// only implements ToObjectValue() and Type().
func (m ListAccountStorageCredentialsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"storage_credentials": m.StorageCredentials,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListAccountStorageCredentialsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"storage_credentials": basetypes.ListType{
				ElemType: StorageCredentialInfo{}.Type(ctx),
			},
		},
	}
}

// GetStorageCredentials returns the value of the StorageCredentials field in ListAccountStorageCredentialsResponse as
// a slice of StorageCredentialInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListAccountStorageCredentialsResponse) GetStorageCredentials(ctx context.Context) ([]StorageCredentialInfo, bool) {
	if m.StorageCredentials.IsNull() || m.StorageCredentials.IsUnknown() {
		return nil, false
	}
	var v []StorageCredentialInfo
	d := m.StorageCredentials.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetStorageCredentials sets the value of the StorageCredentials field in ListAccountStorageCredentialsResponse.
func (m *ListAccountStorageCredentialsResponse) SetStorageCredentials(ctx context.Context, v []StorageCredentialInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["storage_credentials"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.StorageCredentials = types.ListValueMust(t, vs)
}

type ListCatalogsRequest struct {
	// Whether to include catalogs in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Whether to include catalogs not bound to the workspace. Effective only if
	// the user has permission to update the catalog–workspace binding.
	IncludeUnbound types.Bool `tfsdk:"-"`
	// Maximum number of catalogs to return. - when set to 0, the page length is
	// set to a server configured value (recommended); - when set to a value
	// greater than 0, the page length is the minimum of this value and a server
	// configured value; - when set to a value less than 0, an invalid parameter
	// error is returned; - If not set, all valid catalogs are returned (not
	// recommended). - Note: The number of returned catalogs might be less than
	// the specified max_results size, even zero. The only definitive indication
	// that no further catalogs can be fetched is when the next_page_token is
	// unset from the response.
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListCatalogsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListCatalogsRequest) {
}

func (to *ListCatalogsRequest) SyncFieldsDuringRead(ctx context.Context, from ListCatalogsRequest) {
}

func (m ListCatalogsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["include_unbound"] = attrs["include_unbound"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListCatalogsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListCatalogsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListCatalogsRequest
// only implements ToObjectValue() and Type().
func (m ListCatalogsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_browse":  m.IncludeBrowse,
			"include_unbound": m.IncludeUnbound,
			"max_results":     m.MaxResults,
			"page_token":      m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListCatalogsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_browse":  types.BoolType,
			"include_unbound": types.BoolType,
			"max_results":     types.Int64Type,
			"page_token":      types.StringType,
		},
	}
}

type ListCatalogsResponse struct {
	// An array of catalog information objects.
	Catalogs types.List `tfsdk:"catalogs"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListCatalogsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListCatalogsResponse) {
	if !from.Catalogs.IsNull() && !from.Catalogs.IsUnknown() && to.Catalogs.IsNull() && len(from.Catalogs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Catalogs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Catalogs = from.Catalogs
	}
}

func (to *ListCatalogsResponse) SyncFieldsDuringRead(ctx context.Context, from ListCatalogsResponse) {
	if !from.Catalogs.IsNull() && !from.Catalogs.IsUnknown() && to.Catalogs.IsNull() && len(from.Catalogs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Catalogs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Catalogs = from.Catalogs
	}
}

func (m ListCatalogsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalogs"] = attrs["catalogs"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListCatalogsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListCatalogsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"catalogs": reflect.TypeOf(CatalogInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListCatalogsResponse
// only implements ToObjectValue() and Type().
func (m ListCatalogsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalogs":        m.Catalogs,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListCatalogsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalogs": basetypes.ListType{
				ElemType: CatalogInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetCatalogs returns the value of the Catalogs field in ListCatalogsResponse as
// a slice of CatalogInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListCatalogsResponse) GetCatalogs(ctx context.Context) ([]CatalogInfo, bool) {
	if m.Catalogs.IsNull() || m.Catalogs.IsUnknown() {
		return nil, false
	}
	var v []CatalogInfo
	d := m.Catalogs.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCatalogs sets the value of the Catalogs field in ListCatalogsResponse.
func (m *ListCatalogsResponse) SetCatalogs(ctx context.Context, v []CatalogInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["catalogs"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Catalogs = types.ListValueMust(t, vs)
}

type ListConnectionsRequest struct {
	// Maximum number of connections to return. - If not set, all connections
	// are returned (not recommended). - when set to a value greater than 0, the
	// page length is the minimum of this value and a server configured value; -
	// when set to 0, the page length is set to a server configured value
	// (recommended); - when set to a value less than 0, an invalid parameter
	// error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListConnectionsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListConnectionsRequest) {
}

func (to *ListConnectionsRequest) SyncFieldsDuringRead(ctx context.Context, from ListConnectionsRequest) {
}

func (m ListConnectionsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListConnectionsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListConnectionsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListConnectionsRequest
// only implements ToObjectValue() and Type().
func (m ListConnectionsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"max_results": m.MaxResults,
			"page_token":  m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListConnectionsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"max_results": types.Int64Type,
			"page_token":  types.StringType,
		},
	}
}

type ListConnectionsResponse struct {
	// An array of connection information objects.
	Connections types.List `tfsdk:"connections"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListConnectionsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListConnectionsResponse) {
	if !from.Connections.IsNull() && !from.Connections.IsUnknown() && to.Connections.IsNull() && len(from.Connections.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Connections, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Connections = from.Connections
	}
}

func (to *ListConnectionsResponse) SyncFieldsDuringRead(ctx context.Context, from ListConnectionsResponse) {
	if !from.Connections.IsNull() && !from.Connections.IsUnknown() && to.Connections.IsNull() && len(from.Connections.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Connections, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Connections = from.Connections
	}
}

func (m ListConnectionsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["connections"] = attrs["connections"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListConnectionsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListConnectionsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"connections": reflect.TypeOf(ConnectionInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListConnectionsResponse
// only implements ToObjectValue() and Type().
func (m ListConnectionsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"connections":     m.Connections,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListConnectionsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"connections": basetypes.ListType{
				ElemType: ConnectionInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetConnections returns the value of the Connections field in ListConnectionsResponse as
// a slice of ConnectionInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListConnectionsResponse) GetConnections(ctx context.Context) ([]ConnectionInfo, bool) {
	if m.Connections.IsNull() || m.Connections.IsUnknown() {
		return nil, false
	}
	var v []ConnectionInfo
	d := m.Connections.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetConnections sets the value of the Connections field in ListConnectionsResponse.
func (m *ListConnectionsResponse) SetConnections(ctx context.Context, v []ConnectionInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["connections"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Connections = types.ListValueMust(t, vs)
}

type ListCredentialsRequest struct {
	// Whether to include credentials not bound to the workspace. Effective only
	// if the user has permission to update the credential–workspace binding.
	IncludeUnbound types.Bool `tfsdk:"-"`
	// Maximum number of credentials to return. - If not set, the default max
	// page size is used. - When set to a value greater than 0, the page length
	// is the minimum of this value and a server-configured value. - When set to
	// 0, the page length is set to a server-configured value (recommended). -
	// When set to a value less than 0, an invalid parameter error is returned.
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque token to retrieve the next page of results.
	PageToken types.String `tfsdk:"-"`
	// Return only credentials for the specified purpose.
	Purpose types.String `tfsdk:"-"`
}

func (to *ListCredentialsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListCredentialsRequest) {
}

func (to *ListCredentialsRequest) SyncFieldsDuringRead(ctx context.Context, from ListCredentialsRequest) {
}

func (m ListCredentialsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["include_unbound"] = attrs["include_unbound"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["purpose"] = attrs["purpose"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListCredentialsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListCredentialsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListCredentialsRequest
// only implements ToObjectValue() and Type().
func (m ListCredentialsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_unbound": m.IncludeUnbound,
			"max_results":     m.MaxResults,
			"page_token":      m.PageToken,
			"purpose":         m.Purpose,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListCredentialsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_unbound": types.BoolType,
			"max_results":     types.Int64Type,
			"page_token":      types.StringType,
			"purpose":         types.StringType,
		},
	}
}

type ListCredentialsResponse struct {
	Credentials types.List `tfsdk:"credentials"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListCredentialsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListCredentialsResponse) {
	if !from.Credentials.IsNull() && !from.Credentials.IsUnknown() && to.Credentials.IsNull() && len(from.Credentials.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Credentials, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Credentials = from.Credentials
	}
}

func (to *ListCredentialsResponse) SyncFieldsDuringRead(ctx context.Context, from ListCredentialsResponse) {
	if !from.Credentials.IsNull() && !from.Credentials.IsUnknown() && to.Credentials.IsNull() && len(from.Credentials.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Credentials, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Credentials = from.Credentials
	}
}

func (m ListCredentialsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["credentials"] = attrs["credentials"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListCredentialsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListCredentialsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"credentials": reflect.TypeOf(CredentialInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListCredentialsResponse
// only implements ToObjectValue() and Type().
func (m ListCredentialsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"credentials":     m.Credentials,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListCredentialsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"credentials": basetypes.ListType{
				ElemType: CredentialInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetCredentials returns the value of the Credentials field in ListCredentialsResponse as
// a slice of CredentialInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListCredentialsResponse) GetCredentials(ctx context.Context) ([]CredentialInfo, bool) {
	if m.Credentials.IsNull() || m.Credentials.IsUnknown() {
		return nil, false
	}
	var v []CredentialInfo
	d := m.Credentials.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCredentials sets the value of the Credentials field in ListCredentialsResponse.
func (m *ListCredentialsResponse) SetCredentials(ctx context.Context, v []CredentialInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["credentials"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Credentials = types.ListValueMust(t, vs)
}

type ListEntityTagAssignmentsRequest struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName types.String `tfsdk:"-"`
	// The type of the entity to which the tag is assigned. Allowed values are:
	// catalogs, schemas, tables, columns, volumes.
	EntityType types.String `tfsdk:"-"`
	// Optional. Maximum number of tag assignments to return in a single page
	MaxResults types.Int64 `tfsdk:"-"`
	// Optional. Pagination token to retrieve the next page of results
	PageToken types.String `tfsdk:"-"`
}

func (to *ListEntityTagAssignmentsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListEntityTagAssignmentsRequest) {
}

func (to *ListEntityTagAssignmentsRequest) SyncFieldsDuringRead(ctx context.Context, from ListEntityTagAssignmentsRequest) {
}

func (m ListEntityTagAssignmentsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["entity_type"] = attrs["entity_type"].SetRequired()
	attrs["entity_name"] = attrs["entity_name"].SetRequired()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListEntityTagAssignmentsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListEntityTagAssignmentsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListEntityTagAssignmentsRequest
// only implements ToObjectValue() and Type().
func (m ListEntityTagAssignmentsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"entity_name": m.EntityName,
			"entity_type": m.EntityType,
			"max_results": m.MaxResults,
			"page_token":  m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListEntityTagAssignmentsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"entity_name": types.StringType,
			"entity_type": types.StringType,
			"max_results": types.Int64Type,
			"page_token":  types.StringType,
		},
	}
}

type ListEntityTagAssignmentsResponse struct {
	// Optional. Pagination token for retrieving the next page of results
	NextPageToken types.String `tfsdk:"next_page_token"`
	// The list of tag assignments
	TagAssignments types.List `tfsdk:"tag_assignments"`
}

func (to *ListEntityTagAssignmentsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListEntityTagAssignmentsResponse) {
	if !from.TagAssignments.IsNull() && !from.TagAssignments.IsUnknown() && to.TagAssignments.IsNull() && len(from.TagAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for TagAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.TagAssignments = from.TagAssignments
	}
}

func (to *ListEntityTagAssignmentsResponse) SyncFieldsDuringRead(ctx context.Context, from ListEntityTagAssignmentsResponse) {
	if !from.TagAssignments.IsNull() && !from.TagAssignments.IsUnknown() && to.TagAssignments.IsNull() && len(from.TagAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for TagAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.TagAssignments = from.TagAssignments
	}
}

func (m ListEntityTagAssignmentsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["tag_assignments"] = attrs["tag_assignments"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListEntityTagAssignmentsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListEntityTagAssignmentsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"tag_assignments": reflect.TypeOf(EntityTagAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListEntityTagAssignmentsResponse
// only implements ToObjectValue() and Type().
func (m ListEntityTagAssignmentsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"tag_assignments": m.TagAssignments,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListEntityTagAssignmentsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"tag_assignments": basetypes.ListType{
				ElemType: EntityTagAssignment{}.Type(ctx),
			},
		},
	}
}

// GetTagAssignments returns the value of the TagAssignments field in ListEntityTagAssignmentsResponse as
// a slice of EntityTagAssignment values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListEntityTagAssignmentsResponse) GetTagAssignments(ctx context.Context) ([]EntityTagAssignment, bool) {
	if m.TagAssignments.IsNull() || m.TagAssignments.IsUnknown() {
		return nil, false
	}
	var v []EntityTagAssignment
	d := m.TagAssignments.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTagAssignments sets the value of the TagAssignments field in ListEntityTagAssignmentsResponse.
func (m *ListEntityTagAssignmentsResponse) SetTagAssignments(ctx context.Context, v []EntityTagAssignment) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["tag_assignments"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.TagAssignments = types.ListValueMust(t, vs)
}

type ListExternalLineageRelationshipsRequest struct {
	// The lineage direction to filter on.
	LineageDirection types.String `tfsdk:"-"`
	// The object to query external lineage relationships for. Since this field
	// is a query parameter, please flatten the nested fields. For example, if
	// the object is a table, the query parameter should look like:
	// `object_info.table.name=main.sales.customers`
	ObjectInfo types.Object `tfsdk:"-"`
	// Specifies the maximum number of external lineage relationships to return
	// in a single response. The value must be less than or equal to 1000.
	PageSize types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListExternalLineageRelationshipsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListExternalLineageRelationshipsRequest) {
	if !from.ObjectInfo.IsNull() && !from.ObjectInfo.IsUnknown() {
		if toObjectInfo, ok := to.GetObjectInfo(ctx); ok {
			if fromObjectInfo, ok := from.GetObjectInfo(ctx); ok {
				// Recursively sync the fields of ObjectInfo
				toObjectInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromObjectInfo)
				to.SetObjectInfo(ctx, toObjectInfo)
			}
		}
	}
}

func (to *ListExternalLineageRelationshipsRequest) SyncFieldsDuringRead(ctx context.Context, from ListExternalLineageRelationshipsRequest) {
	if !from.ObjectInfo.IsNull() && !from.ObjectInfo.IsUnknown() {
		if toObjectInfo, ok := to.GetObjectInfo(ctx); ok {
			if fromObjectInfo, ok := from.GetObjectInfo(ctx); ok {
				toObjectInfo.SyncFieldsDuringRead(ctx, fromObjectInfo)
				to.SetObjectInfo(ctx, toObjectInfo)
			}
		}
	}
}

func (m ListExternalLineageRelationshipsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["object_info"] = attrs["object_info"].SetRequired()
	attrs["lineage_direction"] = attrs["lineage_direction"].SetRequired()
	attrs["page_size"] = attrs["page_size"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListExternalLineageRelationshipsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListExternalLineageRelationshipsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"object_info": reflect.TypeOf(ExternalLineageObject{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListExternalLineageRelationshipsRequest
// only implements ToObjectValue() and Type().
func (m ListExternalLineageRelationshipsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"lineage_direction": m.LineageDirection,
			"object_info":       m.ObjectInfo,
			"page_size":         m.PageSize,
			"page_token":        m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListExternalLineageRelationshipsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"lineage_direction": types.StringType,
			"object_info":       ExternalLineageObject{}.Type(ctx),
			"page_size":         types.Int64Type,
			"page_token":        types.StringType,
		},
	}
}

// GetObjectInfo returns the value of the ObjectInfo field in ListExternalLineageRelationshipsRequest as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *ListExternalLineageRelationshipsRequest) GetObjectInfo(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.ObjectInfo.IsNull() || m.ObjectInfo.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.ObjectInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetObjectInfo sets the value of the ObjectInfo field in ListExternalLineageRelationshipsRequest.
func (m *ListExternalLineageRelationshipsRequest) SetObjectInfo(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.ObjectInfo = vs
}

type ListExternalLineageRelationshipsResponse struct {
	ExternalLineageRelationships types.List `tfsdk:"external_lineage_relationships"`

	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListExternalLineageRelationshipsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListExternalLineageRelationshipsResponse) {
	if !from.ExternalLineageRelationships.IsNull() && !from.ExternalLineageRelationships.IsUnknown() && to.ExternalLineageRelationships.IsNull() && len(from.ExternalLineageRelationships.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExternalLineageRelationships, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExternalLineageRelationships = from.ExternalLineageRelationships
	}
}

func (to *ListExternalLineageRelationshipsResponse) SyncFieldsDuringRead(ctx context.Context, from ListExternalLineageRelationshipsResponse) {
	if !from.ExternalLineageRelationships.IsNull() && !from.ExternalLineageRelationships.IsUnknown() && to.ExternalLineageRelationships.IsNull() && len(from.ExternalLineageRelationships.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExternalLineageRelationships, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExternalLineageRelationships = from.ExternalLineageRelationships
	}
}

func (m ListExternalLineageRelationshipsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_lineage_relationships"] = attrs["external_lineage_relationships"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListExternalLineageRelationshipsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListExternalLineageRelationshipsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_lineage_relationships": reflect.TypeOf(ExternalLineageInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListExternalLineageRelationshipsResponse
// only implements ToObjectValue() and Type().
func (m ListExternalLineageRelationshipsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_lineage_relationships": m.ExternalLineageRelationships,
			"next_page_token":                m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListExternalLineageRelationshipsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_lineage_relationships": basetypes.ListType{
				ElemType: ExternalLineageInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetExternalLineageRelationships returns the value of the ExternalLineageRelationships field in ListExternalLineageRelationshipsResponse as
// a slice of ExternalLineageInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListExternalLineageRelationshipsResponse) GetExternalLineageRelationships(ctx context.Context) ([]ExternalLineageInfo, bool) {
	if m.ExternalLineageRelationships.IsNull() || m.ExternalLineageRelationships.IsUnknown() {
		return nil, false
	}
	var v []ExternalLineageInfo
	d := m.ExternalLineageRelationships.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalLineageRelationships sets the value of the ExternalLineageRelationships field in ListExternalLineageRelationshipsResponse.
func (m *ListExternalLineageRelationshipsResponse) SetExternalLineageRelationships(ctx context.Context, v []ExternalLineageInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["external_lineage_relationships"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ExternalLineageRelationships = types.ListValueMust(t, vs)
}

type ListExternalLocationsRequest struct {
	// Whether to include external locations in the response for which the
	// principal can only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Whether to include external locations not bound to the workspace.
	// Effective only if the user has permission to update the
	// location–workspace binding.
	IncludeUnbound types.Bool `tfsdk:"-"`
	// Maximum number of external locations to return. If not set, all the
	// external locations are returned (not recommended). - when set to a value
	// greater than 0, the page length is the minimum of this value and a server
	// configured value; - when set to 0, the page length is set to a server
	// configured value (recommended); - when set to a value less than 0, an
	// invalid parameter error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListExternalLocationsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListExternalLocationsRequest) {
}

func (to *ListExternalLocationsRequest) SyncFieldsDuringRead(ctx context.Context, from ListExternalLocationsRequest) {
}

func (m ListExternalLocationsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["include_unbound"] = attrs["include_unbound"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListExternalLocationsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListExternalLocationsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListExternalLocationsRequest
// only implements ToObjectValue() and Type().
func (m ListExternalLocationsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_browse":  m.IncludeBrowse,
			"include_unbound": m.IncludeUnbound,
			"max_results":     m.MaxResults,
			"page_token":      m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListExternalLocationsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_browse":  types.BoolType,
			"include_unbound": types.BoolType,
			"max_results":     types.Int64Type,
			"page_token":      types.StringType,
		},
	}
}

type ListExternalLocationsResponse struct {
	// An array of external locations.
	ExternalLocations types.List `tfsdk:"external_locations"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListExternalLocationsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListExternalLocationsResponse) {
	if !from.ExternalLocations.IsNull() && !from.ExternalLocations.IsUnknown() && to.ExternalLocations.IsNull() && len(from.ExternalLocations.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExternalLocations, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExternalLocations = from.ExternalLocations
	}
}

func (to *ListExternalLocationsResponse) SyncFieldsDuringRead(ctx context.Context, from ListExternalLocationsResponse) {
	if !from.ExternalLocations.IsNull() && !from.ExternalLocations.IsUnknown() && to.ExternalLocations.IsNull() && len(from.ExternalLocations.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExternalLocations, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExternalLocations = from.ExternalLocations
	}
}

func (m ListExternalLocationsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_locations"] = attrs["external_locations"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListExternalLocationsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListExternalLocationsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_locations": reflect.TypeOf(ExternalLocationInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListExternalLocationsResponse
// only implements ToObjectValue() and Type().
func (m ListExternalLocationsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_locations": m.ExternalLocations,
			"next_page_token":    m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListExternalLocationsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_locations": basetypes.ListType{
				ElemType: ExternalLocationInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetExternalLocations returns the value of the ExternalLocations field in ListExternalLocationsResponse as
// a slice of ExternalLocationInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListExternalLocationsResponse) GetExternalLocations(ctx context.Context) ([]ExternalLocationInfo, bool) {
	if m.ExternalLocations.IsNull() || m.ExternalLocations.IsUnknown() {
		return nil, false
	}
	var v []ExternalLocationInfo
	d := m.ExternalLocations.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalLocations sets the value of the ExternalLocations field in ListExternalLocationsResponse.
func (m *ListExternalLocationsResponse) SetExternalLocations(ctx context.Context, v []ExternalLocationInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["external_locations"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ExternalLocations = types.ListValueMust(t, vs)
}

type ListExternalMetadataRequest struct {
	// Specifies the maximum number of external metadata objects to return in a
	// single response. The value must be less than or equal to 1000.
	PageSize types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListExternalMetadataRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListExternalMetadataRequest) {
}

func (to *ListExternalMetadataRequest) SyncFieldsDuringRead(ctx context.Context, from ListExternalMetadataRequest) {
}

func (m ListExternalMetadataRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["page_size"] = attrs["page_size"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListExternalMetadataRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListExternalMetadataRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListExternalMetadataRequest
// only implements ToObjectValue() and Type().
func (m ListExternalMetadataRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"page_size":  m.PageSize,
			"page_token": m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListExternalMetadataRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"page_size":  types.Int64Type,
			"page_token": types.StringType,
		},
	}
}

type ListExternalMetadataResponse struct {
	ExternalMetadata types.List `tfsdk:"external_metadata"`

	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListExternalMetadataResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListExternalMetadataResponse) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() && to.ExternalMetadata.IsNull() && len(from.ExternalMetadata.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExternalMetadata, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExternalMetadata = from.ExternalMetadata
	}
}

func (to *ListExternalMetadataResponse) SyncFieldsDuringRead(ctx context.Context, from ListExternalMetadataResponse) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() && to.ExternalMetadata.IsNull() && len(from.ExternalMetadata.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExternalMetadata, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExternalMetadata = from.ExternalMetadata
	}
}

func (m ListExternalMetadataResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_metadata"] = attrs["external_metadata"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListExternalMetadataResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListExternalMetadataResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_metadata": reflect.TypeOf(ExternalMetadata{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListExternalMetadataResponse
// only implements ToObjectValue() and Type().
func (m ListExternalMetadataResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_metadata": m.ExternalMetadata,
			"next_page_token":   m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListExternalMetadataResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_metadata": basetypes.ListType{
				ElemType: ExternalMetadata{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetExternalMetadata returns the value of the ExternalMetadata field in ListExternalMetadataResponse as
// a slice of ExternalMetadata values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListExternalMetadataResponse) GetExternalMetadata(ctx context.Context) ([]ExternalMetadata, bool) {
	if m.ExternalMetadata.IsNull() || m.ExternalMetadata.IsUnknown() {
		return nil, false
	}
	var v []ExternalMetadata
	d := m.ExternalMetadata.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalMetadata sets the value of the ExternalMetadata field in ListExternalMetadataResponse.
func (m *ListExternalMetadataResponse) SetExternalMetadata(ctx context.Context, v []ExternalMetadata) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["external_metadata"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ExternalMetadata = types.ListValueMust(t, vs)
}

type ListFunctionsRequest struct {
	// Name of parent catalog for functions of interest.
	CatalogName types.String `tfsdk:"-"`
	// Whether to include functions in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Maximum number of functions to return. If not set, all the functions are
	// returned (not recommended). - when set to a value greater than 0, the
	// page length is the minimum of this value and a server configured value; -
	// when set to 0, the page length is set to a server configured value
	// (recommended); - when set to a value less than 0, an invalid parameter
	// error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
	// Parent schema of functions.
	SchemaName types.String `tfsdk:"-"`
}

func (to *ListFunctionsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListFunctionsRequest) {
}

func (to *ListFunctionsRequest) SyncFieldsDuringRead(ctx context.Context, from ListFunctionsRequest) {
}

func (m ListFunctionsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListFunctionsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListFunctionsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListFunctionsRequest
// only implements ToObjectValue() and Type().
func (m ListFunctionsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":   m.CatalogName,
			"include_browse": m.IncludeBrowse,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
			"schema_name":    m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListFunctionsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":   types.StringType,
			"include_browse": types.BoolType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
			"schema_name":    types.StringType,
		},
	}
}

type ListFunctionsResponse struct {
	// An array of function information objects.
	Functions types.List `tfsdk:"functions"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListFunctionsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListFunctionsResponse) {
	if !from.Functions.IsNull() && !from.Functions.IsUnknown() && to.Functions.IsNull() && len(from.Functions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Functions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Functions = from.Functions
	}
}

func (to *ListFunctionsResponse) SyncFieldsDuringRead(ctx context.Context, from ListFunctionsResponse) {
	if !from.Functions.IsNull() && !from.Functions.IsUnknown() && to.Functions.IsNull() && len(from.Functions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Functions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Functions = from.Functions
	}
}

func (m ListFunctionsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["functions"] = attrs["functions"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListFunctionsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListFunctionsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"functions": reflect.TypeOf(FunctionInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListFunctionsResponse
// only implements ToObjectValue() and Type().
func (m ListFunctionsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"functions":       m.Functions,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListFunctionsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"functions": basetypes.ListType{
				ElemType: FunctionInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetFunctions returns the value of the Functions field in ListFunctionsResponse as
// a slice of FunctionInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListFunctionsResponse) GetFunctions(ctx context.Context) ([]FunctionInfo, bool) {
	if m.Functions.IsNull() || m.Functions.IsUnknown() {
		return nil, false
	}
	var v []FunctionInfo
	d := m.Functions.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFunctions sets the value of the Functions field in ListFunctionsResponse.
func (m *ListFunctionsResponse) SetFunctions(ctx context.Context, v []FunctionInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["functions"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Functions = types.ListValueMust(t, vs)
}

type ListMetastoresRequest struct {
	// Maximum number of metastores to return. - when set to a value greater
	// than 0, the page length is the minimum of this value and a server
	// configured value; - when set to 0, the page length is set to a server
	// configured value (recommended); - when set to a value less than 0, an
	// invalid parameter error is returned; - If not set, all the metastores are
	// returned (not recommended). - Note: The number of returned metastores
	// might be less than the specified max_results size, even zero. The only
	// definitive indication that no further metastores can be fetched is when
	// the next_page_token is unset from the response.
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListMetastoresRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListMetastoresRequest) {
}

func (to *ListMetastoresRequest) SyncFieldsDuringRead(ctx context.Context, from ListMetastoresRequest) {
}

func (m ListMetastoresRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListMetastoresRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListMetastoresRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListMetastoresRequest
// only implements ToObjectValue() and Type().
func (m ListMetastoresRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"max_results": m.MaxResults,
			"page_token":  m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListMetastoresRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"max_results": types.Int64Type,
			"page_token":  types.StringType,
		},
	}
}

type ListMetastoresResponse struct {
	// An array of metastore information objects.
	Metastores types.List `tfsdk:"metastores"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListMetastoresResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListMetastoresResponse) {
	if !from.Metastores.IsNull() && !from.Metastores.IsUnknown() && to.Metastores.IsNull() && len(from.Metastores.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Metastores, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Metastores = from.Metastores
	}
}

func (to *ListMetastoresResponse) SyncFieldsDuringRead(ctx context.Context, from ListMetastoresResponse) {
	if !from.Metastores.IsNull() && !from.Metastores.IsUnknown() && to.Metastores.IsNull() && len(from.Metastores.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Metastores, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Metastores = from.Metastores
	}
}

func (m ListMetastoresResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastores"] = attrs["metastores"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListMetastoresResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListMetastoresResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"metastores": reflect.TypeOf(MetastoreInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListMetastoresResponse
// only implements ToObjectValue() and Type().
func (m ListMetastoresResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastores":      m.Metastores,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListMetastoresResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastores": basetypes.ListType{
				ElemType: MetastoreInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetMetastores returns the value of the Metastores field in ListMetastoresResponse as
// a slice of MetastoreInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListMetastoresResponse) GetMetastores(ctx context.Context) ([]MetastoreInfo, bool) {
	if m.Metastores.IsNull() || m.Metastores.IsUnknown() {
		return nil, false
	}
	var v []MetastoreInfo
	d := m.Metastores.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMetastores sets the value of the Metastores field in ListMetastoresResponse.
func (m *ListMetastoresResponse) SetMetastores(ctx context.Context, v []MetastoreInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["metastores"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Metastores = types.ListValueMust(t, vs)
}

type ListModelVersionsRequest struct {
	// The full three-level name of the registered model under which to list
	// model versions
	FullName types.String `tfsdk:"-"`
	// Whether to include model versions in the response for which the principal
	// can only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Maximum number of model versions to return. If not set, the page length
	// is set to a server configured value (100, as of 1/3/2024). - when set to
	// a value greater than 0, the page length is the minimum of this value and
	// a server configured value(1000, as of 1/3/2024); - when set to 0, the
	// page length is set to a server configured value (100, as of 1/3/2024)
	// (recommended); - when set to a value less than 0, an invalid parameter
	// error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListModelVersionsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListModelVersionsRequest) {
}

func (to *ListModelVersionsRequest) SyncFieldsDuringRead(ctx context.Context, from ListModelVersionsRequest) {
}

func (m ListModelVersionsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListModelVersionsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListModelVersionsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListModelVersionsRequest
// only implements ToObjectValue() and Type().
func (m ListModelVersionsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":      m.FullName,
			"include_browse": m.IncludeBrowse,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListModelVersionsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":      types.StringType,
			"include_browse": types.BoolType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
		},
	}
}

type ListModelVersionsResponse struct {
	ModelVersions types.List `tfsdk:"model_versions"`
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
}

func (to *ListModelVersionsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListModelVersionsResponse) {
	if !from.ModelVersions.IsNull() && !from.ModelVersions.IsUnknown() && to.ModelVersions.IsNull() && len(from.ModelVersions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ModelVersions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ModelVersions = from.ModelVersions
	}
}

func (to *ListModelVersionsResponse) SyncFieldsDuringRead(ctx context.Context, from ListModelVersionsResponse) {
	if !from.ModelVersions.IsNull() && !from.ModelVersions.IsUnknown() && to.ModelVersions.IsNull() && len(from.ModelVersions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ModelVersions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ModelVersions = from.ModelVersions
	}
}

func (m ListModelVersionsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["model_versions"] = attrs["model_versions"].SetOptional()
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListModelVersionsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListModelVersionsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"model_versions": reflect.TypeOf(ModelVersionInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListModelVersionsResponse
// only implements ToObjectValue() and Type().
func (m ListModelVersionsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"model_versions":  m.ModelVersions,
			"next_page_token": m.NextPageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListModelVersionsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"model_versions": basetypes.ListType{
				ElemType: ModelVersionInfo{}.Type(ctx),
			},
			"next_page_token": types.StringType,
		},
	}
}

// GetModelVersions returns the value of the ModelVersions field in ListModelVersionsResponse as
// a slice of ModelVersionInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListModelVersionsResponse) GetModelVersions(ctx context.Context) ([]ModelVersionInfo, bool) {
	if m.ModelVersions.IsNull() || m.ModelVersions.IsUnknown() {
		return nil, false
	}
	var v []ModelVersionInfo
	d := m.ModelVersions.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetModelVersions sets the value of the ModelVersions field in ListModelVersionsResponse.
func (m *ListModelVersionsResponse) SetModelVersions(ctx context.Context, v []ModelVersionInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["model_versions"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ModelVersions = types.ListValueMust(t, vs)
}

type ListPoliciesRequest struct {
	// Optional. Whether to include policies defined on parent securables. By
	// default, the inherited policies are not included.
	IncludeInherited types.Bool `tfsdk:"-"`
	// Optional. Maximum number of policies to return on a single page (page
	// length). - When not set or set to 0, the page length is set to a server
	// configured value (recommended); - When set to a value greater than 0, the
	// page length is the minimum of this value and a server configured value;
	MaxResults types.Int64 `tfsdk:"-"`
	// Required. The fully qualified name of securable to list policies for.
	OnSecurableFullname types.String `tfsdk:"-"`
	// Required. The type of the securable to list policies for.
	OnSecurableType types.String `tfsdk:"-"`
	// Optional. Opaque pagination token to go to next page based on previous
	// query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListPoliciesRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListPoliciesRequest) {
}

func (to *ListPoliciesRequest) SyncFieldsDuringRead(ctx context.Context, from ListPoliciesRequest) {
}

func (m ListPoliciesRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["on_securable_type"] = attrs["on_securable_type"].SetRequired()
	attrs["on_securable_fullname"] = attrs["on_securable_fullname"].SetRequired()
	attrs["include_inherited"] = attrs["include_inherited"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListPoliciesRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListPoliciesRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListPoliciesRequest
// only implements ToObjectValue() and Type().
func (m ListPoliciesRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_inherited":     m.IncludeInherited,
			"max_results":           m.MaxResults,
			"on_securable_fullname": m.OnSecurableFullname,
			"on_securable_type":     m.OnSecurableType,
			"page_token":            m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListPoliciesRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_inherited":     types.BoolType,
			"max_results":           types.Int64Type,
			"on_securable_fullname": types.StringType,
			"on_securable_type":     types.StringType,
			"page_token":            types.StringType,
		},
	}
}

type ListPoliciesResponse struct {
	// Optional opaque token for continuing pagination. `page_token` should be
	// set to this value for the next request to retrieve the next page of
	// results.
	NextPageToken types.String `tfsdk:"next_page_token"`
	// The list of retrieved policies.
	Policies types.List `tfsdk:"policies"`
}

func (to *ListPoliciesResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListPoliciesResponse) {
	if !from.Policies.IsNull() && !from.Policies.IsUnknown() && to.Policies.IsNull() && len(from.Policies.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Policies, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Policies = from.Policies
	}
}

func (to *ListPoliciesResponse) SyncFieldsDuringRead(ctx context.Context, from ListPoliciesResponse) {
	if !from.Policies.IsNull() && !from.Policies.IsUnknown() && to.Policies.IsNull() && len(from.Policies.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Policies, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Policies = from.Policies
	}
}

func (m ListPoliciesResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetComputed()
	attrs["policies"] = attrs["policies"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListPoliciesResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListPoliciesResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"policies": reflect.TypeOf(PolicyInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListPoliciesResponse
// only implements ToObjectValue() and Type().
func (m ListPoliciesResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"policies":        m.Policies,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListPoliciesResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"policies": basetypes.ListType{
				ElemType: PolicyInfo{}.Type(ctx),
			},
		},
	}
}

// GetPolicies returns the value of the Policies field in ListPoliciesResponse as
// a slice of PolicyInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListPoliciesResponse) GetPolicies(ctx context.Context) ([]PolicyInfo, bool) {
	if m.Policies.IsNull() || m.Policies.IsUnknown() {
		return nil, false
	}
	var v []PolicyInfo
	d := m.Policies.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPolicies sets the value of the Policies field in ListPoliciesResponse.
func (m *ListPoliciesResponse) SetPolicies(ctx context.Context, v []PolicyInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["policies"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Policies = types.ListValueMust(t, vs)
}

type ListQuotasRequest struct {
	// The number of quotas to return.
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque token for the next page of results.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListQuotasRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListQuotasRequest) {
}

func (to *ListQuotasRequest) SyncFieldsDuringRead(ctx context.Context, from ListQuotasRequest) {
}

func (m ListQuotasRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListQuotasRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListQuotasRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListQuotasRequest
// only implements ToObjectValue() and Type().
func (m ListQuotasRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"max_results": m.MaxResults,
			"page_token":  m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListQuotasRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"max_results": types.Int64Type,
			"page_token":  types.StringType,
		},
	}
}

type ListQuotasResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request.
	NextPageToken types.String `tfsdk:"next_page_token"`
	// An array of returned QuotaInfos.
	Quotas types.List `tfsdk:"quotas"`
}

func (to *ListQuotasResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListQuotasResponse) {
	if !from.Quotas.IsNull() && !from.Quotas.IsUnknown() && to.Quotas.IsNull() && len(from.Quotas.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Quotas, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Quotas = from.Quotas
	}
}

func (to *ListQuotasResponse) SyncFieldsDuringRead(ctx context.Context, from ListQuotasResponse) {
	if !from.Quotas.IsNull() && !from.Quotas.IsUnknown() && to.Quotas.IsNull() && len(from.Quotas.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Quotas, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Quotas = from.Quotas
	}
}

func (m ListQuotasResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["quotas"] = attrs["quotas"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListQuotasResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListQuotasResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"quotas": reflect.TypeOf(QuotaInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListQuotasResponse
// only implements ToObjectValue() and Type().
func (m ListQuotasResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"quotas":          m.Quotas,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListQuotasResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"quotas": basetypes.ListType{
				ElemType: QuotaInfo{}.Type(ctx),
			},
		},
	}
}

// GetQuotas returns the value of the Quotas field in ListQuotasResponse as
// a slice of QuotaInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListQuotasResponse) GetQuotas(ctx context.Context) ([]QuotaInfo, bool) {
	if m.Quotas.IsNull() || m.Quotas.IsUnknown() {
		return nil, false
	}
	var v []QuotaInfo
	d := m.Quotas.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetQuotas sets the value of the Quotas field in ListQuotasResponse.
func (m *ListQuotasResponse) SetQuotas(ctx context.Context, v []QuotaInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["quotas"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Quotas = types.ListValueMust(t, vs)
}

type ListRefreshesRequest struct {
	// UC table name in format `catalog.schema.table_name`. table_name is case
	// insensitive and spaces are disallowed.
	TableName types.String `tfsdk:"-"`
}

func (to *ListRefreshesRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListRefreshesRequest) {
}

func (to *ListRefreshesRequest) SyncFieldsDuringRead(ctx context.Context, from ListRefreshesRequest) {
}

func (m ListRefreshesRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListRefreshesRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListRefreshesRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListRefreshesRequest
// only implements ToObjectValue() and Type().
func (m ListRefreshesRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_name": m.TableName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListRefreshesRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_name": types.StringType,
		},
	}
}

type ListRegisteredModelsRequest struct {
	// The identifier of the catalog under which to list registered models. If
	// specified, schema_name must be specified.
	CatalogName types.String `tfsdk:"-"`
	// Whether to include registered models in the response for which the
	// principal can only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Max number of registered models to return.
	//
	// If both catalog and schema are specified: - when max_results is not
	// specified, the page length is set to a server configured value (10000, as
	// of 4/2/2024). - when set to a value greater than 0, the page length is
	// the minimum of this value and a server configured value (10000, as of
	// 4/2/2024); - when set to 0, the page length is set to a server configured
	// value (10000, as of 4/2/2024); - when set to a value less than 0, an
	// invalid parameter error is returned;
	//
	// If neither schema nor catalog is specified: - when max_results is not
	// specified, the page length is set to a server configured value (100, as
	// of 4/2/2024). - when set to a value greater than 0, the page length is
	// the minimum of this value and a server configured value (1000, as of
	// 4/2/2024); - when set to 0, the page length is set to a server configured
	// value (100, as of 4/2/2024); - when set to a value less than 0, an
	// invalid parameter error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque token to send for the next page of results (pagination).
	PageToken types.String `tfsdk:"-"`
	// The identifier of the schema under which to list registered models. If
	// specified, catalog_name must be specified.
	SchemaName types.String `tfsdk:"-"`
}

func (to *ListRegisteredModelsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListRegisteredModelsRequest) {
}

func (to *ListRegisteredModelsRequest) SyncFieldsDuringRead(ctx context.Context, from ListRegisteredModelsRequest) {
}

func (m ListRegisteredModelsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListRegisteredModelsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListRegisteredModelsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListRegisteredModelsRequest
// only implements ToObjectValue() and Type().
func (m ListRegisteredModelsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":   m.CatalogName,
			"include_browse": m.IncludeBrowse,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
			"schema_name":    m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListRegisteredModelsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":   types.StringType,
			"include_browse": types.BoolType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
			"schema_name":    types.StringType,
		},
	}
}

type ListRegisteredModelsResponse struct {
	// Opaque token for pagination. Omitted if there are no more results.
	// page_token should be set to this value for fetching the next page.
	NextPageToken types.String `tfsdk:"next_page_token"`

	RegisteredModels types.List `tfsdk:"registered_models"`
}

func (to *ListRegisteredModelsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListRegisteredModelsResponse) {
	if !from.RegisteredModels.IsNull() && !from.RegisteredModels.IsUnknown() && to.RegisteredModels.IsNull() && len(from.RegisteredModels.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for RegisteredModels, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.RegisteredModels = from.RegisteredModels
	}
}

func (to *ListRegisteredModelsResponse) SyncFieldsDuringRead(ctx context.Context, from ListRegisteredModelsResponse) {
	if !from.RegisteredModels.IsNull() && !from.RegisteredModels.IsUnknown() && to.RegisteredModels.IsNull() && len(from.RegisteredModels.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for RegisteredModels, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.RegisteredModels = from.RegisteredModels
	}
}

func (m ListRegisteredModelsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["registered_models"] = attrs["registered_models"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListRegisteredModelsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListRegisteredModelsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"registered_models": reflect.TypeOf(RegisteredModelInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListRegisteredModelsResponse
// only implements ToObjectValue() and Type().
func (m ListRegisteredModelsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token":   m.NextPageToken,
			"registered_models": m.RegisteredModels,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListRegisteredModelsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"registered_models": basetypes.ListType{
				ElemType: RegisteredModelInfo{}.Type(ctx),
			},
		},
	}
}

// GetRegisteredModels returns the value of the RegisteredModels field in ListRegisteredModelsResponse as
// a slice of RegisteredModelInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListRegisteredModelsResponse) GetRegisteredModels(ctx context.Context) ([]RegisteredModelInfo, bool) {
	if m.RegisteredModels.IsNull() || m.RegisteredModels.IsUnknown() {
		return nil, false
	}
	var v []RegisteredModelInfo
	d := m.RegisteredModels.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRegisteredModels sets the value of the RegisteredModels field in ListRegisteredModelsResponse.
func (m *ListRegisteredModelsResponse) SetRegisteredModels(ctx context.Context, v []RegisteredModelInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["registered_models"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.RegisteredModels = types.ListValueMust(t, vs)
}

type ListSchemasRequest struct {
	// Parent catalog for schemas of interest.
	CatalogName types.String `tfsdk:"-"`
	// Whether to include schemas in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Maximum number of schemas to return. If not set, all the schemas are
	// returned (not recommended). - when set to a value greater than 0, the
	// page length is the minimum of this value and a server configured value; -
	// when set to 0, the page length is set to a server configured value
	// (recommended); - when set to a value less than 0, an invalid parameter
	// error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListSchemasRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListSchemasRequest) {
}

func (to *ListSchemasRequest) SyncFieldsDuringRead(ctx context.Context, from ListSchemasRequest) {
}

func (m ListSchemasRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListSchemasRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListSchemasRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListSchemasRequest
// only implements ToObjectValue() and Type().
func (m ListSchemasRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":   m.CatalogName,
			"include_browse": m.IncludeBrowse,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListSchemasRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":   types.StringType,
			"include_browse": types.BoolType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
		},
	}
}

type ListSchemasResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
	// An array of schema information objects.
	Schemas types.List `tfsdk:"schemas"`
}

func (to *ListSchemasResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListSchemasResponse) {
	if !from.Schemas.IsNull() && !from.Schemas.IsUnknown() && to.Schemas.IsNull() && len(from.Schemas.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Schemas, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Schemas = from.Schemas
	}
}

func (to *ListSchemasResponse) SyncFieldsDuringRead(ctx context.Context, from ListSchemasResponse) {
	if !from.Schemas.IsNull() && !from.Schemas.IsUnknown() && to.Schemas.IsNull() && len(from.Schemas.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Schemas, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Schemas = from.Schemas
	}
}

func (m ListSchemasResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["schemas"] = attrs["schemas"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListSchemasResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListSchemasResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"schemas": reflect.TypeOf(SchemaInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListSchemasResponse
// only implements ToObjectValue() and Type().
func (m ListSchemasResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"schemas":         m.Schemas,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListSchemasResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"schemas": basetypes.ListType{
				ElemType: SchemaInfo{}.Type(ctx),
			},
		},
	}
}

// GetSchemas returns the value of the Schemas field in ListSchemasResponse as
// a slice of SchemaInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListSchemasResponse) GetSchemas(ctx context.Context) ([]SchemaInfo, bool) {
	if m.Schemas.IsNull() || m.Schemas.IsUnknown() {
		return nil, false
	}
	var v []SchemaInfo
	d := m.Schemas.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSchemas sets the value of the Schemas field in ListSchemasResponse.
func (m *ListSchemasResponse) SetSchemas(ctx context.Context, v []SchemaInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["schemas"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Schemas = types.ListValueMust(t, vs)
}

type ListStorageCredentialsRequest struct {
	// Whether to include credentials not bound to the workspace. Effective only
	// if the user has permission to update the credential–workspace binding.
	IncludeUnbound types.Bool `tfsdk:"-"`
	// Maximum number of storage credentials to return. If not set, all the
	// storage credentials are returned (not recommended). - when set to a value
	// greater than 0, the page length is the minimum of this value and a server
	// configured value; - when set to 0, the page length is set to a server
	// configured value (recommended); - when set to a value less than 0, an
	// invalid parameter error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListStorageCredentialsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListStorageCredentialsRequest) {
}

func (to *ListStorageCredentialsRequest) SyncFieldsDuringRead(ctx context.Context, from ListStorageCredentialsRequest) {
}

func (m ListStorageCredentialsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["include_unbound"] = attrs["include_unbound"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListStorageCredentialsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListStorageCredentialsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListStorageCredentialsRequest
// only implements ToObjectValue() and Type().
func (m ListStorageCredentialsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_unbound": m.IncludeUnbound,
			"max_results":     m.MaxResults,
			"page_token":      m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListStorageCredentialsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_unbound": types.BoolType,
			"max_results":     types.Int64Type,
			"page_token":      types.StringType,
		},
	}
}

type ListStorageCredentialsResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`

	StorageCredentials types.List `tfsdk:"storage_credentials"`
}

func (to *ListStorageCredentialsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListStorageCredentialsResponse) {
	if !from.StorageCredentials.IsNull() && !from.StorageCredentials.IsUnknown() && to.StorageCredentials.IsNull() && len(from.StorageCredentials.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for StorageCredentials, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.StorageCredentials = from.StorageCredentials
	}
}

func (to *ListStorageCredentialsResponse) SyncFieldsDuringRead(ctx context.Context, from ListStorageCredentialsResponse) {
	if !from.StorageCredentials.IsNull() && !from.StorageCredentials.IsUnknown() && to.StorageCredentials.IsNull() && len(from.StorageCredentials.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for StorageCredentials, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.StorageCredentials = from.StorageCredentials
	}
}

func (m ListStorageCredentialsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["storage_credentials"] = attrs["storage_credentials"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListStorageCredentialsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListStorageCredentialsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"storage_credentials": reflect.TypeOf(StorageCredentialInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListStorageCredentialsResponse
// only implements ToObjectValue() and Type().
func (m ListStorageCredentialsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token":     m.NextPageToken,
			"storage_credentials": m.StorageCredentials,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListStorageCredentialsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"storage_credentials": basetypes.ListType{
				ElemType: StorageCredentialInfo{}.Type(ctx),
			},
		},
	}
}

// GetStorageCredentials returns the value of the StorageCredentials field in ListStorageCredentialsResponse as
// a slice of StorageCredentialInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListStorageCredentialsResponse) GetStorageCredentials(ctx context.Context) ([]StorageCredentialInfo, bool) {
	if m.StorageCredentials.IsNull() || m.StorageCredentials.IsUnknown() {
		return nil, false
	}
	var v []StorageCredentialInfo
	d := m.StorageCredentials.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetStorageCredentials sets the value of the StorageCredentials field in ListStorageCredentialsResponse.
func (m *ListStorageCredentialsResponse) SetStorageCredentials(ctx context.Context, v []StorageCredentialInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["storage_credentials"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.StorageCredentials = types.ListValueMust(t, vs)
}

type ListSummariesRequest struct {
	// Name of parent catalog for tables of interest.
	CatalogName types.String `tfsdk:"-"`
	// Whether to include a manifest containing table capabilities in the
	// response.
	IncludeManifestCapabilities types.Bool `tfsdk:"-"`
	// Maximum number of summaries for tables to return. If not set, the page
	// length is set to a server configured value (10000, as of 1/5/2024). -
	// when set to a value greater than 0, the page length is the minimum of
	// this value and a server configured value (10000, as of 1/5/2024); - when
	// set to 0, the page length is set to a server configured value (10000, as
	// of 1/5/2024) (recommended); - when set to a value less than 0, an invalid
	// parameter error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
	// A sql LIKE pattern (% and _) for schema names. All schemas will be
	// returned if not set or empty.
	SchemaNamePattern types.String `tfsdk:"-"`
	// A sql LIKE pattern (% and _) for table names. All tables will be returned
	// if not set or empty.
	TableNamePattern types.String `tfsdk:"-"`
}

func (to *ListSummariesRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListSummariesRequest) {
}

func (to *ListSummariesRequest) SyncFieldsDuringRead(ctx context.Context, from ListSummariesRequest) {
}

func (m ListSummariesRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["schema_name_pattern"] = attrs["schema_name_pattern"].SetOptional()
	attrs["table_name_pattern"] = attrs["table_name_pattern"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["include_manifest_capabilities"] = attrs["include_manifest_capabilities"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListSummariesRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListSummariesRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListSummariesRequest
// only implements ToObjectValue() and Type().
func (m ListSummariesRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":                  m.CatalogName,
			"include_manifest_capabilities": m.IncludeManifestCapabilities,
			"max_results":                   m.MaxResults,
			"page_token":                    m.PageToken,
			"schema_name_pattern":           m.SchemaNamePattern,
			"table_name_pattern":            m.TableNamePattern,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListSummariesRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":                  types.StringType,
			"include_manifest_capabilities": types.BoolType,
			"max_results":                   types.Int64Type,
			"page_token":                    types.StringType,
			"schema_name_pattern":           types.StringType,
			"table_name_pattern":            types.StringType,
		},
	}
}

type ListSystemSchemasRequest struct {
	// Maximum number of schemas to return. - When set to 0, the page length is
	// set to a server configured value (recommended); - When set to a value
	// greater than 0, the page length is the minimum of this value and a server
	// configured value; - When set to a value less than 0, an invalid parameter
	// error is returned; - If not set, all the schemas are returned (not
	// recommended).
	MaxResults types.Int64 `tfsdk:"-"`
	// The ID for the metastore in which the system schema resides.
	MetastoreId types.String `tfsdk:"-"`
	// Opaque pagination token to go to next page based on previous query.
	PageToken types.String `tfsdk:"-"`
}

func (to *ListSystemSchemasRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListSystemSchemasRequest) {
}

func (to *ListSystemSchemasRequest) SyncFieldsDuringRead(ctx context.Context, from ListSystemSchemasRequest) {
}

func (m ListSystemSchemasRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListSystemSchemasRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListSystemSchemasRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListSystemSchemasRequest
// only implements ToObjectValue() and Type().
func (m ListSystemSchemasRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"max_results":  m.MaxResults,
			"metastore_id": m.MetastoreId,
			"page_token":   m.PageToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListSystemSchemasRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"max_results":  types.Int64Type,
			"metastore_id": types.StringType,
			"page_token":   types.StringType,
		},
	}
}

type ListSystemSchemasResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
	// An array of system schema information objects.
	Schemas types.List `tfsdk:"schemas"`
}

func (to *ListSystemSchemasResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListSystemSchemasResponse) {
	if !from.Schemas.IsNull() && !from.Schemas.IsUnknown() && to.Schemas.IsNull() && len(from.Schemas.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Schemas, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Schemas = from.Schemas
	}
}

func (to *ListSystemSchemasResponse) SyncFieldsDuringRead(ctx context.Context, from ListSystemSchemasResponse) {
	if !from.Schemas.IsNull() && !from.Schemas.IsUnknown() && to.Schemas.IsNull() && len(from.Schemas.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Schemas, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Schemas = from.Schemas
	}
}

func (m ListSystemSchemasResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["schemas"] = attrs["schemas"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListSystemSchemasResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListSystemSchemasResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"schemas": reflect.TypeOf(SystemSchemaInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListSystemSchemasResponse
// only implements ToObjectValue() and Type().
func (m ListSystemSchemasResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"schemas":         m.Schemas,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListSystemSchemasResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"schemas": basetypes.ListType{
				ElemType: SystemSchemaInfo{}.Type(ctx),
			},
		},
	}
}

// GetSchemas returns the value of the Schemas field in ListSystemSchemasResponse as
// a slice of SystemSchemaInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListSystemSchemasResponse) GetSchemas(ctx context.Context) ([]SystemSchemaInfo, bool) {
	if m.Schemas.IsNull() || m.Schemas.IsUnknown() {
		return nil, false
	}
	var v []SystemSchemaInfo
	d := m.Schemas.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSchemas sets the value of the Schemas field in ListSystemSchemasResponse.
func (m *ListSystemSchemasResponse) SetSchemas(ctx context.Context, v []SystemSchemaInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["schemas"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Schemas = types.ListValueMust(t, vs)
}

type ListTableSummariesResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
	// List of table summaries.
	Tables types.List `tfsdk:"tables"`
}

func (to *ListTableSummariesResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListTableSummariesResponse) {
	if !from.Tables.IsNull() && !from.Tables.IsUnknown() && to.Tables.IsNull() && len(from.Tables.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Tables, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Tables = from.Tables
	}
}

func (to *ListTableSummariesResponse) SyncFieldsDuringRead(ctx context.Context, from ListTableSummariesResponse) {
	if !from.Tables.IsNull() && !from.Tables.IsUnknown() && to.Tables.IsNull() && len(from.Tables.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Tables, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Tables = from.Tables
	}
}

func (m ListTableSummariesResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["tables"] = attrs["tables"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListTableSummariesResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListTableSummariesResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"tables": reflect.TypeOf(TableSummary{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListTableSummariesResponse
// only implements ToObjectValue() and Type().
func (m ListTableSummariesResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"tables":          m.Tables,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListTableSummariesResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"tables": basetypes.ListType{
				ElemType: TableSummary{}.Type(ctx),
			},
		},
	}
}

// GetTables returns the value of the Tables field in ListTableSummariesResponse as
// a slice of TableSummary values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListTableSummariesResponse) GetTables(ctx context.Context) ([]TableSummary, bool) {
	if m.Tables.IsNull() || m.Tables.IsUnknown() {
		return nil, false
	}
	var v []TableSummary
	d := m.Tables.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTables sets the value of the Tables field in ListTableSummariesResponse.
func (m *ListTableSummariesResponse) SetTables(ctx context.Context, v []TableSummary) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["tables"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Tables = types.ListValueMust(t, vs)
}

type ListTablesRequest struct {
	// Name of parent catalog for tables of interest.
	CatalogName types.String `tfsdk:"-"`
	// Whether to include tables in the response for which the principal can
	// only access selective metadata for.
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Whether to include a manifest containing table capabilities in the
	// response.
	IncludeManifestCapabilities types.Bool `tfsdk:"-"`
	// Maximum number of tables to return. If not set, all the tables are
	// returned (not recommended). - when set to a value greater than 0, the
	// page length is the minimum of this value and a server configured value; -
	// when set to 0, the page length is set to a server configured value
	// (recommended); - when set to a value less than 0, an invalid parameter
	// error is returned;
	MaxResults types.Int64 `tfsdk:"-"`
	// Whether to omit the columns of the table from the response or not.
	OmitColumns types.Bool `tfsdk:"-"`
	// Whether to omit the properties of the table from the response or not.
	OmitProperties types.Bool `tfsdk:"-"`
	// Whether to omit the username of the table (e.g. owner, updated_by,
	// created_by) from the response or not.
	OmitUsername types.Bool `tfsdk:"-"`
	// Opaque token to send for the next page of results (pagination).
	PageToken types.String `tfsdk:"-"`
	// Parent schema of tables.
	SchemaName types.String `tfsdk:"-"`
}

func (to *ListTablesRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListTablesRequest) {
}

func (to *ListTablesRequest) SyncFieldsDuringRead(ctx context.Context, from ListTablesRequest) {
}

func (m ListTablesRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()
	attrs["omit_columns"] = attrs["omit_columns"].SetOptional()
	attrs["omit_properties"] = attrs["omit_properties"].SetOptional()
	attrs["omit_username"] = attrs["omit_username"].SetOptional()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["include_manifest_capabilities"] = attrs["include_manifest_capabilities"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListTablesRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListTablesRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListTablesRequest
// only implements ToObjectValue() and Type().
func (m ListTablesRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":                  m.CatalogName,
			"include_browse":                m.IncludeBrowse,
			"include_manifest_capabilities": m.IncludeManifestCapabilities,
			"max_results":                   m.MaxResults,
			"omit_columns":                  m.OmitColumns,
			"omit_properties":               m.OmitProperties,
			"omit_username":                 m.OmitUsername,
			"page_token":                    m.PageToken,
			"schema_name":                   m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListTablesRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":                  types.StringType,
			"include_browse":                types.BoolType,
			"include_manifest_capabilities": types.BoolType,
			"max_results":                   types.Int64Type,
			"omit_columns":                  types.BoolType,
			"omit_properties":               types.BoolType,
			"omit_username":                 types.BoolType,
			"page_token":                    types.StringType,
			"schema_name":                   types.StringType,
		},
	}
}

type ListTablesResponse struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request (for the next page of results).
	NextPageToken types.String `tfsdk:"next_page_token"`
	// An array of table information objects.
	Tables types.List `tfsdk:"tables"`
}

func (to *ListTablesResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListTablesResponse) {
	if !from.Tables.IsNull() && !from.Tables.IsUnknown() && to.Tables.IsNull() && len(from.Tables.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Tables, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Tables = from.Tables
	}
}

func (to *ListTablesResponse) SyncFieldsDuringRead(ctx context.Context, from ListTablesResponse) {
	if !from.Tables.IsNull() && !from.Tables.IsUnknown() && to.Tables.IsNull() && len(from.Tables.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Tables, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Tables = from.Tables
	}
}

func (m ListTablesResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["tables"] = attrs["tables"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListTablesResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListTablesResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"tables": reflect.TypeOf(TableInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListTablesResponse
// only implements ToObjectValue() and Type().
func (m ListTablesResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"tables":          m.Tables,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListTablesResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"tables": basetypes.ListType{
				ElemType: TableInfo{}.Type(ctx),
			},
		},
	}
}

// GetTables returns the value of the Tables field in ListTablesResponse as
// a slice of TableInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListTablesResponse) GetTables(ctx context.Context) ([]TableInfo, bool) {
	if m.Tables.IsNull() || m.Tables.IsUnknown() {
		return nil, false
	}
	var v []TableInfo
	d := m.Tables.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTables sets the value of the Tables field in ListTablesResponse.
func (m *ListTablesResponse) SetTables(ctx context.Context, v []TableInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["tables"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Tables = types.ListValueMust(t, vs)
}

type ListVolumesRequest struct {
	// The identifier of the catalog
	CatalogName types.String `tfsdk:"-"`
	// Whether to include volumes in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// Maximum number of volumes to return (page length).
	//
	// If not set, the page length is set to a server configured value (10000,
	// as of 1/29/2024). - when set to a value greater than 0, the page length
	// is the minimum of this value and a server configured value (10000, as of
	// 1/29/2024); - when set to 0, the page length is set to a server
	// configured value (10000, as of 1/29/2024) (recommended); - when set to a
	// value less than 0, an invalid parameter error is returned;
	//
	// Note: this parameter controls only the maximum number of volumes to
	// return. The actual number of volumes returned in a page may be smaller
	// than this value, including 0, even if there are more pages.
	MaxResults types.Int64 `tfsdk:"-"`
	// Opaque token returned by a previous request. It must be included in the
	// request to retrieve the next page of results (pagination).
	PageToken types.String `tfsdk:"-"`
	// The identifier of the schema
	SchemaName types.String `tfsdk:"-"`
}

func (to *ListVolumesRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListVolumesRequest) {
}

func (to *ListVolumesRequest) SyncFieldsDuringRead(ctx context.Context, from ListVolumesRequest) {
}

func (m ListVolumesRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["catalog_name"] = attrs["catalog_name"].SetRequired()
	attrs["schema_name"] = attrs["schema_name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()
	attrs["max_results"] = attrs["max_results"].SetOptional()
	attrs["page_token"] = attrs["page_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListVolumesRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListVolumesRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListVolumesRequest
// only implements ToObjectValue() and Type().
func (m ListVolumesRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"catalog_name":   m.CatalogName,
			"include_browse": m.IncludeBrowse,
			"max_results":    m.MaxResults,
			"page_token":     m.PageToken,
			"schema_name":    m.SchemaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListVolumesRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"catalog_name":   types.StringType,
			"include_browse": types.BoolType,
			"max_results":    types.Int64Type,
			"page_token":     types.StringType,
			"schema_name":    types.StringType,
		},
	}
}

type ListVolumesResponseContent struct {
	// Opaque token to retrieve the next page of results. Absent if there are no
	// more pages. __page_token__ should be set to this value for the next
	// request to retrieve the next page of results.
	NextPageToken types.String `tfsdk:"next_page_token"`

	Volumes types.List `tfsdk:"volumes"`
}

func (to *ListVolumesResponseContent) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ListVolumesResponseContent) {
	if !from.Volumes.IsNull() && !from.Volumes.IsUnknown() && to.Volumes.IsNull() && len(from.Volumes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Volumes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Volumes = from.Volumes
	}
}

func (to *ListVolumesResponseContent) SyncFieldsDuringRead(ctx context.Context, from ListVolumesResponseContent) {
	if !from.Volumes.IsNull() && !from.Volumes.IsUnknown() && to.Volumes.IsNull() && len(from.Volumes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Volumes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Volumes = from.Volumes
	}
}

func (m ListVolumesResponseContent) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["next_page_token"] = attrs["next_page_token"].SetOptional()
	attrs["volumes"] = attrs["volumes"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ListVolumesResponseContent.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ListVolumesResponseContent) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"volumes": reflect.TypeOf(VolumeInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ListVolumesResponseContent
// only implements ToObjectValue() and Type().
func (m ListVolumesResponseContent) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"next_page_token": m.NextPageToken,
			"volumes":         m.Volumes,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ListVolumesResponseContent) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"next_page_token": types.StringType,
			"volumes": basetypes.ListType{
				ElemType: VolumeInfo{}.Type(ctx),
			},
		},
	}
}

// GetVolumes returns the value of the Volumes field in ListVolumesResponseContent as
// a slice of VolumeInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *ListVolumesResponseContent) GetVolumes(ctx context.Context) ([]VolumeInfo, bool) {
	if m.Volumes.IsNull() || m.Volumes.IsUnknown() {
		return nil, false
	}
	var v []VolumeInfo
	d := m.Volumes.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetVolumes sets the value of the Volumes field in ListVolumesResponseContent.
func (m *ListVolumesResponseContent) SetVolumes(ctx context.Context, v []VolumeInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["volumes"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Volumes = types.ListValueMust(t, vs)
}

type MatchColumn struct {
	// Optional alias of the matched column.
	Alias types.String `tfsdk:"alias"`
	// The condition expression used to match a table column.
	Condition types.String `tfsdk:"condition"`
}

func (to *MatchColumn) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MatchColumn) {
}

func (to *MatchColumn) SyncFieldsDuringRead(ctx context.Context, from MatchColumn) {
}

func (m MatchColumn) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["alias"] = attrs["alias"].SetOptional()
	attrs["condition"] = attrs["condition"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MatchColumn.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MatchColumn) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MatchColumn
// only implements ToObjectValue() and Type().
func (m MatchColumn) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"alias":     m.Alias,
			"condition": m.Condition,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MatchColumn) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"alias":     types.StringType,
			"condition": types.StringType,
		},
	}
}

type MetastoreAssignment struct {
	// The name of the default catalog in the metastore. This field is
	// deprecated. Please use "Default Namespace API" to configure the default
	// catalog for a Databricks workspace.
	DefaultCatalogName types.String `tfsdk:"default_catalog_name"`
	// The unique ID of the metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The unique ID of the Databricks workspace.
	WorkspaceId types.Int64 `tfsdk:"workspace_id"`
}

func (to *MetastoreAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MetastoreAssignment) {
}

func (to *MetastoreAssignment) SyncFieldsDuringRead(ctx context.Context, from MetastoreAssignment) {
}

func (m MetastoreAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["default_catalog_name"] = attrs["default_catalog_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MetastoreAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MetastoreAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MetastoreAssignment
// only implements ToObjectValue() and Type().
func (m MetastoreAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"default_catalog_name": m.DefaultCatalogName,
			"metastore_id":         m.MetastoreId,
			"workspace_id":         m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MetastoreAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"default_catalog_name": types.StringType,
			"metastore_id":         types.StringType,
			"workspace_id":         types.Int64Type,
		},
	}
}

type MetastoreInfo struct {
	// Cloud vendor of the metastore home shard (e.g., `aws`, `azure`, `gcp`).
	Cloud types.String `tfsdk:"cloud"`
	// Time at which this metastore was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of metastore creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// Unique identifier of the metastore's (Default) Data Access Configuration.
	DefaultDataAccessConfigId types.String `tfsdk:"default_data_access_config_id"`
	// The organization name of a Delta Sharing entity, to be used in
	// Databricks-to-Databricks Delta Sharing as the official name.
	DeltaSharingOrganizationName types.String `tfsdk:"delta_sharing_organization_name"`
	// The lifetime of delta sharing recipient token in seconds.
	DeltaSharingRecipientTokenLifetimeInSeconds types.Int64 `tfsdk:"delta_sharing_recipient_token_lifetime_in_seconds"`
	// The scope of Delta Sharing enabled for the metastore.
	DeltaSharingScope types.String `tfsdk:"delta_sharing_scope"`
	// Whether to allow non-DBR clients to directly access entities under the
	// metastore.
	ExternalAccessEnabled types.Bool `tfsdk:"external_access_enabled"`
	// Globally unique metastore ID across clouds and regions, of the form
	// `cloud:region:metastore_id`.
	GlobalMetastoreId types.String `tfsdk:"global_metastore_id"`
	// Unique identifier of metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The user-specified name of the metastore.
	Name types.String `tfsdk:"name"`
	// The owner of the metastore.
	Owner types.String `tfsdk:"owner"`
	// Privilege model version of the metastore, of the form `major.minor`
	// (e.g., `1.0`).
	PrivilegeModelVersion types.String `tfsdk:"privilege_model_version"`
	// Cloud region which the metastore serves (e.g., `us-west-2`, `westus`).
	Region types.String `tfsdk:"region"`
	// The storage root URL for metastore
	StorageRoot types.String `tfsdk:"storage_root"`
	// UUID of storage credential to access the metastore storage_root.
	StorageRootCredentialId types.String `tfsdk:"storage_root_credential_id"`
	// Name of the storage credential to access the metastore storage_root.
	StorageRootCredentialName types.String `tfsdk:"storage_root_credential_name"`
	// Time at which the metastore was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the metastore.
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *MetastoreInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MetastoreInfo) {
}

func (to *MetastoreInfo) SyncFieldsDuringRead(ctx context.Context, from MetastoreInfo) {
}

func (m MetastoreInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["cloud"] = attrs["cloud"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["default_data_access_config_id"] = attrs["default_data_access_config_id"].SetOptional()
	attrs["delta_sharing_organization_name"] = attrs["delta_sharing_organization_name"].SetOptional()
	attrs["delta_sharing_recipient_token_lifetime_in_seconds"] = attrs["delta_sharing_recipient_token_lifetime_in_seconds"].SetOptional()
	attrs["delta_sharing_scope"] = attrs["delta_sharing_scope"].SetOptional()
	attrs["external_access_enabled"] = attrs["external_access_enabled"].SetOptional()
	attrs["global_metastore_id"] = attrs["global_metastore_id"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["privilege_model_version"] = attrs["privilege_model_version"].SetOptional()
	attrs["region"] = attrs["region"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()
	attrs["storage_root_credential_id"] = attrs["storage_root_credential_id"].SetOptional()
	attrs["storage_root_credential_name"] = attrs["storage_root_credential_name"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MetastoreInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MetastoreInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MetastoreInfo
// only implements ToObjectValue() and Type().
func (m MetastoreInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"cloud":                           m.Cloud,
			"created_at":                      m.CreatedAt,
			"created_by":                      m.CreatedBy,
			"default_data_access_config_id":   m.DefaultDataAccessConfigId,
			"delta_sharing_organization_name": m.DeltaSharingOrganizationName,
			"delta_sharing_recipient_token_lifetime_in_seconds": m.DeltaSharingRecipientTokenLifetimeInSeconds,
			"delta_sharing_scope":                               m.DeltaSharingScope,
			"external_access_enabled":                           m.ExternalAccessEnabled,
			"global_metastore_id":                               m.GlobalMetastoreId,
			"metastore_id":                                      m.MetastoreId,
			"name":                                              m.Name,
			"owner":                                             m.Owner,
			"privilege_model_version":                           m.PrivilegeModelVersion,
			"region":                                            m.Region,
			"storage_root":                                      m.StorageRoot,
			"storage_root_credential_id":                        m.StorageRootCredentialId,
			"storage_root_credential_name":                      m.StorageRootCredentialName,
			"updated_at":                                        m.UpdatedAt,
			"updated_by":                                        m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MetastoreInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"cloud":                           types.StringType,
			"created_at":                      types.Int64Type,
			"created_by":                      types.StringType,
			"default_data_access_config_id":   types.StringType,
			"delta_sharing_organization_name": types.StringType,
			"delta_sharing_recipient_token_lifetime_in_seconds": types.Int64Type,
			"delta_sharing_scope":                               types.StringType,
			"external_access_enabled":                           types.BoolType,
			"global_metastore_id":                               types.StringType,
			"metastore_id":                                      types.StringType,
			"name":                                              types.StringType,
			"owner":                                             types.StringType,
			"privilege_model_version":                           types.StringType,
			"region":                                            types.StringType,
			"storage_root":                                      types.StringType,
			"storage_root_credential_id":                        types.StringType,
			"storage_root_credential_name":                      types.StringType,
			"updated_at":                                        types.Int64Type,
			"updated_by":                                        types.StringType,
		},
	}
}

type ModelVersionInfo struct {
	// List of aliases associated with the model version
	Aliases types.List `tfsdk:"aliases"`
	// The name of the catalog containing the model version
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the model version
	Comment types.String `tfsdk:"comment"`

	CreatedAt types.Int64 `tfsdk:"created_at"`
	// The identifier of the user who created the model version
	CreatedBy types.String `tfsdk:"created_by"`
	// The unique identifier of the model version
	Id types.String `tfsdk:"id"`
	// The unique identifier of the metastore containing the model version
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The name of the parent registered model of the model version, relative to
	// parent schema
	ModelName types.String `tfsdk:"model_name"`
	// Model version dependencies, for feature-store packaged models
	ModelVersionDependencies types.Object `tfsdk:"model_version_dependencies"`
	// MLflow run ID used when creating the model version, if ``source`` was
	// generated by an experiment run stored in an MLflow tracking server
	RunId types.String `tfsdk:"run_id"`
	// ID of the Databricks workspace containing the MLflow run that generated
	// this model version, if applicable
	RunWorkspaceId types.Int64 `tfsdk:"run_workspace_id"`
	// The name of the schema containing the model version, relative to parent
	// catalog
	SchemaName types.String `tfsdk:"schema_name"`
	// URI indicating the location of the source artifacts (files) for the model
	// version
	Source types.String `tfsdk:"source"`
	// Current status of the model version. Newly created model versions start
	// in PENDING_REGISTRATION status, then move to READY status once the model
	// version files are uploaded and the model version is finalized. Only model
	// versions in READY status can be loaded for inference or served.
	Status types.String `tfsdk:"status"`
	// The storage location on the cloud under which model version data files
	// are stored
	StorageLocation types.String `tfsdk:"storage_location"`

	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// The identifier of the user who updated the model version last time
	UpdatedBy types.String `tfsdk:"updated_by"`
	// Integer model version number, used to reference the model version in API
	// requests.
	Version types.Int64 `tfsdk:"version"`
}

func (to *ModelVersionInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ModelVersionInfo) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
	if !from.ModelVersionDependencies.IsNull() && !from.ModelVersionDependencies.IsUnknown() {
		if toModelVersionDependencies, ok := to.GetModelVersionDependencies(ctx); ok {
			if fromModelVersionDependencies, ok := from.GetModelVersionDependencies(ctx); ok {
				// Recursively sync the fields of ModelVersionDependencies
				toModelVersionDependencies.SyncFieldsDuringCreateOrUpdate(ctx, fromModelVersionDependencies)
				to.SetModelVersionDependencies(ctx, toModelVersionDependencies)
			}
		}
	}
}

func (to *ModelVersionInfo) SyncFieldsDuringRead(ctx context.Context, from ModelVersionInfo) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
	if !from.ModelVersionDependencies.IsNull() && !from.ModelVersionDependencies.IsUnknown() {
		if toModelVersionDependencies, ok := to.GetModelVersionDependencies(ctx); ok {
			if fromModelVersionDependencies, ok := from.GetModelVersionDependencies(ctx); ok {
				toModelVersionDependencies.SyncFieldsDuringRead(ctx, fromModelVersionDependencies)
				to.SetModelVersionDependencies(ctx, toModelVersionDependencies)
			}
		}
	}
}

func (m ModelVersionInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aliases"] = attrs["aliases"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["id"] = attrs["id"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["model_name"] = attrs["model_name"].SetOptional()
	attrs["model_version_dependencies"] = attrs["model_version_dependencies"].SetOptional()
	attrs["run_id"] = attrs["run_id"].SetOptional()
	attrs["run_workspace_id"] = attrs["run_workspace_id"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["source"] = attrs["source"].SetOptional()
	attrs["status"] = attrs["status"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["version"] = attrs["version"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ModelVersionInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ModelVersionInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aliases":                    reflect.TypeOf(RegisteredModelAlias{}),
		"model_version_dependencies": reflect.TypeOf(DependencyList{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ModelVersionInfo
// only implements ToObjectValue() and Type().
func (m ModelVersionInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aliases":                    m.Aliases,
			"catalog_name":               m.CatalogName,
			"comment":                    m.Comment,
			"created_at":                 m.CreatedAt,
			"created_by":                 m.CreatedBy,
			"id":                         m.Id,
			"metastore_id":               m.MetastoreId,
			"model_name":                 m.ModelName,
			"model_version_dependencies": m.ModelVersionDependencies,
			"run_id":                     m.RunId,
			"run_workspace_id":           m.RunWorkspaceId,
			"schema_name":                m.SchemaName,
			"source":                     m.Source,
			"status":                     m.Status,
			"storage_location":           m.StorageLocation,
			"updated_at":                 m.UpdatedAt,
			"updated_by":                 m.UpdatedBy,
			"version":                    m.Version,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ModelVersionInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aliases": basetypes.ListType{
				ElemType: RegisteredModelAlias{}.Type(ctx),
			},
			"catalog_name":               types.StringType,
			"comment":                    types.StringType,
			"created_at":                 types.Int64Type,
			"created_by":                 types.StringType,
			"id":                         types.StringType,
			"metastore_id":               types.StringType,
			"model_name":                 types.StringType,
			"model_version_dependencies": DependencyList{}.Type(ctx),
			"run_id":                     types.StringType,
			"run_workspace_id":           types.Int64Type,
			"schema_name":                types.StringType,
			"source":                     types.StringType,
			"status":                     types.StringType,
			"storage_location":           types.StringType,
			"updated_at":                 types.Int64Type,
			"updated_by":                 types.StringType,
			"version":                    types.Int64Type,
		},
	}
}

// GetAliases returns the value of the Aliases field in ModelVersionInfo as
// a slice of RegisteredModelAlias values.
// If the field is unknown or null, the boolean return value is false.
func (m *ModelVersionInfo) GetAliases(ctx context.Context) ([]RegisteredModelAlias, bool) {
	if m.Aliases.IsNull() || m.Aliases.IsUnknown() {
		return nil, false
	}
	var v []RegisteredModelAlias
	d := m.Aliases.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAliases sets the value of the Aliases field in ModelVersionInfo.
func (m *ModelVersionInfo) SetAliases(ctx context.Context, v []RegisteredModelAlias) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["aliases"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Aliases = types.ListValueMust(t, vs)
}

// GetModelVersionDependencies returns the value of the ModelVersionDependencies field in ModelVersionInfo as
// a DependencyList value.
// If the field is unknown or null, the boolean return value is false.
func (m *ModelVersionInfo) GetModelVersionDependencies(ctx context.Context) (DependencyList, bool) {
	var e DependencyList
	if m.ModelVersionDependencies.IsNull() || m.ModelVersionDependencies.IsUnknown() {
		return e, false
	}
	var v DependencyList
	d := m.ModelVersionDependencies.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetModelVersionDependencies sets the value of the ModelVersionDependencies field in ModelVersionInfo.
func (m *ModelVersionInfo) SetModelVersionDependencies(ctx context.Context, v DependencyList) {
	vs := v.ToObjectValue(ctx)
	m.ModelVersionDependencies = vs
}

type MonitorCronSchedule struct {
	// Read only field that indicates whether a schedule is paused or not.
	PauseStatus types.String `tfsdk:"pause_status"`
	// The expression that determines when to run the monitor. See [examples].
	//
	// [examples]: https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html
	QuartzCronExpression types.String `tfsdk:"quartz_cron_expression"`
	// The timezone id (e.g., ``PST``) in which to evaluate the quartz
	// expression.
	TimezoneId types.String `tfsdk:"timezone_id"`
}

func (to *MonitorCronSchedule) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorCronSchedule) {
}

func (to *MonitorCronSchedule) SyncFieldsDuringRead(ctx context.Context, from MonitorCronSchedule) {
}

func (m MonitorCronSchedule) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["pause_status"] = attrs["pause_status"].SetOptional()
	attrs["quartz_cron_expression"] = attrs["quartz_cron_expression"].SetRequired()
	attrs["timezone_id"] = attrs["timezone_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorCronSchedule.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorCronSchedule) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorCronSchedule
// only implements ToObjectValue() and Type().
func (m MonitorCronSchedule) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"pause_status":           m.PauseStatus,
			"quartz_cron_expression": m.QuartzCronExpression,
			"timezone_id":            m.TimezoneId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorCronSchedule) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"pause_status":           types.StringType,
			"quartz_cron_expression": types.StringType,
			"timezone_id":            types.StringType,
		},
	}
}

// Data classification related configuration.
type MonitorDataClassificationConfig struct {
	// Whether to enable data classification.
	Enabled types.Bool `tfsdk:"enabled"`
}

func (to *MonitorDataClassificationConfig) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorDataClassificationConfig) {
}

func (to *MonitorDataClassificationConfig) SyncFieldsDuringRead(ctx context.Context, from MonitorDataClassificationConfig) {
}

func (m MonitorDataClassificationConfig) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["enabled"] = attrs["enabled"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorDataClassificationConfig.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorDataClassificationConfig) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorDataClassificationConfig
// only implements ToObjectValue() and Type().
func (m MonitorDataClassificationConfig) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"enabled": m.Enabled,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorDataClassificationConfig) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"enabled": types.BoolType,
		},
	}
}

type MonitorDestination struct {
	// The list of email addresses to send the notification to. A maximum of 5
	// email addresses is supported.
	EmailAddresses types.List `tfsdk:"email_addresses"`
}

func (to *MonitorDestination) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorDestination) {
	if !from.EmailAddresses.IsNull() && !from.EmailAddresses.IsUnknown() && to.EmailAddresses.IsNull() && len(from.EmailAddresses.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for EmailAddresses, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.EmailAddresses = from.EmailAddresses
	}
}

func (to *MonitorDestination) SyncFieldsDuringRead(ctx context.Context, from MonitorDestination) {
	if !from.EmailAddresses.IsNull() && !from.EmailAddresses.IsUnknown() && to.EmailAddresses.IsNull() && len(from.EmailAddresses.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for EmailAddresses, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.EmailAddresses = from.EmailAddresses
	}
}

func (m MonitorDestination) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["email_addresses"] = attrs["email_addresses"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorDestination.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorDestination) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"email_addresses": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorDestination
// only implements ToObjectValue() and Type().
func (m MonitorDestination) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"email_addresses": m.EmailAddresses,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorDestination) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"email_addresses": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetEmailAddresses returns the value of the EmailAddresses field in MonitorDestination as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorDestination) GetEmailAddresses(ctx context.Context) ([]types.String, bool) {
	if m.EmailAddresses.IsNull() || m.EmailAddresses.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.EmailAddresses.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEmailAddresses sets the value of the EmailAddresses field in MonitorDestination.
func (m *MonitorDestination) SetEmailAddresses(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["email_addresses"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.EmailAddresses = types.ListValueMust(t, vs)
}

type MonitorInferenceLog struct {
	// List of granularities to use when aggregating data into time windows
	// based on their timestamp.
	Granularities types.List `tfsdk:"granularities"`
	// Column for the label.
	LabelCol types.String `tfsdk:"label_col"`
	// Column for the model identifier.
	ModelIdCol types.String `tfsdk:"model_id_col"`
	// Column for the prediction.
	PredictionCol types.String `tfsdk:"prediction_col"`
	// Column for prediction probabilities
	PredictionProbaCol types.String `tfsdk:"prediction_proba_col"`
	// Problem type the model aims to solve.
	ProblemType types.String `tfsdk:"problem_type"`
	// Column for the timestamp.
	TimestampCol types.String `tfsdk:"timestamp_col"`
}

func (to *MonitorInferenceLog) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorInferenceLog) {
}

func (to *MonitorInferenceLog) SyncFieldsDuringRead(ctx context.Context, from MonitorInferenceLog) {
}

func (m MonitorInferenceLog) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["granularities"] = attrs["granularities"].SetRequired()
	attrs["label_col"] = attrs["label_col"].SetOptional()
	attrs["model_id_col"] = attrs["model_id_col"].SetRequired()
	attrs["prediction_col"] = attrs["prediction_col"].SetRequired()
	attrs["prediction_proba_col"] = attrs["prediction_proba_col"].SetOptional()
	attrs["problem_type"] = attrs["problem_type"].SetRequired()
	attrs["timestamp_col"] = attrs["timestamp_col"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorInferenceLog.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorInferenceLog) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"granularities": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorInferenceLog
// only implements ToObjectValue() and Type().
func (m MonitorInferenceLog) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"granularities":        m.Granularities,
			"label_col":            m.LabelCol,
			"model_id_col":         m.ModelIdCol,
			"prediction_col":       m.PredictionCol,
			"prediction_proba_col": m.PredictionProbaCol,
			"problem_type":         m.ProblemType,
			"timestamp_col":        m.TimestampCol,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorInferenceLog) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"granularities": basetypes.ListType{
				ElemType: types.StringType,
			},
			"label_col":            types.StringType,
			"model_id_col":         types.StringType,
			"prediction_col":       types.StringType,
			"prediction_proba_col": types.StringType,
			"problem_type":         types.StringType,
			"timestamp_col":        types.StringType,
		},
	}
}

// GetGranularities returns the value of the Granularities field in MonitorInferenceLog as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInferenceLog) GetGranularities(ctx context.Context) ([]types.String, bool) {
	if m.Granularities.IsNull() || m.Granularities.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Granularities.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetGranularities sets the value of the Granularities field in MonitorInferenceLog.
func (m *MonitorInferenceLog) SetGranularities(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["granularities"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Granularities = types.ListValueMust(t, vs)
}

type MonitorInfo struct {
	// [Create:REQ Update:IGN] Field for specifying the absolute path to a
	// custom directory to store data-monitoring assets. Normally prepopulated
	// to a default user location via UI and Python APIs.
	AssetsDir types.String `tfsdk:"assets_dir"`
	// [Create:OPT Update:OPT] Baseline table name. Baseline data is used to
	// compute drift from the data in the monitored `table_name`. The baseline
	// table and the monitored table shall have the same schema.
	BaselineTableName types.String `tfsdk:"baseline_table_name"`
	// [Create:OPT Update:OPT] Custom metrics.
	CustomMetrics types.List `tfsdk:"custom_metrics"`
	// [Create:ERR Update:OPT] Id of dashboard that visualizes the computed
	// metrics. This can be empty if the monitor is in PENDING state.
	DashboardId types.String `tfsdk:"dashboard_id"`
	// [Create:OPT Update:OPT] Data classification related config.
	DataClassificationConfig types.Object `tfsdk:"data_classification_config"`
	// [Create:ERR Update:IGN] Table that stores drift metrics data. Format:
	// `catalog.schema.table_name`.
	DriftMetricsTableName types.String `tfsdk:"drift_metrics_table_name"`

	InferenceLog types.Object `tfsdk:"inference_log"`
	// [Create:ERR Update:IGN] The latest error message for a monitor failure.
	LatestMonitorFailureMsg types.String `tfsdk:"latest_monitor_failure_msg"`
	// [Create:ERR Update:IGN] Represents the current monitor configuration
	// version in use. The version will be represented in a numeric fashion
	// (1,2,3...). The field has flexibility to take on negative values, which
	// can indicate corrupted monitor_version numbers.
	MonitorVersion types.Int64 `tfsdk:"monitor_version"`
	// [Create:OPT Update:OPT] Field for specifying notification settings.
	Notifications types.Object `tfsdk:"notifications"`
	// [Create:REQ Update:REQ] Schema where output tables are created. Needs to
	// be in 2-level format {catalog}.{schema}
	OutputSchemaName types.String `tfsdk:"output_schema_name"`
	// [Create:ERR Update:IGN] Table that stores profile metrics data. Format:
	// `catalog.schema.table_name`.
	ProfileMetricsTableName types.String `tfsdk:"profile_metrics_table_name"`
	// [Create:OPT Update:OPT] The monitor schedule.
	Schedule types.Object `tfsdk:"schedule"`
	// [Create:OPT Update:OPT] List of column expressions to slice data with for
	// targeted analysis. The data is grouped by each expression independently,
	// resulting in a separate slice for each predicate and its complements. For
	// example `slicing_exprs=[“col_1”, “col_2 > 10”]` will generate the
	// following slices: two slices for `col_2 > 10` (True and False), and one
	// slice per unique value in `col1`. For high-cardinality columns, only the
	// top 100 unique values by frequency will generate slices.
	SlicingExprs types.List `tfsdk:"slicing_exprs"`
	// Configuration for monitoring snapshot tables.
	Snapshot types.Object `tfsdk:"snapshot"`
	// [Create:ERR Update:IGN] The monitor status.
	Status types.String `tfsdk:"status"`
	// [Create:ERR Update:IGN] UC table to monitor. Format:
	// `catalog.schema.table_name`
	TableName types.String `tfsdk:"table_name"`
	// Configuration for monitoring time series tables.
	TimeSeries types.Object `tfsdk:"time_series"`
}

func (to *MonitorInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorInfo) {
	if !from.CustomMetrics.IsNull() && !from.CustomMetrics.IsUnknown() && to.CustomMetrics.IsNull() && len(from.CustomMetrics.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomMetrics, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomMetrics = from.CustomMetrics
	}
	if !from.DataClassificationConfig.IsNull() && !from.DataClassificationConfig.IsUnknown() {
		if toDataClassificationConfig, ok := to.GetDataClassificationConfig(ctx); ok {
			if fromDataClassificationConfig, ok := from.GetDataClassificationConfig(ctx); ok {
				// Recursively sync the fields of DataClassificationConfig
				toDataClassificationConfig.SyncFieldsDuringCreateOrUpdate(ctx, fromDataClassificationConfig)
				to.SetDataClassificationConfig(ctx, toDataClassificationConfig)
			}
		}
	}
	if !from.InferenceLog.IsNull() && !from.InferenceLog.IsUnknown() {
		if toInferenceLog, ok := to.GetInferenceLog(ctx); ok {
			if fromInferenceLog, ok := from.GetInferenceLog(ctx); ok {
				// Recursively sync the fields of InferenceLog
				toInferenceLog.SyncFieldsDuringCreateOrUpdate(ctx, fromInferenceLog)
				to.SetInferenceLog(ctx, toInferenceLog)
			}
		}
	}
	if !from.Notifications.IsNull() && !from.Notifications.IsUnknown() {
		if toNotifications, ok := to.GetNotifications(ctx); ok {
			if fromNotifications, ok := from.GetNotifications(ctx); ok {
				// Recursively sync the fields of Notifications
				toNotifications.SyncFieldsDuringCreateOrUpdate(ctx, fromNotifications)
				to.SetNotifications(ctx, toNotifications)
			}
		}
	}
	if !from.Schedule.IsNull() && !from.Schedule.IsUnknown() {
		if toSchedule, ok := to.GetSchedule(ctx); ok {
			if fromSchedule, ok := from.GetSchedule(ctx); ok {
				// Recursively sync the fields of Schedule
				toSchedule.SyncFieldsDuringCreateOrUpdate(ctx, fromSchedule)
				to.SetSchedule(ctx, toSchedule)
			}
		}
	}
	if !from.SlicingExprs.IsNull() && !from.SlicingExprs.IsUnknown() && to.SlicingExprs.IsNull() && len(from.SlicingExprs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SlicingExprs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SlicingExprs = from.SlicingExprs
	}
	if !from.Snapshot.IsNull() && !from.Snapshot.IsUnknown() {
		if toSnapshot, ok := to.GetSnapshot(ctx); ok {
			if fromSnapshot, ok := from.GetSnapshot(ctx); ok {
				// Recursively sync the fields of Snapshot
				toSnapshot.SyncFieldsDuringCreateOrUpdate(ctx, fromSnapshot)
				to.SetSnapshot(ctx, toSnapshot)
			}
		}
	}
	if !from.TimeSeries.IsNull() && !from.TimeSeries.IsUnknown() {
		if toTimeSeries, ok := to.GetTimeSeries(ctx); ok {
			if fromTimeSeries, ok := from.GetTimeSeries(ctx); ok {
				// Recursively sync the fields of TimeSeries
				toTimeSeries.SyncFieldsDuringCreateOrUpdate(ctx, fromTimeSeries)
				to.SetTimeSeries(ctx, toTimeSeries)
			}
		}
	}
}

func (to *MonitorInfo) SyncFieldsDuringRead(ctx context.Context, from MonitorInfo) {
	if !from.CustomMetrics.IsNull() && !from.CustomMetrics.IsUnknown() && to.CustomMetrics.IsNull() && len(from.CustomMetrics.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomMetrics, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomMetrics = from.CustomMetrics
	}
	if !from.DataClassificationConfig.IsNull() && !from.DataClassificationConfig.IsUnknown() {
		if toDataClassificationConfig, ok := to.GetDataClassificationConfig(ctx); ok {
			if fromDataClassificationConfig, ok := from.GetDataClassificationConfig(ctx); ok {
				toDataClassificationConfig.SyncFieldsDuringRead(ctx, fromDataClassificationConfig)
				to.SetDataClassificationConfig(ctx, toDataClassificationConfig)
			}
		}
	}
	if !from.InferenceLog.IsNull() && !from.InferenceLog.IsUnknown() {
		if toInferenceLog, ok := to.GetInferenceLog(ctx); ok {
			if fromInferenceLog, ok := from.GetInferenceLog(ctx); ok {
				toInferenceLog.SyncFieldsDuringRead(ctx, fromInferenceLog)
				to.SetInferenceLog(ctx, toInferenceLog)
			}
		}
	}
	if !from.Notifications.IsNull() && !from.Notifications.IsUnknown() {
		if toNotifications, ok := to.GetNotifications(ctx); ok {
			if fromNotifications, ok := from.GetNotifications(ctx); ok {
				toNotifications.SyncFieldsDuringRead(ctx, fromNotifications)
				to.SetNotifications(ctx, toNotifications)
			}
		}
	}
	if !from.Schedule.IsNull() && !from.Schedule.IsUnknown() {
		if toSchedule, ok := to.GetSchedule(ctx); ok {
			if fromSchedule, ok := from.GetSchedule(ctx); ok {
				toSchedule.SyncFieldsDuringRead(ctx, fromSchedule)
				to.SetSchedule(ctx, toSchedule)
			}
		}
	}
	if !from.SlicingExprs.IsNull() && !from.SlicingExprs.IsUnknown() && to.SlicingExprs.IsNull() && len(from.SlicingExprs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SlicingExprs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SlicingExprs = from.SlicingExprs
	}
	if !from.Snapshot.IsNull() && !from.Snapshot.IsUnknown() {
		if toSnapshot, ok := to.GetSnapshot(ctx); ok {
			if fromSnapshot, ok := from.GetSnapshot(ctx); ok {
				toSnapshot.SyncFieldsDuringRead(ctx, fromSnapshot)
				to.SetSnapshot(ctx, toSnapshot)
			}
		}
	}
	if !from.TimeSeries.IsNull() && !from.TimeSeries.IsUnknown() {
		if toTimeSeries, ok := to.GetTimeSeries(ctx); ok {
			if fromTimeSeries, ok := from.GetTimeSeries(ctx); ok {
				toTimeSeries.SyncFieldsDuringRead(ctx, fromTimeSeries)
				to.SetTimeSeries(ctx, toTimeSeries)
			}
		}
	}
}

func (m MonitorInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["assets_dir"] = attrs["assets_dir"].SetOptional()
	attrs["baseline_table_name"] = attrs["baseline_table_name"].SetOptional()
	attrs["custom_metrics"] = attrs["custom_metrics"].SetOptional()
	attrs["dashboard_id"] = attrs["dashboard_id"].SetOptional()
	attrs["data_classification_config"] = attrs["data_classification_config"].SetOptional()
	attrs["drift_metrics_table_name"] = attrs["drift_metrics_table_name"].SetRequired()
	attrs["inference_log"] = attrs["inference_log"].SetOptional()
	attrs["latest_monitor_failure_msg"] = attrs["latest_monitor_failure_msg"].SetOptional()
	attrs["monitor_version"] = attrs["monitor_version"].SetRequired()
	attrs["notifications"] = attrs["notifications"].SetOptional()
	attrs["output_schema_name"] = attrs["output_schema_name"].SetRequired()
	attrs["profile_metrics_table_name"] = attrs["profile_metrics_table_name"].SetRequired()
	attrs["schedule"] = attrs["schedule"].SetOptional()
	attrs["slicing_exprs"] = attrs["slicing_exprs"].SetOptional()
	attrs["snapshot"] = attrs["snapshot"].SetOptional()
	attrs["status"] = attrs["status"].SetRequired()
	attrs["table_name"] = attrs["table_name"].SetRequired()
	attrs["time_series"] = attrs["time_series"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"custom_metrics":             reflect.TypeOf(MonitorMetric{}),
		"data_classification_config": reflect.TypeOf(MonitorDataClassificationConfig{}),
		"inference_log":              reflect.TypeOf(MonitorInferenceLog{}),
		"notifications":              reflect.TypeOf(MonitorNotifications{}),
		"schedule":                   reflect.TypeOf(MonitorCronSchedule{}),
		"slicing_exprs":              reflect.TypeOf(types.String{}),
		"snapshot":                   reflect.TypeOf(MonitorSnapshot{}),
		"time_series":                reflect.TypeOf(MonitorTimeSeries{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorInfo
// only implements ToObjectValue() and Type().
func (m MonitorInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"assets_dir":                 m.AssetsDir,
			"baseline_table_name":        m.BaselineTableName,
			"custom_metrics":             m.CustomMetrics,
			"dashboard_id":               m.DashboardId,
			"data_classification_config": m.DataClassificationConfig,
			"drift_metrics_table_name":   m.DriftMetricsTableName,
			"inference_log":              m.InferenceLog,
			"latest_monitor_failure_msg": m.LatestMonitorFailureMsg,
			"monitor_version":            m.MonitorVersion,
			"notifications":              m.Notifications,
			"output_schema_name":         m.OutputSchemaName,
			"profile_metrics_table_name": m.ProfileMetricsTableName,
			"schedule":                   m.Schedule,
			"slicing_exprs":              m.SlicingExprs,
			"snapshot":                   m.Snapshot,
			"status":                     m.Status,
			"table_name":                 m.TableName,
			"time_series":                m.TimeSeries,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"assets_dir":          types.StringType,
			"baseline_table_name": types.StringType,
			"custom_metrics": basetypes.ListType{
				ElemType: MonitorMetric{}.Type(ctx),
			},
			"dashboard_id":               types.StringType,
			"data_classification_config": MonitorDataClassificationConfig{}.Type(ctx),
			"drift_metrics_table_name":   types.StringType,
			"inference_log":              MonitorInferenceLog{}.Type(ctx),
			"latest_monitor_failure_msg": types.StringType,
			"monitor_version":            types.Int64Type,
			"notifications":              MonitorNotifications{}.Type(ctx),
			"output_schema_name":         types.StringType,
			"profile_metrics_table_name": types.StringType,
			"schedule":                   MonitorCronSchedule{}.Type(ctx),
			"slicing_exprs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"snapshot":    MonitorSnapshot{}.Type(ctx),
			"status":      types.StringType,
			"table_name":  types.StringType,
			"time_series": MonitorTimeSeries{}.Type(ctx),
		},
	}
}

// GetCustomMetrics returns the value of the CustomMetrics field in MonitorInfo as
// a slice of MonitorMetric values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetCustomMetrics(ctx context.Context) ([]MonitorMetric, bool) {
	if m.CustomMetrics.IsNull() || m.CustomMetrics.IsUnknown() {
		return nil, false
	}
	var v []MonitorMetric
	d := m.CustomMetrics.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCustomMetrics sets the value of the CustomMetrics field in MonitorInfo.
func (m *MonitorInfo) SetCustomMetrics(ctx context.Context, v []MonitorMetric) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["custom_metrics"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.CustomMetrics = types.ListValueMust(t, vs)
}

// GetDataClassificationConfig returns the value of the DataClassificationConfig field in MonitorInfo as
// a MonitorDataClassificationConfig value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetDataClassificationConfig(ctx context.Context) (MonitorDataClassificationConfig, bool) {
	var e MonitorDataClassificationConfig
	if m.DataClassificationConfig.IsNull() || m.DataClassificationConfig.IsUnknown() {
		return e, false
	}
	var v MonitorDataClassificationConfig
	d := m.DataClassificationConfig.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDataClassificationConfig sets the value of the DataClassificationConfig field in MonitorInfo.
func (m *MonitorInfo) SetDataClassificationConfig(ctx context.Context, v MonitorDataClassificationConfig) {
	vs := v.ToObjectValue(ctx)
	m.DataClassificationConfig = vs
}

// GetInferenceLog returns the value of the InferenceLog field in MonitorInfo as
// a MonitorInferenceLog value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetInferenceLog(ctx context.Context) (MonitorInferenceLog, bool) {
	var e MonitorInferenceLog
	if m.InferenceLog.IsNull() || m.InferenceLog.IsUnknown() {
		return e, false
	}
	var v MonitorInferenceLog
	d := m.InferenceLog.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInferenceLog sets the value of the InferenceLog field in MonitorInfo.
func (m *MonitorInfo) SetInferenceLog(ctx context.Context, v MonitorInferenceLog) {
	vs := v.ToObjectValue(ctx)
	m.InferenceLog = vs
}

// GetNotifications returns the value of the Notifications field in MonitorInfo as
// a MonitorNotifications value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetNotifications(ctx context.Context) (MonitorNotifications, bool) {
	var e MonitorNotifications
	if m.Notifications.IsNull() || m.Notifications.IsUnknown() {
		return e, false
	}
	var v MonitorNotifications
	d := m.Notifications.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetNotifications sets the value of the Notifications field in MonitorInfo.
func (m *MonitorInfo) SetNotifications(ctx context.Context, v MonitorNotifications) {
	vs := v.ToObjectValue(ctx)
	m.Notifications = vs
}

// GetSchedule returns the value of the Schedule field in MonitorInfo as
// a MonitorCronSchedule value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetSchedule(ctx context.Context) (MonitorCronSchedule, bool) {
	var e MonitorCronSchedule
	if m.Schedule.IsNull() || m.Schedule.IsUnknown() {
		return e, false
	}
	var v MonitorCronSchedule
	d := m.Schedule.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSchedule sets the value of the Schedule field in MonitorInfo.
func (m *MonitorInfo) SetSchedule(ctx context.Context, v MonitorCronSchedule) {
	vs := v.ToObjectValue(ctx)
	m.Schedule = vs
}

// GetSlicingExprs returns the value of the SlicingExprs field in MonitorInfo as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetSlicingExprs(ctx context.Context) ([]types.String, bool) {
	if m.SlicingExprs.IsNull() || m.SlicingExprs.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.SlicingExprs.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSlicingExprs sets the value of the SlicingExprs field in MonitorInfo.
func (m *MonitorInfo) SetSlicingExprs(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["slicing_exprs"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.SlicingExprs = types.ListValueMust(t, vs)
}

// GetSnapshot returns the value of the Snapshot field in MonitorInfo as
// a MonitorSnapshot value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetSnapshot(ctx context.Context) (MonitorSnapshot, bool) {
	var e MonitorSnapshot
	if m.Snapshot.IsNull() || m.Snapshot.IsUnknown() {
		return e, false
	}
	var v MonitorSnapshot
	d := m.Snapshot.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSnapshot sets the value of the Snapshot field in MonitorInfo.
func (m *MonitorInfo) SetSnapshot(ctx context.Context, v MonitorSnapshot) {
	vs := v.ToObjectValue(ctx)
	m.Snapshot = vs
}

// GetTimeSeries returns the value of the TimeSeries field in MonitorInfo as
// a MonitorTimeSeries value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorInfo) GetTimeSeries(ctx context.Context) (MonitorTimeSeries, bool) {
	var e MonitorTimeSeries
	if m.TimeSeries.IsNull() || m.TimeSeries.IsUnknown() {
		return e, false
	}
	var v MonitorTimeSeries
	d := m.TimeSeries.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTimeSeries sets the value of the TimeSeries field in MonitorInfo.
func (m *MonitorInfo) SetTimeSeries(ctx context.Context, v MonitorTimeSeries) {
	vs := v.ToObjectValue(ctx)
	m.TimeSeries = vs
}

// Custom metric definition.
type MonitorMetric struct {
	// Jinja template for a SQL expression that specifies how to compute the
	// metric. See [create metric definition].
	//
	// [create metric definition]: https://docs.databricks.com/en/lakehouse-monitoring/custom-metrics.html#create-definition
	Definition types.String `tfsdk:"definition"`
	// A list of column names in the input table the metric should be computed
	// for. Can use ``":table"`` to indicate that the metric needs information
	// from multiple columns.
	InputColumns types.List `tfsdk:"input_columns"`
	// Name of the metric in the output tables.
	Name types.String `tfsdk:"name"`
	// The output type of the custom metric.
	OutputDataType types.String `tfsdk:"output_data_type"`
	// Can only be one of ``"CUSTOM_METRIC_TYPE_AGGREGATE"``,
	// ``"CUSTOM_METRIC_TYPE_DERIVED"``, or ``"CUSTOM_METRIC_TYPE_DRIFT"``. The
	// ``"CUSTOM_METRIC_TYPE_AGGREGATE"`` and ``"CUSTOM_METRIC_TYPE_DERIVED"``
	// metrics are computed on a single table, whereas the
	// ``"CUSTOM_METRIC_TYPE_DRIFT"`` compare metrics across baseline and input
	// table, or across the two consecutive time windows. -
	// CUSTOM_METRIC_TYPE_AGGREGATE: only depend on the existing columns in your
	// table - CUSTOM_METRIC_TYPE_DERIVED: depend on previously computed
	// aggregate metrics - CUSTOM_METRIC_TYPE_DRIFT: depend on previously
	// computed aggregate or derived metrics
	Type_ types.String `tfsdk:"type"`
}

func (to *MonitorMetric) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorMetric) {
}

func (to *MonitorMetric) SyncFieldsDuringRead(ctx context.Context, from MonitorMetric) {
}

func (m MonitorMetric) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["definition"] = attrs["definition"].SetRequired()
	attrs["input_columns"] = attrs["input_columns"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["output_data_type"] = attrs["output_data_type"].SetRequired()
	attrs["type"] = attrs["type"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorMetric.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorMetric) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"input_columns": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorMetric
// only implements ToObjectValue() and Type().
func (m MonitorMetric) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"definition":       m.Definition,
			"input_columns":    m.InputColumns,
			"name":             m.Name,
			"output_data_type": m.OutputDataType,
			"type":             m.Type_,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorMetric) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"definition": types.StringType,
			"input_columns": basetypes.ListType{
				ElemType: types.StringType,
			},
			"name":             types.StringType,
			"output_data_type": types.StringType,
			"type":             types.StringType,
		},
	}
}

// GetInputColumns returns the value of the InputColumns field in MonitorMetric as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorMetric) GetInputColumns(ctx context.Context) ([]types.String, bool) {
	if m.InputColumns.IsNull() || m.InputColumns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.InputColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInputColumns sets the value of the InputColumns field in MonitorMetric.
func (m *MonitorMetric) SetInputColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["input_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.InputColumns = types.ListValueMust(t, vs)
}

type MonitorNotifications struct {
	// Destinations to send notifications on failure/timeout.
	OnFailure types.Object `tfsdk:"on_failure"`
	// Destinations to send notifications on new classification tag detected.
	OnNewClassificationTagDetected types.Object `tfsdk:"on_new_classification_tag_detected"`
}

func (to *MonitorNotifications) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorNotifications) {
	if !from.OnFailure.IsNull() && !from.OnFailure.IsUnknown() {
		if toOnFailure, ok := to.GetOnFailure(ctx); ok {
			if fromOnFailure, ok := from.GetOnFailure(ctx); ok {
				// Recursively sync the fields of OnFailure
				toOnFailure.SyncFieldsDuringCreateOrUpdate(ctx, fromOnFailure)
				to.SetOnFailure(ctx, toOnFailure)
			}
		}
	}
	if !from.OnNewClassificationTagDetected.IsNull() && !from.OnNewClassificationTagDetected.IsUnknown() {
		if toOnNewClassificationTagDetected, ok := to.GetOnNewClassificationTagDetected(ctx); ok {
			if fromOnNewClassificationTagDetected, ok := from.GetOnNewClassificationTagDetected(ctx); ok {
				// Recursively sync the fields of OnNewClassificationTagDetected
				toOnNewClassificationTagDetected.SyncFieldsDuringCreateOrUpdate(ctx, fromOnNewClassificationTagDetected)
				to.SetOnNewClassificationTagDetected(ctx, toOnNewClassificationTagDetected)
			}
		}
	}
}

func (to *MonitorNotifications) SyncFieldsDuringRead(ctx context.Context, from MonitorNotifications) {
	if !from.OnFailure.IsNull() && !from.OnFailure.IsUnknown() {
		if toOnFailure, ok := to.GetOnFailure(ctx); ok {
			if fromOnFailure, ok := from.GetOnFailure(ctx); ok {
				toOnFailure.SyncFieldsDuringRead(ctx, fromOnFailure)
				to.SetOnFailure(ctx, toOnFailure)
			}
		}
	}
	if !from.OnNewClassificationTagDetected.IsNull() && !from.OnNewClassificationTagDetected.IsUnknown() {
		if toOnNewClassificationTagDetected, ok := to.GetOnNewClassificationTagDetected(ctx); ok {
			if fromOnNewClassificationTagDetected, ok := from.GetOnNewClassificationTagDetected(ctx); ok {
				toOnNewClassificationTagDetected.SyncFieldsDuringRead(ctx, fromOnNewClassificationTagDetected)
				to.SetOnNewClassificationTagDetected(ctx, toOnNewClassificationTagDetected)
			}
		}
	}
}

func (m MonitorNotifications) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["on_failure"] = attrs["on_failure"].SetOptional()
	attrs["on_new_classification_tag_detected"] = attrs["on_new_classification_tag_detected"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorNotifications.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorNotifications) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"on_failure":                         reflect.TypeOf(MonitorDestination{}),
		"on_new_classification_tag_detected": reflect.TypeOf(MonitorDestination{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorNotifications
// only implements ToObjectValue() and Type().
func (m MonitorNotifications) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"on_failure":                         m.OnFailure,
			"on_new_classification_tag_detected": m.OnNewClassificationTagDetected,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorNotifications) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"on_failure":                         MonitorDestination{}.Type(ctx),
			"on_new_classification_tag_detected": MonitorDestination{}.Type(ctx),
		},
	}
}

// GetOnFailure returns the value of the OnFailure field in MonitorNotifications as
// a MonitorDestination value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorNotifications) GetOnFailure(ctx context.Context) (MonitorDestination, bool) {
	var e MonitorDestination
	if m.OnFailure.IsNull() || m.OnFailure.IsUnknown() {
		return e, false
	}
	var v MonitorDestination
	d := m.OnFailure.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOnFailure sets the value of the OnFailure field in MonitorNotifications.
func (m *MonitorNotifications) SetOnFailure(ctx context.Context, v MonitorDestination) {
	vs := v.ToObjectValue(ctx)
	m.OnFailure = vs
}

// GetOnNewClassificationTagDetected returns the value of the OnNewClassificationTagDetected field in MonitorNotifications as
// a MonitorDestination value.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorNotifications) GetOnNewClassificationTagDetected(ctx context.Context) (MonitorDestination, bool) {
	var e MonitorDestination
	if m.OnNewClassificationTagDetected.IsNull() || m.OnNewClassificationTagDetected.IsUnknown() {
		return e, false
	}
	var v MonitorDestination
	d := m.OnNewClassificationTagDetected.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOnNewClassificationTagDetected sets the value of the OnNewClassificationTagDetected field in MonitorNotifications.
func (m *MonitorNotifications) SetOnNewClassificationTagDetected(ctx context.Context, v MonitorDestination) {
	vs := v.ToObjectValue(ctx)
	m.OnNewClassificationTagDetected = vs
}

type MonitorRefreshInfo struct {
	// Time at which refresh operation completed (milliseconds since 1/1/1970
	// UTC).
	EndTimeMs types.Int64 `tfsdk:"end_time_ms"`
	// An optional message to give insight into the current state of the job
	// (e.g. FAILURE messages).
	Message types.String `tfsdk:"message"`
	// Unique id of the refresh operation.
	RefreshId types.Int64 `tfsdk:"refresh_id"`
	// Time at which refresh operation was initiated (milliseconds since
	// 1/1/1970 UTC).
	StartTimeMs types.Int64 `tfsdk:"start_time_ms"`
	// The current state of the refresh.
	State types.String `tfsdk:"state"`
	// The method by which the refresh was triggered.
	Trigger types.String `tfsdk:"trigger"`
}

func (to *MonitorRefreshInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorRefreshInfo) {
}

func (to *MonitorRefreshInfo) SyncFieldsDuringRead(ctx context.Context, from MonitorRefreshInfo) {
}

func (m MonitorRefreshInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["end_time_ms"] = attrs["end_time_ms"].SetOptional()
	attrs["message"] = attrs["message"].SetOptional()
	attrs["refresh_id"] = attrs["refresh_id"].SetRequired()
	attrs["start_time_ms"] = attrs["start_time_ms"].SetRequired()
	attrs["state"] = attrs["state"].SetRequired()
	attrs["trigger"] = attrs["trigger"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorRefreshInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorRefreshInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorRefreshInfo
// only implements ToObjectValue() and Type().
func (m MonitorRefreshInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"end_time_ms":   m.EndTimeMs,
			"message":       m.Message,
			"refresh_id":    m.RefreshId,
			"start_time_ms": m.StartTimeMs,
			"state":         m.State,
			"trigger":       m.Trigger,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorRefreshInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"end_time_ms":   types.Int64Type,
			"message":       types.StringType,
			"refresh_id":    types.Int64Type,
			"start_time_ms": types.Int64Type,
			"state":         types.StringType,
			"trigger":       types.StringType,
		},
	}
}

type MonitorRefreshListResponse struct {
	// List of refreshes.
	Refreshes types.List `tfsdk:"refreshes"`
}

func (to *MonitorRefreshListResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorRefreshListResponse) {
	if !from.Refreshes.IsNull() && !from.Refreshes.IsUnknown() && to.Refreshes.IsNull() && len(from.Refreshes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Refreshes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Refreshes = from.Refreshes
	}
}

func (to *MonitorRefreshListResponse) SyncFieldsDuringRead(ctx context.Context, from MonitorRefreshListResponse) {
	if !from.Refreshes.IsNull() && !from.Refreshes.IsUnknown() && to.Refreshes.IsNull() && len(from.Refreshes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Refreshes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Refreshes = from.Refreshes
	}
}

func (m MonitorRefreshListResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["refreshes"] = attrs["refreshes"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorRefreshListResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorRefreshListResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"refreshes": reflect.TypeOf(MonitorRefreshInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorRefreshListResponse
// only implements ToObjectValue() and Type().
func (m MonitorRefreshListResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"refreshes": m.Refreshes,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorRefreshListResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"refreshes": basetypes.ListType{
				ElemType: MonitorRefreshInfo{}.Type(ctx),
			},
		},
	}
}

// GetRefreshes returns the value of the Refreshes field in MonitorRefreshListResponse as
// a slice of MonitorRefreshInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorRefreshListResponse) GetRefreshes(ctx context.Context) ([]MonitorRefreshInfo, bool) {
	if m.Refreshes.IsNull() || m.Refreshes.IsUnknown() {
		return nil, false
	}
	var v []MonitorRefreshInfo
	d := m.Refreshes.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRefreshes sets the value of the Refreshes field in MonitorRefreshListResponse.
func (m *MonitorRefreshListResponse) SetRefreshes(ctx context.Context, v []MonitorRefreshInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["refreshes"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Refreshes = types.ListValueMust(t, vs)
}

// Snapshot analysis configuration
type MonitorSnapshot struct {
}

func (to *MonitorSnapshot) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorSnapshot) {
}

func (to *MonitorSnapshot) SyncFieldsDuringRead(ctx context.Context, from MonitorSnapshot) {
}

func (m MonitorSnapshot) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorSnapshot.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorSnapshot) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorSnapshot
// only implements ToObjectValue() and Type().
func (m MonitorSnapshot) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorSnapshot) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// Time series analysis configuration.
type MonitorTimeSeries struct {
	// Granularities for aggregating data into time windows based on their
	// timestamp. Currently the following static granularities are supported:
	// {``\"5 minutes\"``, ``\"30 minutes\"``, ``\"1 hour\"``, ``\"1 day\"``,
	// ``\"\u003cn\u003e week(s)\"``, ``\"1 month\"``, ``\"1 year\"``}.
	Granularities types.List `tfsdk:"granularities"`
	// Column for the timestamp.
	TimestampCol types.String `tfsdk:"timestamp_col"`
}

func (to *MonitorTimeSeries) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from MonitorTimeSeries) {
}

func (to *MonitorTimeSeries) SyncFieldsDuringRead(ctx context.Context, from MonitorTimeSeries) {
}

func (m MonitorTimeSeries) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["granularities"] = attrs["granularities"].SetRequired()
	attrs["timestamp_col"] = attrs["timestamp_col"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in MonitorTimeSeries.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m MonitorTimeSeries) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"granularities": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, MonitorTimeSeries
// only implements ToObjectValue() and Type().
func (m MonitorTimeSeries) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"granularities": m.Granularities,
			"timestamp_col": m.TimestampCol,
		})
}

// Type implements basetypes.ObjectValuable.
func (m MonitorTimeSeries) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"granularities": basetypes.ListType{
				ElemType: types.StringType,
			},
			"timestamp_col": types.StringType,
		},
	}
}

// GetGranularities returns the value of the Granularities field in MonitorTimeSeries as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *MonitorTimeSeries) GetGranularities(ctx context.Context) ([]types.String, bool) {
	if m.Granularities.IsNull() || m.Granularities.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Granularities.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetGranularities sets the value of the Granularities field in MonitorTimeSeries.
func (m *MonitorTimeSeries) SetGranularities(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["granularities"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Granularities = types.ListValueMust(t, vs)
}

type NamedTableConstraint struct {
	// The name of the constraint.
	Name types.String `tfsdk:"name"`
}

func (to *NamedTableConstraint) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from NamedTableConstraint) {
}

func (to *NamedTableConstraint) SyncFieldsDuringRead(ctx context.Context, from NamedTableConstraint) {
}

func (m NamedTableConstraint) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in NamedTableConstraint.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m NamedTableConstraint) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, NamedTableConstraint
// only implements ToObjectValue() and Type().
func (m NamedTableConstraint) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name": m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m NamedTableConstraint) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name": types.StringType,
		},
	}
}

type NotificationDestination struct {
	// The identifier for the destination. This is the email address for EMAIL
	// destinations, the URL for URL destinations, or the unique Databricks
	// notification destination ID for all other external destinations.
	DestinationId types.String `tfsdk:"destination_id"`
	// The type of the destination.
	DestinationType types.String `tfsdk:"destination_type"`
	// This field is used to denote whether the destination is the email of the
	// owner of the securable object. The special destination cannot be assigned
	// to a securable and only represents the default destination of the
	// securable. The securable types that support default special destinations
	// are: "catalog", "external_location", "connection", "credential", and
	// "metastore". The **destination_type** of a **special_destination** is
	// always EMAIL.
	SpecialDestination types.String `tfsdk:"special_destination"`
}

func (to *NotificationDestination) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from NotificationDestination) {
}

func (to *NotificationDestination) SyncFieldsDuringRead(ctx context.Context, from NotificationDestination) {
}

func (m NotificationDestination) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["destination_id"] = attrs["destination_id"].SetOptional()
	attrs["destination_type"] = attrs["destination_type"].SetOptional()
	attrs["special_destination"] = attrs["special_destination"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in NotificationDestination.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m NotificationDestination) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, NotificationDestination
// only implements ToObjectValue() and Type().
func (m NotificationDestination) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"destination_id":      m.DestinationId,
			"destination_type":    m.DestinationType,
			"special_destination": m.SpecialDestination,
		})
}

// Type implements basetypes.ObjectValuable.
func (m NotificationDestination) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"destination_id":      types.StringType,
			"destination_type":    types.StringType,
			"special_destination": types.StringType,
		},
	}
}

// Online Table information.
type OnlineTable struct {
	// Full three-part (catalog, schema, table) name of the table.
	Name types.String `tfsdk:"name"`
	// Specification of the online table.
	Spec types.Object `tfsdk:"spec"`
	// Online Table data synchronization status
	Status types.Object `tfsdk:"status"`
	// Data serving REST API URL for this table
	TableServingUrl types.String `tfsdk:"table_serving_url"`
	// The provisioning state of the online table entity in Unity Catalog. This
	// is distinct from the state of the data synchronization pipeline (i.e. the
	// table may be in "ACTIVE" but the pipeline may be in "PROVISIONING" as it
	// runs asynchronously).
	UnityCatalogProvisioningState types.String `tfsdk:"unity_catalog_provisioning_state"`
}

func (to *OnlineTable) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from OnlineTable) {
	if !from.Spec.IsNull() && !from.Spec.IsUnknown() {
		if toSpec, ok := to.GetSpec(ctx); ok {
			if fromSpec, ok := from.GetSpec(ctx); ok {
				// Recursively sync the fields of Spec
				toSpec.SyncFieldsDuringCreateOrUpdate(ctx, fromSpec)
				to.SetSpec(ctx, toSpec)
			}
		}
	}
	if !from.Status.IsNull() && !from.Status.IsUnknown() {
		if toStatus, ok := to.GetStatus(ctx); ok {
			if fromStatus, ok := from.GetStatus(ctx); ok {
				// Recursively sync the fields of Status
				toStatus.SyncFieldsDuringCreateOrUpdate(ctx, fromStatus)
				to.SetStatus(ctx, toStatus)
			}
		}
	}
}

func (to *OnlineTable) SyncFieldsDuringRead(ctx context.Context, from OnlineTable) {
	if !from.Spec.IsNull() && !from.Spec.IsUnknown() {
		if toSpec, ok := to.GetSpec(ctx); ok {
			if fromSpec, ok := from.GetSpec(ctx); ok {
				toSpec.SyncFieldsDuringRead(ctx, fromSpec)
				to.SetSpec(ctx, toSpec)
			}
		}
	}
	if !from.Status.IsNull() && !from.Status.IsUnknown() {
		if toStatus, ok := to.GetStatus(ctx); ok {
			if fromStatus, ok := from.GetStatus(ctx); ok {
				toStatus.SyncFieldsDuringRead(ctx, fromStatus)
				to.SetStatus(ctx, toStatus)
			}
		}
	}
}

func (m OnlineTable) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetOptional()
	attrs["spec"] = attrs["spec"].SetOptional()
	attrs["status"] = attrs["status"].SetComputed()
	attrs["table_serving_url"] = attrs["table_serving_url"].SetComputed()
	attrs["unity_catalog_provisioning_state"] = attrs["unity_catalog_provisioning_state"].SetComputed()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in OnlineTable.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m OnlineTable) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"spec":   reflect.TypeOf(OnlineTableSpec{}),
		"status": reflect.TypeOf(OnlineTableStatus{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, OnlineTable
// only implements ToObjectValue() and Type().
func (m OnlineTable) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":                             m.Name,
			"spec":                             m.Spec,
			"status":                           m.Status,
			"table_serving_url":                m.TableServingUrl,
			"unity_catalog_provisioning_state": m.UnityCatalogProvisioningState,
		})
}

// Type implements basetypes.ObjectValuable.
func (m OnlineTable) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":                             types.StringType,
			"spec":                             OnlineTableSpec{}.Type(ctx),
			"status":                           OnlineTableStatus{}.Type(ctx),
			"table_serving_url":                types.StringType,
			"unity_catalog_provisioning_state": types.StringType,
		},
	}
}

// GetSpec returns the value of the Spec field in OnlineTable as
// a OnlineTableSpec value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTable) GetSpec(ctx context.Context) (OnlineTableSpec, bool) {
	var e OnlineTableSpec
	if m.Spec.IsNull() || m.Spec.IsUnknown() {
		return e, false
	}
	var v OnlineTableSpec
	d := m.Spec.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSpec sets the value of the Spec field in OnlineTable.
func (m *OnlineTable) SetSpec(ctx context.Context, v OnlineTableSpec) {
	vs := v.ToObjectValue(ctx)
	m.Spec = vs
}

// GetStatus returns the value of the Status field in OnlineTable as
// a OnlineTableStatus value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTable) GetStatus(ctx context.Context) (OnlineTableStatus, bool) {
	var e OnlineTableStatus
	if m.Status.IsNull() || m.Status.IsUnknown() {
		return e, false
	}
	var v OnlineTableStatus
	d := m.Status.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetStatus sets the value of the Status field in OnlineTable.
func (m *OnlineTable) SetStatus(ctx context.Context, v OnlineTableStatus) {
	vs := v.ToObjectValue(ctx)
	m.Status = vs
}

// Specification of an online table.
type OnlineTableSpec struct {
	// Whether to create a full-copy pipeline -- a pipeline that stops after
	// creates a full copy of the source table upon initialization and does not
	// process any change data feeds (CDFs) afterwards. The pipeline can still
	// be manually triggered afterwards, but it always perform a full copy of
	// the source table and there are no incremental updates. This mode is
	// useful for syncing views or tables without CDFs to online tables. Note
	// that the full-copy pipeline only supports "triggered" scheduling policy.
	PerformFullCopy types.Bool `tfsdk:"perform_full_copy"`
	// ID of the associated pipeline. Generated by the server - cannot be set by
	// the caller.
	PipelineId types.String `tfsdk:"pipeline_id"`
	// Primary Key columns to be used for data insert/update in the destination.
	PrimaryKeyColumns types.List `tfsdk:"primary_key_columns"`
	// Pipeline runs continuously after generating the initial data.
	RunContinuously types.Object `tfsdk:"run_continuously"`
	// Pipeline stops after generating the initial data and can be triggered
	// later (manually, through a cron job or through data triggers)
	RunTriggered types.Object `tfsdk:"run_triggered"`
	// Three-part (catalog, schema, table) name of the source Delta table.
	SourceTableFullName types.String `tfsdk:"source_table_full_name"`
	// Time series key to deduplicate (tie-break) rows with the same primary
	// key.
	TimeseriesKey types.String `tfsdk:"timeseries_key"`
}

func (to *OnlineTableSpec) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from OnlineTableSpec) {
	if !from.PrimaryKeyColumns.IsNull() && !from.PrimaryKeyColumns.IsUnknown() && to.PrimaryKeyColumns.IsNull() && len(from.PrimaryKeyColumns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrimaryKeyColumns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrimaryKeyColumns = from.PrimaryKeyColumns
	}
	if !from.RunContinuously.IsNull() && !from.RunContinuously.IsUnknown() {
		if toRunContinuously, ok := to.GetRunContinuously(ctx); ok {
			if fromRunContinuously, ok := from.GetRunContinuously(ctx); ok {
				// Recursively sync the fields of RunContinuously
				toRunContinuously.SyncFieldsDuringCreateOrUpdate(ctx, fromRunContinuously)
				to.SetRunContinuously(ctx, toRunContinuously)
			}
		}
	}
	if !from.RunTriggered.IsNull() && !from.RunTriggered.IsUnknown() {
		if toRunTriggered, ok := to.GetRunTriggered(ctx); ok {
			if fromRunTriggered, ok := from.GetRunTriggered(ctx); ok {
				// Recursively sync the fields of RunTriggered
				toRunTriggered.SyncFieldsDuringCreateOrUpdate(ctx, fromRunTriggered)
				to.SetRunTriggered(ctx, toRunTriggered)
			}
		}
	}
}

func (to *OnlineTableSpec) SyncFieldsDuringRead(ctx context.Context, from OnlineTableSpec) {
	if !from.PrimaryKeyColumns.IsNull() && !from.PrimaryKeyColumns.IsUnknown() && to.PrimaryKeyColumns.IsNull() && len(from.PrimaryKeyColumns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrimaryKeyColumns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrimaryKeyColumns = from.PrimaryKeyColumns
	}
	if !from.RunContinuously.IsNull() && !from.RunContinuously.IsUnknown() {
		if toRunContinuously, ok := to.GetRunContinuously(ctx); ok {
			if fromRunContinuously, ok := from.GetRunContinuously(ctx); ok {
				toRunContinuously.SyncFieldsDuringRead(ctx, fromRunContinuously)
				to.SetRunContinuously(ctx, toRunContinuously)
			}
		}
	}
	if !from.RunTriggered.IsNull() && !from.RunTriggered.IsUnknown() {
		if toRunTriggered, ok := to.GetRunTriggered(ctx); ok {
			if fromRunTriggered, ok := from.GetRunTriggered(ctx); ok {
				toRunTriggered.SyncFieldsDuringRead(ctx, fromRunTriggered)
				to.SetRunTriggered(ctx, toRunTriggered)
			}
		}
	}
}

func (m OnlineTableSpec) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["perform_full_copy"] = attrs["perform_full_copy"].SetOptional()
	attrs["pipeline_id"] = attrs["pipeline_id"].SetComputed()
	attrs["primary_key_columns"] = attrs["primary_key_columns"].SetOptional()
	attrs["run_continuously"] = attrs["run_continuously"].SetOptional()
	attrs["run_triggered"] = attrs["run_triggered"].SetOptional()
	attrs["source_table_full_name"] = attrs["source_table_full_name"].SetOptional()
	attrs["timeseries_key"] = attrs["timeseries_key"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in OnlineTableSpec.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m OnlineTableSpec) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"primary_key_columns": reflect.TypeOf(types.String{}),
		"run_continuously":    reflect.TypeOf(OnlineTableSpecContinuousSchedulingPolicy{}),
		"run_triggered":       reflect.TypeOf(OnlineTableSpecTriggeredSchedulingPolicy{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, OnlineTableSpec
// only implements ToObjectValue() and Type().
func (m OnlineTableSpec) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"perform_full_copy":      m.PerformFullCopy,
			"pipeline_id":            m.PipelineId,
			"primary_key_columns":    m.PrimaryKeyColumns,
			"run_continuously":       m.RunContinuously,
			"run_triggered":          m.RunTriggered,
			"source_table_full_name": m.SourceTableFullName,
			"timeseries_key":         m.TimeseriesKey,
		})
}

// Type implements basetypes.ObjectValuable.
func (m OnlineTableSpec) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"perform_full_copy": types.BoolType,
			"pipeline_id":       types.StringType,
			"primary_key_columns": basetypes.ListType{
				ElemType: types.StringType,
			},
			"run_continuously":       OnlineTableSpecContinuousSchedulingPolicy{}.Type(ctx),
			"run_triggered":          OnlineTableSpecTriggeredSchedulingPolicy{}.Type(ctx),
			"source_table_full_name": types.StringType,
			"timeseries_key":         types.StringType,
		},
	}
}

// GetPrimaryKeyColumns returns the value of the PrimaryKeyColumns field in OnlineTableSpec as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableSpec) GetPrimaryKeyColumns(ctx context.Context) ([]types.String, bool) {
	if m.PrimaryKeyColumns.IsNull() || m.PrimaryKeyColumns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.PrimaryKeyColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrimaryKeyColumns sets the value of the PrimaryKeyColumns field in OnlineTableSpec.
func (m *OnlineTableSpec) SetPrimaryKeyColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["primary_key_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.PrimaryKeyColumns = types.ListValueMust(t, vs)
}

// GetRunContinuously returns the value of the RunContinuously field in OnlineTableSpec as
// a OnlineTableSpecContinuousSchedulingPolicy value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableSpec) GetRunContinuously(ctx context.Context) (OnlineTableSpecContinuousSchedulingPolicy, bool) {
	var e OnlineTableSpecContinuousSchedulingPolicy
	if m.RunContinuously.IsNull() || m.RunContinuously.IsUnknown() {
		return e, false
	}
	var v OnlineTableSpecContinuousSchedulingPolicy
	d := m.RunContinuously.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRunContinuously sets the value of the RunContinuously field in OnlineTableSpec.
func (m *OnlineTableSpec) SetRunContinuously(ctx context.Context, v OnlineTableSpecContinuousSchedulingPolicy) {
	vs := v.ToObjectValue(ctx)
	m.RunContinuously = vs
}

// GetRunTriggered returns the value of the RunTriggered field in OnlineTableSpec as
// a OnlineTableSpecTriggeredSchedulingPolicy value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableSpec) GetRunTriggered(ctx context.Context) (OnlineTableSpecTriggeredSchedulingPolicy, bool) {
	var e OnlineTableSpecTriggeredSchedulingPolicy
	if m.RunTriggered.IsNull() || m.RunTriggered.IsUnknown() {
		return e, false
	}
	var v OnlineTableSpecTriggeredSchedulingPolicy
	d := m.RunTriggered.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRunTriggered sets the value of the RunTriggered field in OnlineTableSpec.
func (m *OnlineTableSpec) SetRunTriggered(ctx context.Context, v OnlineTableSpecTriggeredSchedulingPolicy) {
	vs := v.ToObjectValue(ctx)
	m.RunTriggered = vs
}

type OnlineTableSpecContinuousSchedulingPolicy struct {
}

func (to *OnlineTableSpecContinuousSchedulingPolicy) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from OnlineTableSpecContinuousSchedulingPolicy) {
}

func (to *OnlineTableSpecContinuousSchedulingPolicy) SyncFieldsDuringRead(ctx context.Context, from OnlineTableSpecContinuousSchedulingPolicy) {
}

func (m OnlineTableSpecContinuousSchedulingPolicy) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in OnlineTableSpecContinuousSchedulingPolicy.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m OnlineTableSpecContinuousSchedulingPolicy) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, OnlineTableSpecContinuousSchedulingPolicy
// only implements ToObjectValue() and Type().
func (m OnlineTableSpecContinuousSchedulingPolicy) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m OnlineTableSpecContinuousSchedulingPolicy) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type OnlineTableSpecTriggeredSchedulingPolicy struct {
}

func (to *OnlineTableSpecTriggeredSchedulingPolicy) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from OnlineTableSpecTriggeredSchedulingPolicy) {
}

func (to *OnlineTableSpecTriggeredSchedulingPolicy) SyncFieldsDuringRead(ctx context.Context, from OnlineTableSpecTriggeredSchedulingPolicy) {
}

func (m OnlineTableSpecTriggeredSchedulingPolicy) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in OnlineTableSpecTriggeredSchedulingPolicy.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m OnlineTableSpecTriggeredSchedulingPolicy) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, OnlineTableSpecTriggeredSchedulingPolicy
// only implements ToObjectValue() and Type().
func (m OnlineTableSpecTriggeredSchedulingPolicy) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m OnlineTableSpecTriggeredSchedulingPolicy) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

// Status of an online table.
type OnlineTableStatus struct {
	ContinuousUpdateStatus types.Object `tfsdk:"continuous_update_status"`
	// The state of the online table.
	DetailedState types.String `tfsdk:"detailed_state"`

	FailedStatus types.Object `tfsdk:"failed_status"`
	// A text description of the current state of the online table.
	Message types.String `tfsdk:"message"`

	ProvisioningStatus types.Object `tfsdk:"provisioning_status"`

	TriggeredUpdateStatus types.Object `tfsdk:"triggered_update_status"`
}

func (to *OnlineTableStatus) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from OnlineTableStatus) {
	if !from.ContinuousUpdateStatus.IsNull() && !from.ContinuousUpdateStatus.IsUnknown() {
		if toContinuousUpdateStatus, ok := to.GetContinuousUpdateStatus(ctx); ok {
			if fromContinuousUpdateStatus, ok := from.GetContinuousUpdateStatus(ctx); ok {
				// Recursively sync the fields of ContinuousUpdateStatus
				toContinuousUpdateStatus.SyncFieldsDuringCreateOrUpdate(ctx, fromContinuousUpdateStatus)
				to.SetContinuousUpdateStatus(ctx, toContinuousUpdateStatus)
			}
		}
	}
	if !from.FailedStatus.IsNull() && !from.FailedStatus.IsUnknown() {
		if toFailedStatus, ok := to.GetFailedStatus(ctx); ok {
			if fromFailedStatus, ok := from.GetFailedStatus(ctx); ok {
				// Recursively sync the fields of FailedStatus
				toFailedStatus.SyncFieldsDuringCreateOrUpdate(ctx, fromFailedStatus)
				to.SetFailedStatus(ctx, toFailedStatus)
			}
		}
	}
	if !from.ProvisioningStatus.IsNull() && !from.ProvisioningStatus.IsUnknown() {
		if toProvisioningStatus, ok := to.GetProvisioningStatus(ctx); ok {
			if fromProvisioningStatus, ok := from.GetProvisioningStatus(ctx); ok {
				// Recursively sync the fields of ProvisioningStatus
				toProvisioningStatus.SyncFieldsDuringCreateOrUpdate(ctx, fromProvisioningStatus)
				to.SetProvisioningStatus(ctx, toProvisioningStatus)
			}
		}
	}
	if !from.TriggeredUpdateStatus.IsNull() && !from.TriggeredUpdateStatus.IsUnknown() {
		if toTriggeredUpdateStatus, ok := to.GetTriggeredUpdateStatus(ctx); ok {
			if fromTriggeredUpdateStatus, ok := from.GetTriggeredUpdateStatus(ctx); ok {
				// Recursively sync the fields of TriggeredUpdateStatus
				toTriggeredUpdateStatus.SyncFieldsDuringCreateOrUpdate(ctx, fromTriggeredUpdateStatus)
				to.SetTriggeredUpdateStatus(ctx, toTriggeredUpdateStatus)
			}
		}
	}
}

func (to *OnlineTableStatus) SyncFieldsDuringRead(ctx context.Context, from OnlineTableStatus) {
	if !from.ContinuousUpdateStatus.IsNull() && !from.ContinuousUpdateStatus.IsUnknown() {
		if toContinuousUpdateStatus, ok := to.GetContinuousUpdateStatus(ctx); ok {
			if fromContinuousUpdateStatus, ok := from.GetContinuousUpdateStatus(ctx); ok {
				toContinuousUpdateStatus.SyncFieldsDuringRead(ctx, fromContinuousUpdateStatus)
				to.SetContinuousUpdateStatus(ctx, toContinuousUpdateStatus)
			}
		}
	}
	if !from.FailedStatus.IsNull() && !from.FailedStatus.IsUnknown() {
		if toFailedStatus, ok := to.GetFailedStatus(ctx); ok {
			if fromFailedStatus, ok := from.GetFailedStatus(ctx); ok {
				toFailedStatus.SyncFieldsDuringRead(ctx, fromFailedStatus)
				to.SetFailedStatus(ctx, toFailedStatus)
			}
		}
	}
	if !from.ProvisioningStatus.IsNull() && !from.ProvisioningStatus.IsUnknown() {
		if toProvisioningStatus, ok := to.GetProvisioningStatus(ctx); ok {
			if fromProvisioningStatus, ok := from.GetProvisioningStatus(ctx); ok {
				toProvisioningStatus.SyncFieldsDuringRead(ctx, fromProvisioningStatus)
				to.SetProvisioningStatus(ctx, toProvisioningStatus)
			}
		}
	}
	if !from.TriggeredUpdateStatus.IsNull() && !from.TriggeredUpdateStatus.IsUnknown() {
		if toTriggeredUpdateStatus, ok := to.GetTriggeredUpdateStatus(ctx); ok {
			if fromTriggeredUpdateStatus, ok := from.GetTriggeredUpdateStatus(ctx); ok {
				toTriggeredUpdateStatus.SyncFieldsDuringRead(ctx, fromTriggeredUpdateStatus)
				to.SetTriggeredUpdateStatus(ctx, toTriggeredUpdateStatus)
			}
		}
	}
}

func (m OnlineTableStatus) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["continuous_update_status"] = attrs["continuous_update_status"].SetOptional()
	attrs["detailed_state"] = attrs["detailed_state"].SetOptional()
	attrs["failed_status"] = attrs["failed_status"].SetOptional()
	attrs["message"] = attrs["message"].SetOptional()
	attrs["provisioning_status"] = attrs["provisioning_status"].SetOptional()
	attrs["triggered_update_status"] = attrs["triggered_update_status"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in OnlineTableStatus.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m OnlineTableStatus) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"continuous_update_status": reflect.TypeOf(ContinuousUpdateStatus{}),
		"failed_status":            reflect.TypeOf(FailedStatus{}),
		"provisioning_status":      reflect.TypeOf(ProvisioningStatus{}),
		"triggered_update_status":  reflect.TypeOf(TriggeredUpdateStatus{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, OnlineTableStatus
// only implements ToObjectValue() and Type().
func (m OnlineTableStatus) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"continuous_update_status": m.ContinuousUpdateStatus,
			"detailed_state":           m.DetailedState,
			"failed_status":            m.FailedStatus,
			"message":                  m.Message,
			"provisioning_status":      m.ProvisioningStatus,
			"triggered_update_status":  m.TriggeredUpdateStatus,
		})
}

// Type implements basetypes.ObjectValuable.
func (m OnlineTableStatus) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"continuous_update_status": ContinuousUpdateStatus{}.Type(ctx),
			"detailed_state":           types.StringType,
			"failed_status":            FailedStatus{}.Type(ctx),
			"message":                  types.StringType,
			"provisioning_status":      ProvisioningStatus{}.Type(ctx),
			"triggered_update_status":  TriggeredUpdateStatus{}.Type(ctx),
		},
	}
}

// GetContinuousUpdateStatus returns the value of the ContinuousUpdateStatus field in OnlineTableStatus as
// a ContinuousUpdateStatus value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableStatus) GetContinuousUpdateStatus(ctx context.Context) (ContinuousUpdateStatus, bool) {
	var e ContinuousUpdateStatus
	if m.ContinuousUpdateStatus.IsNull() || m.ContinuousUpdateStatus.IsUnknown() {
		return e, false
	}
	var v ContinuousUpdateStatus
	d := m.ContinuousUpdateStatus.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetContinuousUpdateStatus sets the value of the ContinuousUpdateStatus field in OnlineTableStatus.
func (m *OnlineTableStatus) SetContinuousUpdateStatus(ctx context.Context, v ContinuousUpdateStatus) {
	vs := v.ToObjectValue(ctx)
	m.ContinuousUpdateStatus = vs
}

// GetFailedStatus returns the value of the FailedStatus field in OnlineTableStatus as
// a FailedStatus value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableStatus) GetFailedStatus(ctx context.Context) (FailedStatus, bool) {
	var e FailedStatus
	if m.FailedStatus.IsNull() || m.FailedStatus.IsUnknown() {
		return e, false
	}
	var v FailedStatus
	d := m.FailedStatus.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFailedStatus sets the value of the FailedStatus field in OnlineTableStatus.
func (m *OnlineTableStatus) SetFailedStatus(ctx context.Context, v FailedStatus) {
	vs := v.ToObjectValue(ctx)
	m.FailedStatus = vs
}

// GetProvisioningStatus returns the value of the ProvisioningStatus field in OnlineTableStatus as
// a ProvisioningStatus value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableStatus) GetProvisioningStatus(ctx context.Context) (ProvisioningStatus, bool) {
	var e ProvisioningStatus
	if m.ProvisioningStatus.IsNull() || m.ProvisioningStatus.IsUnknown() {
		return e, false
	}
	var v ProvisioningStatus
	d := m.ProvisioningStatus.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProvisioningStatus sets the value of the ProvisioningStatus field in OnlineTableStatus.
func (m *OnlineTableStatus) SetProvisioningStatus(ctx context.Context, v ProvisioningStatus) {
	vs := v.ToObjectValue(ctx)
	m.ProvisioningStatus = vs
}

// GetTriggeredUpdateStatus returns the value of the TriggeredUpdateStatus field in OnlineTableStatus as
// a TriggeredUpdateStatus value.
// If the field is unknown or null, the boolean return value is false.
func (m *OnlineTableStatus) GetTriggeredUpdateStatus(ctx context.Context) (TriggeredUpdateStatus, bool) {
	var e TriggeredUpdateStatus
	if m.TriggeredUpdateStatus.IsNull() || m.TriggeredUpdateStatus.IsUnknown() {
		return e, false
	}
	var v TriggeredUpdateStatus
	d := m.TriggeredUpdateStatus.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTriggeredUpdateStatus sets the value of the TriggeredUpdateStatus field in OnlineTableStatus.
func (m *OnlineTableStatus) SetTriggeredUpdateStatus(ctx context.Context, v TriggeredUpdateStatus) {
	vs := v.ToObjectValue(ctx)
	m.TriggeredUpdateStatus = vs
}

// Spec of an allowed option on a securable kind and its attributes. This is
// mostly used by UI to provide user friendly hints and descriptions in order to
// facilitate the securable creation process.
type OptionSpec struct {
	// For drop down / radio button selections, UI will want to know the
	// possible input values, it can also be used by other option types to limit
	// input selections.
	AllowedValues types.List `tfsdk:"allowed_values"`
	// The default value of the option, for example, value '443' for 'port'
	// option.
	DefaultValue types.String `tfsdk:"default_value"`
	// A concise user facing description of what the input value of this option
	// should look like.
	Description types.String `tfsdk:"description"`
	// The hint is used on the UI to suggest what the input value can possibly
	// be like, for example: example.com for 'host' option. Unlike default
	// value, it will not be applied automatically without user input.
	Hint types.String `tfsdk:"hint"`
	// Indicates whether an option should be displayed with copy button on the
	// UI.
	IsCopiable types.Bool `tfsdk:"is_copiable"`
	// Indicates whether an option can be provided by users in the create/update
	// path of an entity.
	IsCreatable types.Bool `tfsdk:"is_creatable"`
	// Is the option value not user settable and is thus not shown on the UI.
	IsHidden types.Bool `tfsdk:"is_hidden"`
	// Specifies whether this option is safe to log, i.e. no sensitive
	// information.
	IsLoggable types.Bool `tfsdk:"is_loggable"`
	// Is the option required.
	IsRequired types.Bool `tfsdk:"is_required"`
	// Is the option value considered secret and thus redacted on the UI.
	IsSecret types.Bool `tfsdk:"is_secret"`
	// Is the option updatable by users.
	IsUpdatable types.Bool `tfsdk:"is_updatable"`
	// The unique name of the option.
	Name types.String `tfsdk:"name"`
	// Specifies when the option value is displayed on the UI within the OAuth
	// flow.
	OauthStage types.String `tfsdk:"oauth_stage"`
	// The type of the option.
	Type_ types.String `tfsdk:"type"`
}

func (to *OptionSpec) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from OptionSpec) {
	if !from.AllowedValues.IsNull() && !from.AllowedValues.IsUnknown() && to.AllowedValues.IsNull() && len(from.AllowedValues.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for AllowedValues, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.AllowedValues = from.AllowedValues
	}
}

func (to *OptionSpec) SyncFieldsDuringRead(ctx context.Context, from OptionSpec) {
	if !from.AllowedValues.IsNull() && !from.AllowedValues.IsUnknown() && to.AllowedValues.IsNull() && len(from.AllowedValues.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for AllowedValues, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.AllowedValues = from.AllowedValues
	}
}

func (m OptionSpec) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["allowed_values"] = attrs["allowed_values"].SetOptional()
	attrs["default_value"] = attrs["default_value"].SetOptional()
	attrs["description"] = attrs["description"].SetOptional()
	attrs["hint"] = attrs["hint"].SetOptional()
	attrs["is_copiable"] = attrs["is_copiable"].SetOptional()
	attrs["is_creatable"] = attrs["is_creatable"].SetOptional()
	attrs["is_hidden"] = attrs["is_hidden"].SetOptional()
	attrs["is_loggable"] = attrs["is_loggable"].SetOptional()
	attrs["is_required"] = attrs["is_required"].SetOptional()
	attrs["is_secret"] = attrs["is_secret"].SetOptional()
	attrs["is_updatable"] = attrs["is_updatable"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["oauth_stage"] = attrs["oauth_stage"].SetOptional()
	attrs["type"] = attrs["type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in OptionSpec.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m OptionSpec) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"allowed_values": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, OptionSpec
// only implements ToObjectValue() and Type().
func (m OptionSpec) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"allowed_values": m.AllowedValues,
			"default_value":  m.DefaultValue,
			"description":    m.Description,
			"hint":           m.Hint,
			"is_copiable":    m.IsCopiable,
			"is_creatable":   m.IsCreatable,
			"is_hidden":      m.IsHidden,
			"is_loggable":    m.IsLoggable,
			"is_required":    m.IsRequired,
			"is_secret":      m.IsSecret,
			"is_updatable":   m.IsUpdatable,
			"name":           m.Name,
			"oauth_stage":    m.OauthStage,
			"type":           m.Type_,
		})
}

// Type implements basetypes.ObjectValuable.
func (m OptionSpec) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"allowed_values": basetypes.ListType{
				ElemType: types.StringType,
			},
			"default_value": types.StringType,
			"description":   types.StringType,
			"hint":          types.StringType,
			"is_copiable":   types.BoolType,
			"is_creatable":  types.BoolType,
			"is_hidden":     types.BoolType,
			"is_loggable":   types.BoolType,
			"is_required":   types.BoolType,
			"is_secret":     types.BoolType,
			"is_updatable":  types.BoolType,
			"name":          types.StringType,
			"oauth_stage":   types.StringType,
			"type":          types.StringType,
		},
	}
}

// GetAllowedValues returns the value of the AllowedValues field in OptionSpec as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *OptionSpec) GetAllowedValues(ctx context.Context) ([]types.String, bool) {
	if m.AllowedValues.IsNull() || m.AllowedValues.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.AllowedValues.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAllowedValues sets the value of the AllowedValues field in OptionSpec.
func (m *OptionSpec) SetAllowedValues(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["allowed_values"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.AllowedValues = types.ListValueMust(t, vs)
}

type PermissionsChange struct {
	// The set of privileges to add.
	Add types.List `tfsdk:"add"`
	// The principal whose privileges we are changing. Only one of principal or
	// principal_id should be specified, never both at the same time.
	Principal types.String `tfsdk:"principal"`
	// The set of privileges to remove.
	Remove types.List `tfsdk:"remove"`
}

func (to *PermissionsChange) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from PermissionsChange) {
	if !from.Add.IsNull() && !from.Add.IsUnknown() && to.Add.IsNull() && len(from.Add.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Add, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Add = from.Add
	}
	if !from.Remove.IsNull() && !from.Remove.IsUnknown() && to.Remove.IsNull() && len(from.Remove.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Remove, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Remove = from.Remove
	}
}

func (to *PermissionsChange) SyncFieldsDuringRead(ctx context.Context, from PermissionsChange) {
	if !from.Add.IsNull() && !from.Add.IsUnknown() && to.Add.IsNull() && len(from.Add.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Add, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Add = from.Add
	}
	if !from.Remove.IsNull() && !from.Remove.IsUnknown() && to.Remove.IsNull() && len(from.Remove.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Remove, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Remove = from.Remove
	}
}

func (m PermissionsChange) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["add"] = attrs["add"].SetOptional()
	attrs["principal"] = attrs["principal"].SetOptional()
	attrs["remove"] = attrs["remove"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in PermissionsChange.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m PermissionsChange) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"add":    reflect.TypeOf(types.String{}),
		"remove": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, PermissionsChange
// only implements ToObjectValue() and Type().
func (m PermissionsChange) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"add":       m.Add,
			"principal": m.Principal,
			"remove":    m.Remove,
		})
}

// Type implements basetypes.ObjectValuable.
func (m PermissionsChange) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"add": basetypes.ListType{
				ElemType: types.StringType,
			},
			"principal": types.StringType,
			"remove": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetAdd returns the value of the Add field in PermissionsChange as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PermissionsChange) GetAdd(ctx context.Context) ([]types.String, bool) {
	if m.Add.IsNull() || m.Add.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Add.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAdd sets the value of the Add field in PermissionsChange.
func (m *PermissionsChange) SetAdd(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["add"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Add = types.ListValueMust(t, vs)
}

// GetRemove returns the value of the Remove field in PermissionsChange as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PermissionsChange) GetRemove(ctx context.Context) ([]types.String, bool) {
	if m.Remove.IsNull() || m.Remove.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Remove.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRemove sets the value of the Remove field in PermissionsChange.
func (m *PermissionsChange) SetRemove(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["remove"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Remove = types.ListValueMust(t, vs)
}

// Progress information of the Online Table data synchronization pipeline.
type PipelineProgress struct {
	// The estimated time remaining to complete this update in seconds.
	EstimatedCompletionTimeSeconds types.Float64 `tfsdk:"estimated_completion_time_seconds"`
	// The source table Delta version that was last processed by the pipeline.
	// The pipeline may not have completely processed this version yet.
	LatestVersionCurrentlyProcessing types.Int64 `tfsdk:"latest_version_currently_processing"`
	// The completion ratio of this update. This is a number between 0 and 1.
	SyncProgressCompletion types.Float64 `tfsdk:"sync_progress_completion"`
	// The number of rows that have been synced in this update.
	SyncedRowCount types.Int64 `tfsdk:"synced_row_count"`
	// The total number of rows that need to be synced in this update. This
	// number may be an estimate.
	TotalRowCount types.Int64 `tfsdk:"total_row_count"`
}

func (to *PipelineProgress) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from PipelineProgress) {
}

func (to *PipelineProgress) SyncFieldsDuringRead(ctx context.Context, from PipelineProgress) {
}

func (m PipelineProgress) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["estimated_completion_time_seconds"] = attrs["estimated_completion_time_seconds"].SetOptional()
	attrs["latest_version_currently_processing"] = attrs["latest_version_currently_processing"].SetOptional()
	attrs["sync_progress_completion"] = attrs["sync_progress_completion"].SetOptional()
	attrs["synced_row_count"] = attrs["synced_row_count"].SetOptional()
	attrs["total_row_count"] = attrs["total_row_count"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in PipelineProgress.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m PipelineProgress) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, PipelineProgress
// only implements ToObjectValue() and Type().
func (m PipelineProgress) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"estimated_completion_time_seconds":   m.EstimatedCompletionTimeSeconds,
			"latest_version_currently_processing": m.LatestVersionCurrentlyProcessing,
			"sync_progress_completion":            m.SyncProgressCompletion,
			"synced_row_count":                    m.SyncedRowCount,
			"total_row_count":                     m.TotalRowCount,
		})
}

// Type implements basetypes.ObjectValuable.
func (m PipelineProgress) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"estimated_completion_time_seconds":   types.Float64Type,
			"latest_version_currently_processing": types.Int64Type,
			"sync_progress_completion":            types.Float64Type,
			"synced_row_count":                    types.Int64Type,
			"total_row_count":                     types.Int64Type,
		},
	}
}

type PolicyInfo struct {
	// Options for column mask policies. Valid only if `policy_type` is
	// `POLICY_TYPE_COLUMN_MASK`. Required on create and optional on update.
	// When specified on update, the new options will replace the existing
	// options as a whole.
	ColumnMask types.Object `tfsdk:"column_mask"`
	// Optional description of the policy.
	Comment types.String `tfsdk:"comment"`
	// Time at which the policy was created, in epoch milliseconds. Output only.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of the user who created the policy. Output only.
	CreatedBy types.String `tfsdk:"created_by"`
	// Optional list of user or group names that should be excluded from the
	// policy.
	ExceptPrincipals types.List `tfsdk:"except_principals"`
	// Type of securables that the policy should take effect on. Only `TABLE` is
	// supported at this moment. Required on create and optional on update.
	ForSecurableType types.String `tfsdk:"for_securable_type"`
	// Unique identifier of the policy. This field is output only and is
	// generated by the system.
	Id types.String `tfsdk:"id"`
	// Optional list of condition expressions used to match table columns. Only
	// valid when `for_securable_type` is `TABLE`. When specified, the policy
	// only applies to tables whose columns satisfy all match conditions.
	MatchColumns types.List `tfsdk:"match_columns"`
	// Name of the policy. Required on create and optional on update. To rename
	// the policy, set `name` to a different value on update.
	Name types.String `tfsdk:"name"`
	// Full name of the securable on which the policy is defined. Required on
	// create and ignored on update.
	OnSecurableFullname types.String `tfsdk:"on_securable_fullname"`
	// Type of the securable on which the policy is defined. Only `CATALOG`,
	// `SCHEMA` and `TABLE` are supported at this moment. Required on create and
	// ignored on update.
	OnSecurableType types.String `tfsdk:"on_securable_type"`
	// Type of the policy. Required on create and ignored on update.
	PolicyType types.String `tfsdk:"policy_type"`
	// Options for row filter policies. Valid only if `policy_type` is
	// `POLICY_TYPE_ROW_FILTER`. Required on create and optional on update. When
	// specified on update, the new options will replace the existing options as
	// a whole.
	RowFilter types.Object `tfsdk:"row_filter"`
	// List of user or group names that the policy applies to. Required on
	// create and optional on update.
	ToPrincipals types.List `tfsdk:"to_principals"`
	// Time at which the policy was last modified, in epoch milliseconds. Output
	// only.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of the user who last modified the policy. Output only.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// Optional condition when the policy should take effect.
	WhenCondition types.String `tfsdk:"when_condition"`
}

func (to *PolicyInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from PolicyInfo) {
	if !from.ColumnMask.IsNull() && !from.ColumnMask.IsUnknown() {
		if toColumnMask, ok := to.GetColumnMask(ctx); ok {
			if fromColumnMask, ok := from.GetColumnMask(ctx); ok {
				// Recursively sync the fields of ColumnMask
				toColumnMask.SyncFieldsDuringCreateOrUpdate(ctx, fromColumnMask)
				to.SetColumnMask(ctx, toColumnMask)
			}
		}
	}
	if !from.ExceptPrincipals.IsNull() && !from.ExceptPrincipals.IsUnknown() && to.ExceptPrincipals.IsNull() && len(from.ExceptPrincipals.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExceptPrincipals, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExceptPrincipals = from.ExceptPrincipals
	}
	if !from.MatchColumns.IsNull() && !from.MatchColumns.IsUnknown() && to.MatchColumns.IsNull() && len(from.MatchColumns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for MatchColumns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.MatchColumns = from.MatchColumns
	}
	if !from.RowFilter.IsNull() && !from.RowFilter.IsUnknown() {
		if toRowFilter, ok := to.GetRowFilter(ctx); ok {
			if fromRowFilter, ok := from.GetRowFilter(ctx); ok {
				// Recursively sync the fields of RowFilter
				toRowFilter.SyncFieldsDuringCreateOrUpdate(ctx, fromRowFilter)
				to.SetRowFilter(ctx, toRowFilter)
			}
		}
	}
}

func (to *PolicyInfo) SyncFieldsDuringRead(ctx context.Context, from PolicyInfo) {
	if !from.ColumnMask.IsNull() && !from.ColumnMask.IsUnknown() {
		if toColumnMask, ok := to.GetColumnMask(ctx); ok {
			if fromColumnMask, ok := from.GetColumnMask(ctx); ok {
				toColumnMask.SyncFieldsDuringRead(ctx, fromColumnMask)
				to.SetColumnMask(ctx, toColumnMask)
			}
		}
	}
	if !from.ExceptPrincipals.IsNull() && !from.ExceptPrincipals.IsUnknown() && to.ExceptPrincipals.IsNull() && len(from.ExceptPrincipals.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for ExceptPrincipals, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.ExceptPrincipals = from.ExceptPrincipals
	}
	if !from.MatchColumns.IsNull() && !from.MatchColumns.IsUnknown() && to.MatchColumns.IsNull() && len(from.MatchColumns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for MatchColumns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.MatchColumns = from.MatchColumns
	}
	if !from.RowFilter.IsNull() && !from.RowFilter.IsUnknown() {
		if toRowFilter, ok := to.GetRowFilter(ctx); ok {
			if fromRowFilter, ok := from.GetRowFilter(ctx); ok {
				toRowFilter.SyncFieldsDuringRead(ctx, fromRowFilter)
				to.SetRowFilter(ctx, toRowFilter)
			}
		}
	}
}

func (m PolicyInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["column_mask"] = attrs["column_mask"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetComputed()
	attrs["created_by"] = attrs["created_by"].SetComputed()
	attrs["except_principals"] = attrs["except_principals"].SetOptional()
	attrs["for_securable_type"] = attrs["for_securable_type"].SetRequired()
	attrs["id"] = attrs["id"].SetComputed()
	attrs["match_columns"] = attrs["match_columns"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["on_securable_fullname"] = attrs["on_securable_fullname"].SetOptional()
	attrs["on_securable_type"] = attrs["on_securable_type"].SetOptional()
	attrs["policy_type"] = attrs["policy_type"].SetRequired()
	attrs["row_filter"] = attrs["row_filter"].SetOptional()
	attrs["to_principals"] = attrs["to_principals"].SetRequired()
	attrs["updated_at"] = attrs["updated_at"].SetComputed()
	attrs["updated_by"] = attrs["updated_by"].SetComputed()
	attrs["when_condition"] = attrs["when_condition"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in PolicyInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m PolicyInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"column_mask":       reflect.TypeOf(ColumnMaskOptions{}),
		"except_principals": reflect.TypeOf(types.String{}),
		"match_columns":     reflect.TypeOf(MatchColumn{}),
		"row_filter":        reflect.TypeOf(RowFilterOptions{}),
		"to_principals":     reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, PolicyInfo
// only implements ToObjectValue() and Type().
func (m PolicyInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"column_mask":           m.ColumnMask,
			"comment":               m.Comment,
			"created_at":            m.CreatedAt,
			"created_by":            m.CreatedBy,
			"except_principals":     m.ExceptPrincipals,
			"for_securable_type":    m.ForSecurableType,
			"id":                    m.Id,
			"match_columns":         m.MatchColumns,
			"name":                  m.Name,
			"on_securable_fullname": m.OnSecurableFullname,
			"on_securable_type":     m.OnSecurableType,
			"policy_type":           m.PolicyType,
			"row_filter":            m.RowFilter,
			"to_principals":         m.ToPrincipals,
			"updated_at":            m.UpdatedAt,
			"updated_by":            m.UpdatedBy,
			"when_condition":        m.WhenCondition,
		})
}

// Type implements basetypes.ObjectValuable.
func (m PolicyInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"column_mask": ColumnMaskOptions{}.Type(ctx),
			"comment":     types.StringType,
			"created_at":  types.Int64Type,
			"created_by":  types.StringType,
			"except_principals": basetypes.ListType{
				ElemType: types.StringType,
			},
			"for_securable_type": types.StringType,
			"id":                 types.StringType,
			"match_columns": basetypes.ListType{
				ElemType: MatchColumn{}.Type(ctx),
			},
			"name":                  types.StringType,
			"on_securable_fullname": types.StringType,
			"on_securable_type":     types.StringType,
			"policy_type":           types.StringType,
			"row_filter":            RowFilterOptions{}.Type(ctx),
			"to_principals": basetypes.ListType{
				ElemType: types.StringType,
			},
			"updated_at":     types.Int64Type,
			"updated_by":     types.StringType,
			"when_condition": types.StringType,
		},
	}
}

// GetColumnMask returns the value of the ColumnMask field in PolicyInfo as
// a ColumnMaskOptions value.
// If the field is unknown or null, the boolean return value is false.
func (m *PolicyInfo) GetColumnMask(ctx context.Context) (ColumnMaskOptions, bool) {
	var e ColumnMaskOptions
	if m.ColumnMask.IsNull() || m.ColumnMask.IsUnknown() {
		return e, false
	}
	var v ColumnMaskOptions
	d := m.ColumnMask.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumnMask sets the value of the ColumnMask field in PolicyInfo.
func (m *PolicyInfo) SetColumnMask(ctx context.Context, v ColumnMaskOptions) {
	vs := v.ToObjectValue(ctx)
	m.ColumnMask = vs
}

// GetExceptPrincipals returns the value of the ExceptPrincipals field in PolicyInfo as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PolicyInfo) GetExceptPrincipals(ctx context.Context) ([]types.String, bool) {
	if m.ExceptPrincipals.IsNull() || m.ExceptPrincipals.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.ExceptPrincipals.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExceptPrincipals sets the value of the ExceptPrincipals field in PolicyInfo.
func (m *PolicyInfo) SetExceptPrincipals(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["except_principals"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ExceptPrincipals = types.ListValueMust(t, vs)
}

// GetMatchColumns returns the value of the MatchColumns field in PolicyInfo as
// a slice of MatchColumn values.
// If the field is unknown or null, the boolean return value is false.
func (m *PolicyInfo) GetMatchColumns(ctx context.Context) ([]MatchColumn, bool) {
	if m.MatchColumns.IsNull() || m.MatchColumns.IsUnknown() {
		return nil, false
	}
	var v []MatchColumn
	d := m.MatchColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetMatchColumns sets the value of the MatchColumns field in PolicyInfo.
func (m *PolicyInfo) SetMatchColumns(ctx context.Context, v []MatchColumn) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["match_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.MatchColumns = types.ListValueMust(t, vs)
}

// GetRowFilter returns the value of the RowFilter field in PolicyInfo as
// a RowFilterOptions value.
// If the field is unknown or null, the boolean return value is false.
func (m *PolicyInfo) GetRowFilter(ctx context.Context) (RowFilterOptions, bool) {
	var e RowFilterOptions
	if m.RowFilter.IsNull() || m.RowFilter.IsUnknown() {
		return e, false
	}
	var v RowFilterOptions
	d := m.RowFilter.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRowFilter sets the value of the RowFilter field in PolicyInfo.
func (m *PolicyInfo) SetRowFilter(ctx context.Context, v RowFilterOptions) {
	vs := v.ToObjectValue(ctx)
	m.RowFilter = vs
}

// GetToPrincipals returns the value of the ToPrincipals field in PolicyInfo as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PolicyInfo) GetToPrincipals(ctx context.Context) ([]types.String, bool) {
	if m.ToPrincipals.IsNull() || m.ToPrincipals.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.ToPrincipals.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetToPrincipals sets the value of the ToPrincipals field in PolicyInfo.
func (m *PolicyInfo) SetToPrincipals(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["to_principals"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ToPrincipals = types.ListValueMust(t, vs)
}

type PrimaryKeyConstraint struct {
	// Column names for this constraint.
	ChildColumns types.List `tfsdk:"child_columns"`
	// The name of the constraint.
	Name types.String `tfsdk:"name"`
	// True if the constraint is RELY, false or unset if NORELY.
	Rely types.Bool `tfsdk:"rely"`
	// Column names that represent a timeseries.
	TimeseriesColumns types.List `tfsdk:"timeseries_columns"`
}

func (to *PrimaryKeyConstraint) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from PrimaryKeyConstraint) {
	if !from.TimeseriesColumns.IsNull() && !from.TimeseriesColumns.IsUnknown() && to.TimeseriesColumns.IsNull() && len(from.TimeseriesColumns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for TimeseriesColumns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.TimeseriesColumns = from.TimeseriesColumns
	}
}

func (to *PrimaryKeyConstraint) SyncFieldsDuringRead(ctx context.Context, from PrimaryKeyConstraint) {
	if !from.TimeseriesColumns.IsNull() && !from.TimeseriesColumns.IsUnknown() && to.TimeseriesColumns.IsNull() && len(from.TimeseriesColumns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for TimeseriesColumns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.TimeseriesColumns = from.TimeseriesColumns
	}
}

func (m PrimaryKeyConstraint) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["child_columns"] = attrs["child_columns"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["rely"] = attrs["rely"].SetOptional()
	attrs["timeseries_columns"] = attrs["timeseries_columns"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in PrimaryKeyConstraint.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m PrimaryKeyConstraint) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"child_columns":      reflect.TypeOf(types.String{}),
		"timeseries_columns": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, PrimaryKeyConstraint
// only implements ToObjectValue() and Type().
func (m PrimaryKeyConstraint) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"child_columns":      m.ChildColumns,
			"name":               m.Name,
			"rely":               m.Rely,
			"timeseries_columns": m.TimeseriesColumns,
		})
}

// Type implements basetypes.ObjectValuable.
func (m PrimaryKeyConstraint) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"child_columns": basetypes.ListType{
				ElemType: types.StringType,
			},
			"name": types.StringType,
			"rely": types.BoolType,
			"timeseries_columns": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetChildColumns returns the value of the ChildColumns field in PrimaryKeyConstraint as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PrimaryKeyConstraint) GetChildColumns(ctx context.Context) ([]types.String, bool) {
	if m.ChildColumns.IsNull() || m.ChildColumns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.ChildColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetChildColumns sets the value of the ChildColumns field in PrimaryKeyConstraint.
func (m *PrimaryKeyConstraint) SetChildColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["child_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ChildColumns = types.ListValueMust(t, vs)
}

// GetTimeseriesColumns returns the value of the TimeseriesColumns field in PrimaryKeyConstraint as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PrimaryKeyConstraint) GetTimeseriesColumns(ctx context.Context) ([]types.String, bool) {
	if m.TimeseriesColumns.IsNull() || m.TimeseriesColumns.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.TimeseriesColumns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTimeseriesColumns sets the value of the TimeseriesColumns field in PrimaryKeyConstraint.
func (m *PrimaryKeyConstraint) SetTimeseriesColumns(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["timeseries_columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.TimeseriesColumns = types.ListValueMust(t, vs)
}

type Principal struct {
	// Databricks user, group or service principal ID.
	Id types.String `tfsdk:"id"`

	PrincipalType types.String `tfsdk:"principal_type"`
}

func (to *Principal) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from Principal) {
}

func (to *Principal) SyncFieldsDuringRead(ctx context.Context, from Principal) {
}

func (m Principal) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["id"] = attrs["id"].SetOptional()
	attrs["principal_type"] = attrs["principal_type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in Principal.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m Principal) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, Principal
// only implements ToObjectValue() and Type().
func (m Principal) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"id":             m.Id,
			"principal_type": m.PrincipalType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m Principal) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"id":             types.StringType,
			"principal_type": types.StringType,
		},
	}
}

type PrivilegeAssignment struct {
	// The principal (user email address or group name). For deleted principals,
	// `principal` is empty while `principal_id` is populated.
	Principal types.String `tfsdk:"principal"`
	// The privileges assigned to the principal.
	Privileges types.List `tfsdk:"privileges"`
}

func (to *PrivilegeAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from PrivilegeAssignment) {
	if !from.Privileges.IsNull() && !from.Privileges.IsUnknown() && to.Privileges.IsNull() && len(from.Privileges.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Privileges, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Privileges = from.Privileges
	}
}

func (to *PrivilegeAssignment) SyncFieldsDuringRead(ctx context.Context, from PrivilegeAssignment) {
	if !from.Privileges.IsNull() && !from.Privileges.IsUnknown() && to.Privileges.IsNull() && len(from.Privileges.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Privileges, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Privileges = from.Privileges
	}
}

func (m PrivilegeAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["principal"] = attrs["principal"].SetOptional()
	attrs["privileges"] = attrs["privileges"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in PrivilegeAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m PrivilegeAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"privileges": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, PrivilegeAssignment
// only implements ToObjectValue() and Type().
func (m PrivilegeAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"principal":  m.Principal,
			"privileges": m.Privileges,
		})
}

// Type implements basetypes.ObjectValuable.
func (m PrivilegeAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"principal": types.StringType,
			"privileges": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetPrivileges returns the value of the Privileges field in PrivilegeAssignment as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *PrivilegeAssignment) GetPrivileges(ctx context.Context) ([]types.String, bool) {
	if m.Privileges.IsNull() || m.Privileges.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Privileges.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrivileges sets the value of the Privileges field in PrivilegeAssignment.
func (m *PrivilegeAssignment) SetPrivileges(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["privileges"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Privileges = types.ListValueMust(t, vs)
}

// Status of an asynchronously provisioned resource.
type ProvisioningInfo struct {
	// The provisioning state of the resource.
	State types.String `tfsdk:"state"`
}

func (to *ProvisioningInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ProvisioningInfo) {
}

func (to *ProvisioningInfo) SyncFieldsDuringRead(ctx context.Context, from ProvisioningInfo) {
}

func (m ProvisioningInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["state"] = attrs["state"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ProvisioningInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ProvisioningInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ProvisioningInfo
// only implements ToObjectValue() and Type().
func (m ProvisioningInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"state": m.State,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ProvisioningInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"state": types.StringType,
		},
	}
}

// Detailed status of an online table. Shown if the online table is in the
// PROVISIONING_PIPELINE_RESOURCES or the PROVISIONING_INITIAL_SNAPSHOT state.
type ProvisioningStatus struct {
	// Details about initial data synchronization. Only populated when in the
	// PROVISIONING_INITIAL_SNAPSHOT state.
	InitialPipelineSyncProgress types.Object `tfsdk:"initial_pipeline_sync_progress"`
}

func (to *ProvisioningStatus) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ProvisioningStatus) {
	if !from.InitialPipelineSyncProgress.IsNull() && !from.InitialPipelineSyncProgress.IsUnknown() {
		if toInitialPipelineSyncProgress, ok := to.GetInitialPipelineSyncProgress(ctx); ok {
			if fromInitialPipelineSyncProgress, ok := from.GetInitialPipelineSyncProgress(ctx); ok {
				// Recursively sync the fields of InitialPipelineSyncProgress
				toInitialPipelineSyncProgress.SyncFieldsDuringCreateOrUpdate(ctx, fromInitialPipelineSyncProgress)
				to.SetInitialPipelineSyncProgress(ctx, toInitialPipelineSyncProgress)
			}
		}
	}
}

func (to *ProvisioningStatus) SyncFieldsDuringRead(ctx context.Context, from ProvisioningStatus) {
	if !from.InitialPipelineSyncProgress.IsNull() && !from.InitialPipelineSyncProgress.IsUnknown() {
		if toInitialPipelineSyncProgress, ok := to.GetInitialPipelineSyncProgress(ctx); ok {
			if fromInitialPipelineSyncProgress, ok := from.GetInitialPipelineSyncProgress(ctx); ok {
				toInitialPipelineSyncProgress.SyncFieldsDuringRead(ctx, fromInitialPipelineSyncProgress)
				to.SetInitialPipelineSyncProgress(ctx, toInitialPipelineSyncProgress)
			}
		}
	}
}

func (m ProvisioningStatus) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["initial_pipeline_sync_progress"] = attrs["initial_pipeline_sync_progress"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ProvisioningStatus.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ProvisioningStatus) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"initial_pipeline_sync_progress": reflect.TypeOf(PipelineProgress{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ProvisioningStatus
// only implements ToObjectValue() and Type().
func (m ProvisioningStatus) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"initial_pipeline_sync_progress": m.InitialPipelineSyncProgress,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ProvisioningStatus) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"initial_pipeline_sync_progress": PipelineProgress{}.Type(ctx),
		},
	}
}

// GetInitialPipelineSyncProgress returns the value of the InitialPipelineSyncProgress field in ProvisioningStatus as
// a PipelineProgress value.
// If the field is unknown or null, the boolean return value is false.
func (m *ProvisioningStatus) GetInitialPipelineSyncProgress(ctx context.Context) (PipelineProgress, bool) {
	var e PipelineProgress
	if m.InitialPipelineSyncProgress.IsNull() || m.InitialPipelineSyncProgress.IsUnknown() {
		return e, false
	}
	var v PipelineProgress
	d := m.InitialPipelineSyncProgress.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInitialPipelineSyncProgress sets the value of the InitialPipelineSyncProgress field in ProvisioningStatus.
func (m *ProvisioningStatus) SetInitialPipelineSyncProgress(ctx context.Context, v PipelineProgress) {
	vs := v.ToObjectValue(ctx)
	m.InitialPipelineSyncProgress = vs
}

type QuotaInfo struct {
	// The timestamp that indicates when the quota count was last updated.
	LastRefreshedAt types.Int64 `tfsdk:"last_refreshed_at"`
	// Name of the parent resource. Returns metastore ID if the parent is a
	// metastore.
	ParentFullName types.String `tfsdk:"parent_full_name"`
	// The quota parent securable type.
	ParentSecurableType types.String `tfsdk:"parent_securable_type"`
	// The current usage of the resource quota.
	QuotaCount types.Int64 `tfsdk:"quota_count"`
	// The current limit of the resource quota.
	QuotaLimit types.Int64 `tfsdk:"quota_limit"`
	// The name of the quota.
	QuotaName types.String `tfsdk:"quota_name"`
}

func (to *QuotaInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from QuotaInfo) {
}

func (to *QuotaInfo) SyncFieldsDuringRead(ctx context.Context, from QuotaInfo) {
}

func (m QuotaInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["last_refreshed_at"] = attrs["last_refreshed_at"].SetOptional()
	attrs["parent_full_name"] = attrs["parent_full_name"].SetOptional()
	attrs["parent_securable_type"] = attrs["parent_securable_type"].SetOptional()
	attrs["quota_count"] = attrs["quota_count"].SetOptional()
	attrs["quota_limit"] = attrs["quota_limit"].SetOptional()
	attrs["quota_name"] = attrs["quota_name"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in QuotaInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m QuotaInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, QuotaInfo
// only implements ToObjectValue() and Type().
func (m QuotaInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"last_refreshed_at":     m.LastRefreshedAt,
			"parent_full_name":      m.ParentFullName,
			"parent_securable_type": m.ParentSecurableType,
			"quota_count":           m.QuotaCount,
			"quota_limit":           m.QuotaLimit,
			"quota_name":            m.QuotaName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m QuotaInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"last_refreshed_at":     types.Int64Type,
			"parent_full_name":      types.StringType,
			"parent_securable_type": types.StringType,
			"quota_count":           types.Int64Type,
			"quota_limit":           types.Int64Type,
			"quota_name":            types.StringType,
		},
	}
}

// R2 temporary credentials for API authentication. Read more at
// https://developers.cloudflare.com/r2/api/s3/tokens/.
type R2Credentials struct {
	// The access key ID that identifies the temporary credentials.
	AccessKeyId types.String `tfsdk:"access_key_id"`
	// The secret access key associated with the access key.
	SecretAccessKey types.String `tfsdk:"secret_access_key"`
	// The generated JWT that users must pass to use the temporary credentials.
	SessionToken types.String `tfsdk:"session_token"`
}

func (to *R2Credentials) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from R2Credentials) {
}

func (to *R2Credentials) SyncFieldsDuringRead(ctx context.Context, from R2Credentials) {
}

func (m R2Credentials) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_key_id"] = attrs["access_key_id"].SetOptional()
	attrs["secret_access_key"] = attrs["secret_access_key"].SetOptional()
	attrs["session_token"] = attrs["session_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in R2Credentials.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m R2Credentials) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, R2Credentials
// only implements ToObjectValue() and Type().
func (m R2Credentials) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_key_id":     m.AccessKeyId,
			"secret_access_key": m.SecretAccessKey,
			"session_token":     m.SessionToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m R2Credentials) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_key_id":     types.StringType,
			"secret_access_key": types.StringType,
			"session_token":     types.StringType,
		},
	}
}

type ReadVolumeRequest struct {
	// Whether to include volumes in the response for which the principal can
	// only access selective metadata for
	IncludeBrowse types.Bool `tfsdk:"-"`
	// The three-level (fully qualified) name of the volume
	Name types.String `tfsdk:"-"`
}

func (to *ReadVolumeRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ReadVolumeRequest) {
}

func (to *ReadVolumeRequest) SyncFieldsDuringRead(ctx context.Context, from ReadVolumeRequest) {
}

func (m ReadVolumeRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["name"] = attrs["name"].SetRequired()
	attrs["include_browse"] = attrs["include_browse"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ReadVolumeRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ReadVolumeRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ReadVolumeRequest
// only implements ToObjectValue() and Type().
func (m ReadVolumeRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"include_browse": m.IncludeBrowse,
			"name":           m.Name,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ReadVolumeRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"include_browse": types.BoolType,
			"name":           types.StringType,
		},
	}
}

type RegenerateDashboardRequest struct {
	// UC table name in format `catalog.schema.table_name`. This field
	// corresponds to the {full_table_name_arg} arg in the endpoint path.
	TableName types.String `tfsdk:"-"`
	// Optional argument to specify the warehouse for dashboard regeneration. If
	// not specified, the first running warehouse will be used.
	WarehouseId types.String `tfsdk:"warehouse_id"`
}

func (to *RegenerateDashboardRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from RegenerateDashboardRequest) {
}

func (to *RegenerateDashboardRequest) SyncFieldsDuringRead(ctx context.Context, from RegenerateDashboardRequest) {
}

func (m RegenerateDashboardRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["warehouse_id"] = attrs["warehouse_id"].SetOptional()
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in RegenerateDashboardRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m RegenerateDashboardRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, RegenerateDashboardRequest
// only implements ToObjectValue() and Type().
func (m RegenerateDashboardRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_name":   m.TableName,
			"warehouse_id": m.WarehouseId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m RegenerateDashboardRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_name":   types.StringType,
			"warehouse_id": types.StringType,
		},
	}
}

type RegenerateDashboardResponse struct {
	DashboardId types.String `tfsdk:"dashboard_id"`
	// Parent folder is equivalent to {assets_dir}/{tableName}
	ParentFolder types.String `tfsdk:"parent_folder"`
}

func (to *RegenerateDashboardResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from RegenerateDashboardResponse) {
}

func (to *RegenerateDashboardResponse) SyncFieldsDuringRead(ctx context.Context, from RegenerateDashboardResponse) {
}

func (m RegenerateDashboardResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["dashboard_id"] = attrs["dashboard_id"].SetOptional()
	attrs["parent_folder"] = attrs["parent_folder"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in RegenerateDashboardResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m RegenerateDashboardResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, RegenerateDashboardResponse
// only implements ToObjectValue() and Type().
func (m RegenerateDashboardResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"dashboard_id":  m.DashboardId,
			"parent_folder": m.ParentFolder,
		})
}

// Type implements basetypes.ObjectValuable.
func (m RegenerateDashboardResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"dashboard_id":  types.StringType,
			"parent_folder": types.StringType,
		},
	}
}

type RegisteredModelAlias struct {
	// Name of the alias, e.g. 'champion' or 'latest_stable'
	AliasName types.String `tfsdk:"alias_name"`
	// The name of the catalog containing the model version
	CatalogName types.String `tfsdk:"catalog_name"`
	// The unique identifier of the alias
	Id types.String `tfsdk:"id"`
	// The name of the parent registered model of the model version, relative to
	// parent schema
	ModelName types.String `tfsdk:"model_name"`
	// The name of the schema containing the model version, relative to parent
	// catalog
	SchemaName types.String `tfsdk:"schema_name"`
	// Integer version number of the model version to which this alias points.
	VersionNum types.Int64 `tfsdk:"version_num"`
}

func (to *RegisteredModelAlias) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from RegisteredModelAlias) {
}

func (to *RegisteredModelAlias) SyncFieldsDuringRead(ctx context.Context, from RegisteredModelAlias) {
}

func (m RegisteredModelAlias) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["alias_name"] = attrs["alias_name"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["id"] = attrs["id"].SetOptional()
	attrs["model_name"] = attrs["model_name"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["version_num"] = attrs["version_num"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in RegisteredModelAlias.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m RegisteredModelAlias) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, RegisteredModelAlias
// only implements ToObjectValue() and Type().
func (m RegisteredModelAlias) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"alias_name":   m.AliasName,
			"catalog_name": m.CatalogName,
			"id":           m.Id,
			"model_name":   m.ModelName,
			"schema_name":  m.SchemaName,
			"version_num":  m.VersionNum,
		})
}

// Type implements basetypes.ObjectValuable.
func (m RegisteredModelAlias) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"alias_name":   types.StringType,
			"catalog_name": types.StringType,
			"id":           types.StringType,
			"model_name":   types.StringType,
			"schema_name":  types.StringType,
			"version_num":  types.Int64Type,
		},
	}
}

type RegisteredModelInfo struct {
	// List of aliases associated with the registered model
	Aliases types.List `tfsdk:"aliases"`
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// The name of the catalog where the schema and the registered model reside
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the registered model
	Comment types.String `tfsdk:"comment"`
	// Creation timestamp of the registered model in milliseconds since the Unix
	// epoch
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// The identifier of the user who created the registered model
	CreatedBy types.String `tfsdk:"created_by"`
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"full_name"`
	// The unique identifier of the metastore
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The name of the registered model
	Name types.String `tfsdk:"name"`
	// The identifier of the user who owns the registered model
	Owner types.String `tfsdk:"owner"`
	// The name of the schema where the registered model resides
	SchemaName types.String `tfsdk:"schema_name"`
	// The storage location on the cloud under which model version data files
	// are stored
	StorageLocation types.String `tfsdk:"storage_location"`
	// Last-update timestamp of the registered model in milliseconds since the
	// Unix epoch
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// The identifier of the user who updated the registered model last time
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *RegisteredModelInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from RegisteredModelInfo) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
}

func (to *RegisteredModelInfo) SyncFieldsDuringRead(ctx context.Context, from RegisteredModelInfo) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
}

func (m RegisteredModelInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aliases"] = attrs["aliases"].SetOptional()
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in RegisteredModelInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m RegisteredModelInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aliases": reflect.TypeOf(RegisteredModelAlias{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, RegisteredModelInfo
// only implements ToObjectValue() and Type().
func (m RegisteredModelInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aliases":          m.Aliases,
			"browse_only":      m.BrowseOnly,
			"catalog_name":     m.CatalogName,
			"comment":          m.Comment,
			"created_at":       m.CreatedAt,
			"created_by":       m.CreatedBy,
			"full_name":        m.FullName,
			"metastore_id":     m.MetastoreId,
			"name":             m.Name,
			"owner":            m.Owner,
			"schema_name":      m.SchemaName,
			"storage_location": m.StorageLocation,
			"updated_at":       m.UpdatedAt,
			"updated_by":       m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m RegisteredModelInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aliases": basetypes.ListType{
				ElemType: RegisteredModelAlias{}.Type(ctx),
			},
			"browse_only":      types.BoolType,
			"catalog_name":     types.StringType,
			"comment":          types.StringType,
			"created_at":       types.Int64Type,
			"created_by":       types.StringType,
			"full_name":        types.StringType,
			"metastore_id":     types.StringType,
			"name":             types.StringType,
			"owner":            types.StringType,
			"schema_name":      types.StringType,
			"storage_location": types.StringType,
			"updated_at":       types.Int64Type,
			"updated_by":       types.StringType,
		},
	}
}

// GetAliases returns the value of the Aliases field in RegisteredModelInfo as
// a slice of RegisteredModelAlias values.
// If the field is unknown or null, the boolean return value is false.
func (m *RegisteredModelInfo) GetAliases(ctx context.Context) ([]RegisteredModelAlias, bool) {
	if m.Aliases.IsNull() || m.Aliases.IsUnknown() {
		return nil, false
	}
	var v []RegisteredModelAlias
	d := m.Aliases.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAliases sets the value of the Aliases field in RegisteredModelInfo.
func (m *RegisteredModelInfo) SetAliases(ctx context.Context, v []RegisteredModelAlias) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["aliases"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Aliases = types.ListValueMust(t, vs)
}

type RowFilterOptions struct {
	// The fully qualified name of the row filter function. The function is
	// called on each row of the target table. It should return a boolean value
	// indicating whether the row should be visible to the user. Required on
	// create and update.
	FunctionName types.String `tfsdk:"function_name"`
	// Optional list of column aliases or constant literals to be passed as
	// arguments to the row filter function. The type of each column should
	// match the positional argument of the row filter function.
	Using types.List `tfsdk:"using"`
}

func (to *RowFilterOptions) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from RowFilterOptions) {
	if !from.Using.IsNull() && !from.Using.IsUnknown() && to.Using.IsNull() && len(from.Using.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Using, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Using = from.Using
	}
}

func (to *RowFilterOptions) SyncFieldsDuringRead(ctx context.Context, from RowFilterOptions) {
	if !from.Using.IsNull() && !from.Using.IsUnknown() && to.Using.IsNull() && len(from.Using.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Using, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Using = from.Using
	}
}

func (m RowFilterOptions) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["function_name"] = attrs["function_name"].SetRequired()
	attrs["using"] = attrs["using"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in RowFilterOptions.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m RowFilterOptions) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"using": reflect.TypeOf(FunctionArgument{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, RowFilterOptions
// only implements ToObjectValue() and Type().
func (m RowFilterOptions) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"function_name": m.FunctionName,
			"using":         m.Using,
		})
}

// Type implements basetypes.ObjectValuable.
func (m RowFilterOptions) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"function_name": types.StringType,
			"using": basetypes.ListType{
				ElemType: FunctionArgument{}.Type(ctx),
			},
		},
	}
}

// GetUsing returns the value of the Using field in RowFilterOptions as
// a slice of FunctionArgument values.
// If the field is unknown or null, the boolean return value is false.
func (m *RowFilterOptions) GetUsing(ctx context.Context) ([]FunctionArgument, bool) {
	if m.Using.IsNull() || m.Using.IsUnknown() {
		return nil, false
	}
	var v []FunctionArgument
	d := m.Using.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetUsing sets the value of the Using field in RowFilterOptions.
func (m *RowFilterOptions) SetUsing(ctx context.Context, v []FunctionArgument) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["using"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Using = types.ListValueMust(t, vs)
}

type RunRefreshRequest struct {
	// UC table name in format `catalog.schema.table_name`. table_name is case
	// insensitive and spaces are disallowed.
	TableName types.String `tfsdk:"-"`
}

func (to *RunRefreshRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from RunRefreshRequest) {
}

func (to *RunRefreshRequest) SyncFieldsDuringRead(ctx context.Context, from RunRefreshRequest) {
}

func (m RunRefreshRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in RunRefreshRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m RunRefreshRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, RunRefreshRequest
// only implements ToObjectValue() and Type().
func (m RunRefreshRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_name": m.TableName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m RunRefreshRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_name": types.StringType,
		},
	}
}

// Next ID: 41
type SchemaInfo struct {
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// Name of parent catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// The type of the parent catalog.
	CatalogType types.String `tfsdk:"catalog_type"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Time at which this schema was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of schema creator.
	CreatedBy types.String `tfsdk:"created_by"`

	EffectivePredictiveOptimizationFlag types.Object `tfsdk:"effective_predictive_optimization_flag"`
	// Whether predictive optimization should be enabled for this object and
	// objects under it.
	EnablePredictiveOptimization types.String `tfsdk:"enable_predictive_optimization"`
	// Full name of schema, in form of __catalog_name__.__schema_name__.
	FullName types.String `tfsdk:"full_name"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of schema, relative to parent catalog.
	Name types.String `tfsdk:"name"`
	// Username of current owner of schema.
	Owner types.String `tfsdk:"owner"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
	// The unique identifier of the schema.
	SchemaId types.String `tfsdk:"schema_id"`
	// Storage location for managed tables within schema.
	StorageLocation types.String `tfsdk:"storage_location"`
	// Storage root URL for managed tables within schema.
	StorageRoot types.String `tfsdk:"storage_root"`
	// Time at which this schema was created, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified schema.
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *SchemaInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SchemaInfo) {
	if !from.EffectivePredictiveOptimizationFlag.IsNull() && !from.EffectivePredictiveOptimizationFlag.IsUnknown() {
		if toEffectivePredictiveOptimizationFlag, ok := to.GetEffectivePredictiveOptimizationFlag(ctx); ok {
			if fromEffectivePredictiveOptimizationFlag, ok := from.GetEffectivePredictiveOptimizationFlag(ctx); ok {
				// Recursively sync the fields of EffectivePredictiveOptimizationFlag
				toEffectivePredictiveOptimizationFlag.SyncFieldsDuringCreateOrUpdate(ctx, fromEffectivePredictiveOptimizationFlag)
				to.SetEffectivePredictiveOptimizationFlag(ctx, toEffectivePredictiveOptimizationFlag)
			}
		}
	}
}

func (to *SchemaInfo) SyncFieldsDuringRead(ctx context.Context, from SchemaInfo) {
	if !from.EffectivePredictiveOptimizationFlag.IsNull() && !from.EffectivePredictiveOptimizationFlag.IsUnknown() {
		if toEffectivePredictiveOptimizationFlag, ok := to.GetEffectivePredictiveOptimizationFlag(ctx); ok {
			if fromEffectivePredictiveOptimizationFlag, ok := from.GetEffectivePredictiveOptimizationFlag(ctx); ok {
				toEffectivePredictiveOptimizationFlag.SyncFieldsDuringRead(ctx, fromEffectivePredictiveOptimizationFlag)
				to.SetEffectivePredictiveOptimizationFlag(ctx, toEffectivePredictiveOptimizationFlag)
			}
		}
	}
}

func (m SchemaInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["catalog_type"] = attrs["catalog_type"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["effective_predictive_optimization_flag"] = attrs["effective_predictive_optimization_flag"].SetOptional()
	attrs["enable_predictive_optimization"] = attrs["enable_predictive_optimization"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["schema_id"] = attrs["schema_id"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["storage_root"] = attrs["storage_root"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SchemaInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SchemaInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"effective_predictive_optimization_flag": reflect.TypeOf(EffectivePredictiveOptimizationFlag{}),
		"properties":                             reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SchemaInfo
// only implements ToObjectValue() and Type().
func (m SchemaInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"browse_only":                            m.BrowseOnly,
			"catalog_name":                           m.CatalogName,
			"catalog_type":                           m.CatalogType,
			"comment":                                m.Comment,
			"created_at":                             m.CreatedAt,
			"created_by":                             m.CreatedBy,
			"effective_predictive_optimization_flag": m.EffectivePredictiveOptimizationFlag,
			"enable_predictive_optimization":         m.EnablePredictiveOptimization,
			"full_name":                              m.FullName,
			"metastore_id":                           m.MetastoreId,
			"name":                                   m.Name,
			"owner":                                  m.Owner,
			"properties":                             m.Properties,
			"schema_id":                              m.SchemaId,
			"storage_location":                       m.StorageLocation,
			"storage_root":                           m.StorageRoot,
			"updated_at":                             m.UpdatedAt,
			"updated_by":                             m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SchemaInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"browse_only":                            types.BoolType,
			"catalog_name":                           types.StringType,
			"catalog_type":                           types.StringType,
			"comment":                                types.StringType,
			"created_at":                             types.Int64Type,
			"created_by":                             types.StringType,
			"effective_predictive_optimization_flag": EffectivePredictiveOptimizationFlag{}.Type(ctx),
			"enable_predictive_optimization":         types.StringType,
			"full_name":                              types.StringType,
			"metastore_id":                           types.StringType,
			"name":                                   types.StringType,
			"owner":                                  types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"schema_id":        types.StringType,
			"storage_location": types.StringType,
			"storage_root":     types.StringType,
			"updated_at":       types.Int64Type,
			"updated_by":       types.StringType,
		},
	}
}

// GetEffectivePredictiveOptimizationFlag returns the value of the EffectivePredictiveOptimizationFlag field in SchemaInfo as
// a EffectivePredictiveOptimizationFlag value.
// If the field is unknown or null, the boolean return value is false.
func (m *SchemaInfo) GetEffectivePredictiveOptimizationFlag(ctx context.Context) (EffectivePredictiveOptimizationFlag, bool) {
	var e EffectivePredictiveOptimizationFlag
	if m.EffectivePredictiveOptimizationFlag.IsNull() || m.EffectivePredictiveOptimizationFlag.IsUnknown() {
		return e, false
	}
	var v EffectivePredictiveOptimizationFlag
	d := m.EffectivePredictiveOptimizationFlag.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEffectivePredictiveOptimizationFlag sets the value of the EffectivePredictiveOptimizationFlag field in SchemaInfo.
func (m *SchemaInfo) SetEffectivePredictiveOptimizationFlag(ctx context.Context, v EffectivePredictiveOptimizationFlag) {
	vs := v.ToObjectValue(ctx)
	m.EffectivePredictiveOptimizationFlag = vs
}

// GetProperties returns the value of the Properties field in SchemaInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *SchemaInfo) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in SchemaInfo.
func (m *SchemaInfo) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// Generic definition of a securable, which is uniquely defined in a metastore
// by its type and full name.
type Securable struct {
	// Required. The full name of the catalog/schema/table. Optional if
	// resource_name is present.
	FullName types.String `tfsdk:"full_name"`
	// Optional. The name of the Share object that contains the securable when
	// the securable is getting shared in D2D Delta Sharing.
	ProviderShare types.String `tfsdk:"provider_share"`
	// Required. The type of securable (catalog/schema/table). Optional if
	// resource_name is present.
	Type_ types.String `tfsdk:"type"`
}

func (to *Securable) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from Securable) {
}

func (to *Securable) SyncFieldsDuringRead(ctx context.Context, from Securable) {
}

func (m Securable) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["provider_share"] = attrs["provider_share"].SetOptional()
	attrs["type"] = attrs["type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in Securable.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m Securable) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, Securable
// only implements ToObjectValue() and Type().
func (m Securable) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":      m.FullName,
			"provider_share": m.ProviderShare,
			"type":           m.Type_,
		})
}

// Type implements basetypes.ObjectValuable.
func (m Securable) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":      types.StringType,
			"provider_share": types.StringType,
			"type":           types.StringType,
		},
	}
}

// Manifest of a specific securable kind.
type SecurableKindManifest struct {
	// Privileges that can be assigned to the securable.
	AssignablePrivileges types.List `tfsdk:"assignable_privileges"`
	// A list of capabilities in the securable kind.
	Capabilities types.List `tfsdk:"capabilities"`
	// Detailed specs of allowed options.
	Options types.List `tfsdk:"options"`
	// Securable kind to get manifest of.
	SecurableKind types.String `tfsdk:"securable_kind"`
	// Securable Type of the kind.
	SecurableType types.String `tfsdk:"securable_type"`
}

func (to *SecurableKindManifest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SecurableKindManifest) {
	if !from.AssignablePrivileges.IsNull() && !from.AssignablePrivileges.IsUnknown() && to.AssignablePrivileges.IsNull() && len(from.AssignablePrivileges.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for AssignablePrivileges, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.AssignablePrivileges = from.AssignablePrivileges
	}
	if !from.Capabilities.IsNull() && !from.Capabilities.IsUnknown() && to.Capabilities.IsNull() && len(from.Capabilities.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Capabilities, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Capabilities = from.Capabilities
	}
	if !from.Options.IsNull() && !from.Options.IsUnknown() && to.Options.IsNull() && len(from.Options.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Options, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Options = from.Options
	}
}

func (to *SecurableKindManifest) SyncFieldsDuringRead(ctx context.Context, from SecurableKindManifest) {
	if !from.AssignablePrivileges.IsNull() && !from.AssignablePrivileges.IsUnknown() && to.AssignablePrivileges.IsNull() && len(from.AssignablePrivileges.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for AssignablePrivileges, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.AssignablePrivileges = from.AssignablePrivileges
	}
	if !from.Capabilities.IsNull() && !from.Capabilities.IsUnknown() && to.Capabilities.IsNull() && len(from.Capabilities.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Capabilities, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Capabilities = from.Capabilities
	}
	if !from.Options.IsNull() && !from.Options.IsUnknown() && to.Options.IsNull() && len(from.Options.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Options, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Options = from.Options
	}
}

func (m SecurableKindManifest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["assignable_privileges"] = attrs["assignable_privileges"].SetOptional()
	attrs["capabilities"] = attrs["capabilities"].SetOptional()
	attrs["options"] = attrs["options"].SetOptional()
	attrs["securable_kind"] = attrs["securable_kind"].SetOptional()
	attrs["securable_type"] = attrs["securable_type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SecurableKindManifest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SecurableKindManifest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"assignable_privileges": reflect.TypeOf(types.String{}),
		"capabilities":          reflect.TypeOf(types.String{}),
		"options":               reflect.TypeOf(OptionSpec{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SecurableKindManifest
// only implements ToObjectValue() and Type().
func (m SecurableKindManifest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"assignable_privileges": m.AssignablePrivileges,
			"capabilities":          m.Capabilities,
			"options":               m.Options,
			"securable_kind":        m.SecurableKind,
			"securable_type":        m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SecurableKindManifest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"assignable_privileges": basetypes.ListType{
				ElemType: types.StringType,
			},
			"capabilities": basetypes.ListType{
				ElemType: types.StringType,
			},
			"options": basetypes.ListType{
				ElemType: OptionSpec{}.Type(ctx),
			},
			"securable_kind": types.StringType,
			"securable_type": types.StringType,
		},
	}
}

// GetAssignablePrivileges returns the value of the AssignablePrivileges field in SecurableKindManifest as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *SecurableKindManifest) GetAssignablePrivileges(ctx context.Context) ([]types.String, bool) {
	if m.AssignablePrivileges.IsNull() || m.AssignablePrivileges.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.AssignablePrivileges.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAssignablePrivileges sets the value of the AssignablePrivileges field in SecurableKindManifest.
func (m *SecurableKindManifest) SetAssignablePrivileges(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["assignable_privileges"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.AssignablePrivileges = types.ListValueMust(t, vs)
}

// GetCapabilities returns the value of the Capabilities field in SecurableKindManifest as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *SecurableKindManifest) GetCapabilities(ctx context.Context) ([]types.String, bool) {
	if m.Capabilities.IsNull() || m.Capabilities.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Capabilities.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCapabilities sets the value of the Capabilities field in SecurableKindManifest.
func (m *SecurableKindManifest) SetCapabilities(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["capabilities"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Capabilities = types.ListValueMust(t, vs)
}

// GetOptions returns the value of the Options field in SecurableKindManifest as
// a slice of OptionSpec values.
// If the field is unknown or null, the boolean return value is false.
func (m *SecurableKindManifest) GetOptions(ctx context.Context) ([]OptionSpec, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v []OptionSpec
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in SecurableKindManifest.
func (m *SecurableKindManifest) SetOptions(ctx context.Context, v []OptionSpec) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.ListValueMust(t, vs)
}

type SecurablePermissions struct {
	// List of requested Unity Catalog permissions.
	Permissions types.List `tfsdk:"permissions"`
	// The securable for which the access request destinations are being
	// requested.
	Securable types.Object `tfsdk:"securable"`
}

func (to *SecurablePermissions) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SecurablePermissions) {
	if !from.Permissions.IsNull() && !from.Permissions.IsUnknown() && to.Permissions.IsNull() && len(from.Permissions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Permissions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Permissions = from.Permissions
	}
	if !from.Securable.IsNull() && !from.Securable.IsUnknown() {
		if toSecurable, ok := to.GetSecurable(ctx); ok {
			if fromSecurable, ok := from.GetSecurable(ctx); ok {
				// Recursively sync the fields of Securable
				toSecurable.SyncFieldsDuringCreateOrUpdate(ctx, fromSecurable)
				to.SetSecurable(ctx, toSecurable)
			}
		}
	}
}

func (to *SecurablePermissions) SyncFieldsDuringRead(ctx context.Context, from SecurablePermissions) {
	if !from.Permissions.IsNull() && !from.Permissions.IsUnknown() && to.Permissions.IsNull() && len(from.Permissions.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Permissions, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Permissions = from.Permissions
	}
	if !from.Securable.IsNull() && !from.Securable.IsUnknown() {
		if toSecurable, ok := to.GetSecurable(ctx); ok {
			if fromSecurable, ok := from.GetSecurable(ctx); ok {
				toSecurable.SyncFieldsDuringRead(ctx, fromSecurable)
				to.SetSecurable(ctx, toSecurable)
			}
		}
	}
}

func (m SecurablePermissions) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["permissions"] = attrs["permissions"].SetOptional()
	attrs["securable"] = attrs["securable"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SecurablePermissions.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SecurablePermissions) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"permissions": reflect.TypeOf(types.String{}),
		"securable":   reflect.TypeOf(Securable{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SecurablePermissions
// only implements ToObjectValue() and Type().
func (m SecurablePermissions) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"permissions": m.Permissions,
			"securable":   m.Securable,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SecurablePermissions) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"securable": Securable{}.Type(ctx),
		},
	}
}

// GetPermissions returns the value of the Permissions field in SecurablePermissions as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *SecurablePermissions) GetPermissions(ctx context.Context) ([]types.String, bool) {
	if m.Permissions.IsNull() || m.Permissions.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.Permissions.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPermissions sets the value of the Permissions field in SecurablePermissions.
func (m *SecurablePermissions) SetPermissions(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["permissions"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Permissions = types.ListValueMust(t, vs)
}

// GetSecurable returns the value of the Securable field in SecurablePermissions as
// a Securable value.
// If the field is unknown or null, the boolean return value is false.
func (m *SecurablePermissions) GetSecurable(ctx context.Context) (Securable, bool) {
	var e Securable
	if m.Securable.IsNull() || m.Securable.IsUnknown() {
		return e, false
	}
	var v Securable
	d := m.Securable.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSecurable sets the value of the Securable field in SecurablePermissions.
func (m *SecurablePermissions) SetSecurable(ctx context.Context, v Securable) {
	vs := v.ToObjectValue(ctx)
	m.Securable = vs
}

type SetArtifactAllowlist struct {
	// A list of allowed artifact match patterns.
	ArtifactMatchers types.List `tfsdk:"artifact_matchers"`
	// The artifact type of the allowlist.
	ArtifactType types.String `tfsdk:"-"`
	// Time at which this artifact allowlist was set, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of the user who set the artifact allowlist.
	CreatedBy types.String `tfsdk:"created_by"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
}

func (to *SetArtifactAllowlist) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SetArtifactAllowlist) {
}

func (to *SetArtifactAllowlist) SyncFieldsDuringRead(ctx context.Context, from SetArtifactAllowlist) {
}

func (m SetArtifactAllowlist) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["artifact_matchers"] = attrs["artifact_matchers"].SetRequired()
	attrs["created_at"] = attrs["created_at"].SetComputed()
	attrs["created_by"] = attrs["created_by"].SetComputed()
	attrs["metastore_id"] = attrs["metastore_id"].SetComputed()
	attrs["artifact_type"] = attrs["artifact_type"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SetArtifactAllowlist.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SetArtifactAllowlist) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"artifact_matchers": reflect.TypeOf(ArtifactMatcher{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SetArtifactAllowlist
// only implements ToObjectValue() and Type().
func (m SetArtifactAllowlist) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"artifact_matchers": m.ArtifactMatchers,
			"artifact_type":     m.ArtifactType,
			"created_at":        m.CreatedAt,
			"created_by":        m.CreatedBy,
			"metastore_id":      m.MetastoreId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SetArtifactAllowlist) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"artifact_matchers": basetypes.ListType{
				ElemType: ArtifactMatcher{}.Type(ctx),
			},
			"artifact_type": types.StringType,
			"created_at":    types.Int64Type,
			"created_by":    types.StringType,
			"metastore_id":  types.StringType,
		},
	}
}

// GetArtifactMatchers returns the value of the ArtifactMatchers field in SetArtifactAllowlist as
// a slice of ArtifactMatcher values.
// If the field is unknown or null, the boolean return value is false.
func (m *SetArtifactAllowlist) GetArtifactMatchers(ctx context.Context) ([]ArtifactMatcher, bool) {
	if m.ArtifactMatchers.IsNull() || m.ArtifactMatchers.IsUnknown() {
		return nil, false
	}
	var v []ArtifactMatcher
	d := m.ArtifactMatchers.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetArtifactMatchers sets the value of the ArtifactMatchers field in SetArtifactAllowlist.
func (m *SetArtifactAllowlist) SetArtifactMatchers(ctx context.Context, v []ArtifactMatcher) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["artifact_matchers"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.ArtifactMatchers = types.ListValueMust(t, vs)
}

type SetRegisteredModelAliasRequest struct {
	// The name of the alias
	Alias types.String `tfsdk:"-"`
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"-"`
	// The version number of the model version to which the alias points
	VersionNum types.Int64 `tfsdk:"version_num"`
}

func (to *SetRegisteredModelAliasRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SetRegisteredModelAliasRequest) {
}

func (to *SetRegisteredModelAliasRequest) SyncFieldsDuringRead(ctx context.Context, from SetRegisteredModelAliasRequest) {
}

func (m SetRegisteredModelAliasRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["version_num"] = attrs["version_num"].SetRequired()
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["alias"] = attrs["alias"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SetRegisteredModelAliasRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SetRegisteredModelAliasRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SetRegisteredModelAliasRequest
// only implements ToObjectValue() and Type().
func (m SetRegisteredModelAliasRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"alias":       m.Alias,
			"full_name":   m.FullName,
			"version_num": m.VersionNum,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SetRegisteredModelAliasRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"alias":       types.StringType,
			"full_name":   types.StringType,
			"version_num": types.Int64Type,
		},
	}
}

// Server-Side Encryption properties for clients communicating with AWS s3.
type SseEncryptionDetails struct {
	// Sets the value of the 'x-amz-server-side-encryption' header in S3
	// request.
	Algorithm types.String `tfsdk:"algorithm"`
	// Optional. The ARN of the SSE-KMS key used with the S3 location, when
	// algorithm = "SSE-KMS". Sets the value of the
	// 'x-amz-server-side-encryption-aws-kms-key-id' header.
	AwsKmsKeyArn types.String `tfsdk:"aws_kms_key_arn"`
}

func (to *SseEncryptionDetails) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SseEncryptionDetails) {
}

func (to *SseEncryptionDetails) SyncFieldsDuringRead(ctx context.Context, from SseEncryptionDetails) {
}

func (m SseEncryptionDetails) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["algorithm"] = attrs["algorithm"].SetOptional()
	attrs["aws_kms_key_arn"] = attrs["aws_kms_key_arn"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SseEncryptionDetails.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SseEncryptionDetails) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SseEncryptionDetails
// only implements ToObjectValue() and Type().
func (m SseEncryptionDetails) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"algorithm":       m.Algorithm,
			"aws_kms_key_arn": m.AwsKmsKeyArn,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SseEncryptionDetails) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"algorithm":       types.StringType,
			"aws_kms_key_arn": types.StringType,
		},
	}
}

type StorageCredentialInfo struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// The Cloudflare API token configuration.
	CloudflareApiToken types.Object `tfsdk:"cloudflare_api_token"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// Time at which this credential was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of credential creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The full name of the credential.
	FullName types.String `tfsdk:"full_name"`
	// The unique identifier of the credential.
	Id types.String `tfsdk:"id"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Unique identifier of the parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The credential name. The name must be unique among storage and service
	// credentials within the metastore.
	Name types.String `tfsdk:"name"`
	// Username of current owner of credential.
	Owner types.String `tfsdk:"owner"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Time at which this credential was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the credential.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// Whether this credential is the current metastore's root storage
	// credential. Only applicable when purpose is **STORAGE**.
	UsedForManagedStorage types.Bool `tfsdk:"used_for_managed_storage"`
}

func (to *StorageCredentialInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from StorageCredentialInfo) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				// Recursively sync the fields of CloudflareApiToken
				toCloudflareApiToken.SyncFieldsDuringCreateOrUpdate(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *StorageCredentialInfo) SyncFieldsDuringRead(ctx context.Context, from StorageCredentialInfo) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				toCloudflareApiToken.SyncFieldsDuringRead(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m StorageCredentialInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["cloudflare_api_token"] = attrs["cloudflare_api_token"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["id"] = attrs["id"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["used_for_managed_storage"] = attrs["used_for_managed_storage"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in StorageCredentialInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m StorageCredentialInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRoleResponse{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentityResponse{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"cloudflare_api_token":           reflect.TypeOf(CloudflareApiToken{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccountResponse{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, StorageCredentialInfo
// only implements ToObjectValue() and Type().
func (m StorageCredentialInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"cloudflare_api_token":           m.CloudflareApiToken,
			"comment":                        m.Comment,
			"created_at":                     m.CreatedAt,
			"created_by":                     m.CreatedBy,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"full_name":                      m.FullName,
			"id":                             m.Id,
			"isolation_mode":                 m.IsolationMode,
			"metastore_id":                   m.MetastoreId,
			"name":                           m.Name,
			"owner":                          m.Owner,
			"read_only":                      m.ReadOnly,
			"updated_at":                     m.UpdatedAt,
			"updated_by":                     m.UpdatedBy,
			"used_for_managed_storage":       m.UsedForManagedStorage,
		})
}

// Type implements basetypes.ObjectValuable.
func (m StorageCredentialInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRoleResponse{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentityResponse{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"cloudflare_api_token":           CloudflareApiToken{}.Type(ctx),
			"comment":                        types.StringType,
			"created_at":                     types.Int64Type,
			"created_by":                     types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccountResponse{}.Type(ctx),
			"full_name":                      types.StringType,
			"id":                             types.StringType,
			"isolation_mode":                 types.StringType,
			"metastore_id":                   types.StringType,
			"name":                           types.StringType,
			"owner":                          types.StringType,
			"read_only":                      types.BoolType,
			"updated_at":                     types.Int64Type,
			"updated_by":                     types.StringType,
			"used_for_managed_storage":       types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in StorageCredentialInfo as
// a AwsIamRoleResponse value.
// If the field is unknown or null, the boolean return value is false.
func (m *StorageCredentialInfo) GetAwsIamRole(ctx context.Context) (AwsIamRoleResponse, bool) {
	var e AwsIamRoleResponse
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRoleResponse
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in StorageCredentialInfo.
func (m *StorageCredentialInfo) SetAwsIamRole(ctx context.Context, v AwsIamRoleResponse) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in StorageCredentialInfo as
// a AzureManagedIdentityResponse value.
// If the field is unknown or null, the boolean return value is false.
func (m *StorageCredentialInfo) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentityResponse, bool) {
	var e AzureManagedIdentityResponse
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentityResponse
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in StorageCredentialInfo.
func (m *StorageCredentialInfo) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentityResponse) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in StorageCredentialInfo as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *StorageCredentialInfo) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in StorageCredentialInfo.
func (m *StorageCredentialInfo) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetCloudflareApiToken returns the value of the CloudflareApiToken field in StorageCredentialInfo as
// a CloudflareApiToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *StorageCredentialInfo) GetCloudflareApiToken(ctx context.Context) (CloudflareApiToken, bool) {
	var e CloudflareApiToken
	if m.CloudflareApiToken.IsNull() || m.CloudflareApiToken.IsUnknown() {
		return e, false
	}
	var v CloudflareApiToken
	d := m.CloudflareApiToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCloudflareApiToken sets the value of the CloudflareApiToken field in StorageCredentialInfo.
func (m *StorageCredentialInfo) SetCloudflareApiToken(ctx context.Context, v CloudflareApiToken) {
	vs := v.ToObjectValue(ctx)
	m.CloudflareApiToken = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in StorageCredentialInfo as
// a DatabricksGcpServiceAccountResponse value.
// If the field is unknown or null, the boolean return value is false.
func (m *StorageCredentialInfo) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccountResponse, bool) {
	var e DatabricksGcpServiceAccountResponse
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccountResponse
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in StorageCredentialInfo.
func (m *StorageCredentialInfo) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccountResponse) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type SummaryRequest struct {
}

func (to *SummaryRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SummaryRequest) {
}

func (to *SummaryRequest) SyncFieldsDuringRead(ctx context.Context, from SummaryRequest) {
}

func (m SummaryRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SummaryRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SummaryRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SummaryRequest
// only implements ToObjectValue() and Type().
func (m SummaryRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m SummaryRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type SystemSchemaInfo struct {
	// Name of the system schema.
	Schema types.String `tfsdk:"schema"`
	// The current state of enablement for the system schema. An empty string
	// means the system schema is available and ready for opt-in. Possible
	// values: AVAILABLE | ENABLE_INITIALIZED | ENABLE_COMPLETED |
	// DISABLE_INITIALIZED | UNAVAILABLE | MANAGED
	State types.String `tfsdk:"state"`
}

func (to *SystemSchemaInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from SystemSchemaInfo) {
}

func (to *SystemSchemaInfo) SyncFieldsDuringRead(ctx context.Context, from SystemSchemaInfo) {
}

func (m SystemSchemaInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["schema"] = attrs["schema"].SetRequired()
	attrs["state"] = attrs["state"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in SystemSchemaInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m SystemSchemaInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, SystemSchemaInfo
// only implements ToObjectValue() and Type().
func (m SystemSchemaInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"schema": m.Schema,
			"state":  m.State,
		})
}

// Type implements basetypes.ObjectValuable.
func (m SystemSchemaInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"schema": types.StringType,
			"state":  types.StringType,
		},
	}
}

// A table constraint, as defined by *one* of the following fields being set:
// __primary_key_constraint__, __foreign_key_constraint__,
// __named_table_constraint__.
type TableConstraint struct {
	ForeignKeyConstraint types.Object `tfsdk:"foreign_key_constraint"`

	NamedTableConstraint types.Object `tfsdk:"named_table_constraint"`

	PrimaryKeyConstraint types.Object `tfsdk:"primary_key_constraint"`
}

func (to *TableConstraint) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TableConstraint) {
	if !from.ForeignKeyConstraint.IsNull() && !from.ForeignKeyConstraint.IsUnknown() {
		if toForeignKeyConstraint, ok := to.GetForeignKeyConstraint(ctx); ok {
			if fromForeignKeyConstraint, ok := from.GetForeignKeyConstraint(ctx); ok {
				// Recursively sync the fields of ForeignKeyConstraint
				toForeignKeyConstraint.SyncFieldsDuringCreateOrUpdate(ctx, fromForeignKeyConstraint)
				to.SetForeignKeyConstraint(ctx, toForeignKeyConstraint)
			}
		}
	}
	if !from.NamedTableConstraint.IsNull() && !from.NamedTableConstraint.IsUnknown() {
		if toNamedTableConstraint, ok := to.GetNamedTableConstraint(ctx); ok {
			if fromNamedTableConstraint, ok := from.GetNamedTableConstraint(ctx); ok {
				// Recursively sync the fields of NamedTableConstraint
				toNamedTableConstraint.SyncFieldsDuringCreateOrUpdate(ctx, fromNamedTableConstraint)
				to.SetNamedTableConstraint(ctx, toNamedTableConstraint)
			}
		}
	}
	if !from.PrimaryKeyConstraint.IsNull() && !from.PrimaryKeyConstraint.IsUnknown() {
		if toPrimaryKeyConstraint, ok := to.GetPrimaryKeyConstraint(ctx); ok {
			if fromPrimaryKeyConstraint, ok := from.GetPrimaryKeyConstraint(ctx); ok {
				// Recursively sync the fields of PrimaryKeyConstraint
				toPrimaryKeyConstraint.SyncFieldsDuringCreateOrUpdate(ctx, fromPrimaryKeyConstraint)
				to.SetPrimaryKeyConstraint(ctx, toPrimaryKeyConstraint)
			}
		}
	}
}

func (to *TableConstraint) SyncFieldsDuringRead(ctx context.Context, from TableConstraint) {
	if !from.ForeignKeyConstraint.IsNull() && !from.ForeignKeyConstraint.IsUnknown() {
		if toForeignKeyConstraint, ok := to.GetForeignKeyConstraint(ctx); ok {
			if fromForeignKeyConstraint, ok := from.GetForeignKeyConstraint(ctx); ok {
				toForeignKeyConstraint.SyncFieldsDuringRead(ctx, fromForeignKeyConstraint)
				to.SetForeignKeyConstraint(ctx, toForeignKeyConstraint)
			}
		}
	}
	if !from.NamedTableConstraint.IsNull() && !from.NamedTableConstraint.IsUnknown() {
		if toNamedTableConstraint, ok := to.GetNamedTableConstraint(ctx); ok {
			if fromNamedTableConstraint, ok := from.GetNamedTableConstraint(ctx); ok {
				toNamedTableConstraint.SyncFieldsDuringRead(ctx, fromNamedTableConstraint)
				to.SetNamedTableConstraint(ctx, toNamedTableConstraint)
			}
		}
	}
	if !from.PrimaryKeyConstraint.IsNull() && !from.PrimaryKeyConstraint.IsUnknown() {
		if toPrimaryKeyConstraint, ok := to.GetPrimaryKeyConstraint(ctx); ok {
			if fromPrimaryKeyConstraint, ok := from.GetPrimaryKeyConstraint(ctx); ok {
				toPrimaryKeyConstraint.SyncFieldsDuringRead(ctx, fromPrimaryKeyConstraint)
				to.SetPrimaryKeyConstraint(ctx, toPrimaryKeyConstraint)
			}
		}
	}
}

func (m TableConstraint) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["foreign_key_constraint"] = attrs["foreign_key_constraint"].SetOptional()
	attrs["named_table_constraint"] = attrs["named_table_constraint"].SetOptional()
	attrs["primary_key_constraint"] = attrs["primary_key_constraint"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TableConstraint.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TableConstraint) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"foreign_key_constraint": reflect.TypeOf(ForeignKeyConstraint{}),
		"named_table_constraint": reflect.TypeOf(NamedTableConstraint{}),
		"primary_key_constraint": reflect.TypeOf(PrimaryKeyConstraint{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TableConstraint
// only implements ToObjectValue() and Type().
func (m TableConstraint) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"foreign_key_constraint": m.ForeignKeyConstraint,
			"named_table_constraint": m.NamedTableConstraint,
			"primary_key_constraint": m.PrimaryKeyConstraint,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TableConstraint) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"foreign_key_constraint": ForeignKeyConstraint{}.Type(ctx),
			"named_table_constraint": NamedTableConstraint{}.Type(ctx),
			"primary_key_constraint": PrimaryKeyConstraint{}.Type(ctx),
		},
	}
}

// GetForeignKeyConstraint returns the value of the ForeignKeyConstraint field in TableConstraint as
// a ForeignKeyConstraint value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableConstraint) GetForeignKeyConstraint(ctx context.Context) (ForeignKeyConstraint, bool) {
	var e ForeignKeyConstraint
	if m.ForeignKeyConstraint.IsNull() || m.ForeignKeyConstraint.IsUnknown() {
		return e, false
	}
	var v ForeignKeyConstraint
	d := m.ForeignKeyConstraint.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetForeignKeyConstraint sets the value of the ForeignKeyConstraint field in TableConstraint.
func (m *TableConstraint) SetForeignKeyConstraint(ctx context.Context, v ForeignKeyConstraint) {
	vs := v.ToObjectValue(ctx)
	m.ForeignKeyConstraint = vs
}

// GetNamedTableConstraint returns the value of the NamedTableConstraint field in TableConstraint as
// a NamedTableConstraint value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableConstraint) GetNamedTableConstraint(ctx context.Context) (NamedTableConstraint, bool) {
	var e NamedTableConstraint
	if m.NamedTableConstraint.IsNull() || m.NamedTableConstraint.IsUnknown() {
		return e, false
	}
	var v NamedTableConstraint
	d := m.NamedTableConstraint.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetNamedTableConstraint sets the value of the NamedTableConstraint field in TableConstraint.
func (m *TableConstraint) SetNamedTableConstraint(ctx context.Context, v NamedTableConstraint) {
	vs := v.ToObjectValue(ctx)
	m.NamedTableConstraint = vs
}

// GetPrimaryKeyConstraint returns the value of the PrimaryKeyConstraint field in TableConstraint as
// a PrimaryKeyConstraint value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableConstraint) GetPrimaryKeyConstraint(ctx context.Context) (PrimaryKeyConstraint, bool) {
	var e PrimaryKeyConstraint
	if m.PrimaryKeyConstraint.IsNull() || m.PrimaryKeyConstraint.IsUnknown() {
		return e, false
	}
	var v PrimaryKeyConstraint
	d := m.PrimaryKeyConstraint.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrimaryKeyConstraint sets the value of the PrimaryKeyConstraint field in TableConstraint.
func (m *TableConstraint) SetPrimaryKeyConstraint(ctx context.Context, v PrimaryKeyConstraint) {
	vs := v.ToObjectValue(ctx)
	m.PrimaryKeyConstraint = vs
}

// A table that is dependent on a SQL object.
type TableDependency struct {
	// Full name of the dependent table, in the form of
	// __catalog_name__.__schema_name__.__table_name__.
	TableFullName types.String `tfsdk:"table_full_name"`
}

func (to *TableDependency) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TableDependency) {
}

func (to *TableDependency) SyncFieldsDuringRead(ctx context.Context, from TableDependency) {
}

func (m TableDependency) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_full_name"] = attrs["table_full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TableDependency.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TableDependency) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TableDependency
// only implements ToObjectValue() and Type().
func (m TableDependency) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_full_name": m.TableFullName,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TableDependency) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_full_name": types.StringType,
		},
	}
}

type TableExistsResponse struct {
	// Whether the table exists or not.
	TableExists types.Bool `tfsdk:"table_exists"`
}

func (to *TableExistsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TableExistsResponse) {
}

func (to *TableExistsResponse) SyncFieldsDuringRead(ctx context.Context, from TableExistsResponse) {
}

func (m TableExistsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["table_exists"] = attrs["table_exists"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TableExistsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TableExistsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TableExistsResponse
// only implements ToObjectValue() and Type().
func (m TableExistsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"table_exists": m.TableExists,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TableExistsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"table_exists": types.BoolType,
		},
	}
}

type TableInfo struct {
	// The AWS access point to use when accesing s3 for this external location.
	AccessPoint types.String `tfsdk:"access_point"`
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// Name of parent catalog.
	CatalogName types.String `tfsdk:"catalog_name"`
	// The array of __ColumnInfo__ definitions of the table's columns.
	Columns types.List `tfsdk:"columns"`
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Time at which this table was created, in epoch milliseconds.
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// Username of table creator.
	CreatedBy types.String `tfsdk:"created_by"`
	// Unique ID of the Data Access Configuration to use with the table data.
	DataAccessConfigurationId types.String `tfsdk:"data_access_configuration_id"`

	DataSourceFormat types.String `tfsdk:"data_source_format"`
	// Time at which this table was deleted, in epoch milliseconds. Field is
	// omitted if table is not deleted.
	DeletedAt types.Int64 `tfsdk:"deleted_at"`
	// Information pertaining to current state of the delta table.
	DeltaRuntimePropertiesKvpairs types.Object `tfsdk:"delta_runtime_properties_kvpairs"`

	EffectivePredictiveOptimizationFlag types.Object `tfsdk:"effective_predictive_optimization_flag"`

	EnablePredictiveOptimization types.String `tfsdk:"enable_predictive_optimization"`

	EncryptionDetails types.Object `tfsdk:"encryption_details"`
	// Full name of table, in form of
	// __catalog_name__.__schema_name__.__table_name__
	FullName types.String `tfsdk:"full_name"`
	// Unique identifier of parent metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// Name of table, relative to parent schema.
	Name types.String `tfsdk:"name"`
	// Username of current owner of table.
	Owner types.String `tfsdk:"owner"`
	// The pipeline ID of the table. Applicable for tables created by pipelines
	// (Materialized View, Streaming Table, etc.).
	PipelineId types.String `tfsdk:"pipeline_id"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`

	RowFilter types.Object `tfsdk:"row_filter"`
	// Name of parent schema relative to its parent catalog.
	SchemaName types.String `tfsdk:"schema_name"`
	// SecurableKindManifest of table, including capabilities the table has.
	SecurableKindManifest types.Object `tfsdk:"securable_kind_manifest"`
	// List of schemes whose objects can be referenced without qualification.
	SqlPath types.String `tfsdk:"sql_path"`
	// Name of the storage credential, when a storage credential is configured
	// for use with this table.
	StorageCredentialName types.String `tfsdk:"storage_credential_name"`
	// Storage root URL for table (for **MANAGED**, **EXTERNAL** tables).
	StorageLocation types.String `tfsdk:"storage_location"`
	// List of table constraints. Note: this field is not set in the output of
	// the __listTables__ API.
	TableConstraints types.List `tfsdk:"table_constraints"`
	// The unique identifier of the table.
	TableId types.String `tfsdk:"table_id"`

	TableType types.String `tfsdk:"table_type"`
	// Time at which this table was last modified, in epoch milliseconds.
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// Username of user who last modified the table.
	UpdatedBy types.String `tfsdk:"updated_by"`
	// View definition SQL (when __table_type__ is **VIEW**,
	// **MATERIALIZED_VIEW**, or **STREAMING_TABLE**)
	ViewDefinition types.String `tfsdk:"view_definition"`
	// View dependencies (when table_type == **VIEW** or **MATERIALIZED_VIEW**,
	// **STREAMING_TABLE**) - when DependencyList is None, the dependency is not
	// provided; - when DependencyList is an empty list, the dependency is
	// provided but is empty; - when DependencyList is not an empty list,
	// dependencies are provided and recorded.
	ViewDependencies types.Object `tfsdk:"view_dependencies"`
}

func (to *TableInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TableInfo) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.DeltaRuntimePropertiesKvpairs.IsNull() && !from.DeltaRuntimePropertiesKvpairs.IsUnknown() {
		if toDeltaRuntimePropertiesKvpairs, ok := to.GetDeltaRuntimePropertiesKvpairs(ctx); ok {
			if fromDeltaRuntimePropertiesKvpairs, ok := from.GetDeltaRuntimePropertiesKvpairs(ctx); ok {
				// Recursively sync the fields of DeltaRuntimePropertiesKvpairs
				toDeltaRuntimePropertiesKvpairs.SyncFieldsDuringCreateOrUpdate(ctx, fromDeltaRuntimePropertiesKvpairs)
				to.SetDeltaRuntimePropertiesKvpairs(ctx, toDeltaRuntimePropertiesKvpairs)
			}
		}
	}
	if !from.EffectivePredictiveOptimizationFlag.IsNull() && !from.EffectivePredictiveOptimizationFlag.IsUnknown() {
		if toEffectivePredictiveOptimizationFlag, ok := to.GetEffectivePredictiveOptimizationFlag(ctx); ok {
			if fromEffectivePredictiveOptimizationFlag, ok := from.GetEffectivePredictiveOptimizationFlag(ctx); ok {
				// Recursively sync the fields of EffectivePredictiveOptimizationFlag
				toEffectivePredictiveOptimizationFlag.SyncFieldsDuringCreateOrUpdate(ctx, fromEffectivePredictiveOptimizationFlag)
				to.SetEffectivePredictiveOptimizationFlag(ctx, toEffectivePredictiveOptimizationFlag)
			}
		}
	}
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				// Recursively sync the fields of EncryptionDetails
				toEncryptionDetails.SyncFieldsDuringCreateOrUpdate(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.RowFilter.IsNull() && !from.RowFilter.IsUnknown() {
		if toRowFilter, ok := to.GetRowFilter(ctx); ok {
			if fromRowFilter, ok := from.GetRowFilter(ctx); ok {
				// Recursively sync the fields of RowFilter
				toRowFilter.SyncFieldsDuringCreateOrUpdate(ctx, fromRowFilter)
				to.SetRowFilter(ctx, toRowFilter)
			}
		}
	}
	if !from.SecurableKindManifest.IsNull() && !from.SecurableKindManifest.IsUnknown() {
		if toSecurableKindManifest, ok := to.GetSecurableKindManifest(ctx); ok {
			if fromSecurableKindManifest, ok := from.GetSecurableKindManifest(ctx); ok {
				// Recursively sync the fields of SecurableKindManifest
				toSecurableKindManifest.SyncFieldsDuringCreateOrUpdate(ctx, fromSecurableKindManifest)
				to.SetSecurableKindManifest(ctx, toSecurableKindManifest)
			}
		}
	}
	if !from.TableConstraints.IsNull() && !from.TableConstraints.IsUnknown() && to.TableConstraints.IsNull() && len(from.TableConstraints.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for TableConstraints, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.TableConstraints = from.TableConstraints
	}
	if !from.ViewDependencies.IsNull() && !from.ViewDependencies.IsUnknown() {
		if toViewDependencies, ok := to.GetViewDependencies(ctx); ok {
			if fromViewDependencies, ok := from.GetViewDependencies(ctx); ok {
				// Recursively sync the fields of ViewDependencies
				toViewDependencies.SyncFieldsDuringCreateOrUpdate(ctx, fromViewDependencies)
				to.SetViewDependencies(ctx, toViewDependencies)
			}
		}
	}
}

func (to *TableInfo) SyncFieldsDuringRead(ctx context.Context, from TableInfo) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.DeltaRuntimePropertiesKvpairs.IsNull() && !from.DeltaRuntimePropertiesKvpairs.IsUnknown() {
		if toDeltaRuntimePropertiesKvpairs, ok := to.GetDeltaRuntimePropertiesKvpairs(ctx); ok {
			if fromDeltaRuntimePropertiesKvpairs, ok := from.GetDeltaRuntimePropertiesKvpairs(ctx); ok {
				toDeltaRuntimePropertiesKvpairs.SyncFieldsDuringRead(ctx, fromDeltaRuntimePropertiesKvpairs)
				to.SetDeltaRuntimePropertiesKvpairs(ctx, toDeltaRuntimePropertiesKvpairs)
			}
		}
	}
	if !from.EffectivePredictiveOptimizationFlag.IsNull() && !from.EffectivePredictiveOptimizationFlag.IsUnknown() {
		if toEffectivePredictiveOptimizationFlag, ok := to.GetEffectivePredictiveOptimizationFlag(ctx); ok {
			if fromEffectivePredictiveOptimizationFlag, ok := from.GetEffectivePredictiveOptimizationFlag(ctx); ok {
				toEffectivePredictiveOptimizationFlag.SyncFieldsDuringRead(ctx, fromEffectivePredictiveOptimizationFlag)
				to.SetEffectivePredictiveOptimizationFlag(ctx, toEffectivePredictiveOptimizationFlag)
			}
		}
	}
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				toEncryptionDetails.SyncFieldsDuringRead(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.RowFilter.IsNull() && !from.RowFilter.IsUnknown() {
		if toRowFilter, ok := to.GetRowFilter(ctx); ok {
			if fromRowFilter, ok := from.GetRowFilter(ctx); ok {
				toRowFilter.SyncFieldsDuringRead(ctx, fromRowFilter)
				to.SetRowFilter(ctx, toRowFilter)
			}
		}
	}
	if !from.SecurableKindManifest.IsNull() && !from.SecurableKindManifest.IsUnknown() {
		if toSecurableKindManifest, ok := to.GetSecurableKindManifest(ctx); ok {
			if fromSecurableKindManifest, ok := from.GetSecurableKindManifest(ctx); ok {
				toSecurableKindManifest.SyncFieldsDuringRead(ctx, fromSecurableKindManifest)
				to.SetSecurableKindManifest(ctx, toSecurableKindManifest)
			}
		}
	}
	if !from.TableConstraints.IsNull() && !from.TableConstraints.IsUnknown() && to.TableConstraints.IsNull() && len(from.TableConstraints.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for TableConstraints, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.TableConstraints = from.TableConstraints
	}
	if !from.ViewDependencies.IsNull() && !from.ViewDependencies.IsUnknown() {
		if toViewDependencies, ok := to.GetViewDependencies(ctx); ok {
			if fromViewDependencies, ok := from.GetViewDependencies(ctx); ok {
				toViewDependencies.SyncFieldsDuringRead(ctx, fromViewDependencies)
				to.SetViewDependencies(ctx, toViewDependencies)
			}
		}
	}
}

func (m TableInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_point"] = attrs["access_point"].SetOptional()
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["data_access_configuration_id"] = attrs["data_access_configuration_id"].SetOptional()
	attrs["data_source_format"] = attrs["data_source_format"].SetOptional()
	attrs["deleted_at"] = attrs["deleted_at"].SetOptional()
	attrs["delta_runtime_properties_kvpairs"] = attrs["delta_runtime_properties_kvpairs"].SetOptional()
	attrs["effective_predictive_optimization_flag"] = attrs["effective_predictive_optimization_flag"].SetOptional()
	attrs["enable_predictive_optimization"] = attrs["enable_predictive_optimization"].SetOptional()
	attrs["encryption_details"] = attrs["encryption_details"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["pipeline_id"] = attrs["pipeline_id"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["row_filter"] = attrs["row_filter"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["securable_kind_manifest"] = attrs["securable_kind_manifest"].SetOptional()
	attrs["sql_path"] = attrs["sql_path"].SetOptional()
	attrs["storage_credential_name"] = attrs["storage_credential_name"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["table_constraints"] = attrs["table_constraints"].SetOptional()
	attrs["table_id"] = attrs["table_id"].SetOptional()
	attrs["table_type"] = attrs["table_type"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["view_definition"] = attrs["view_definition"].SetOptional()
	attrs["view_dependencies"] = attrs["view_dependencies"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TableInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TableInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":                                reflect.TypeOf(ColumnInfo{}),
		"delta_runtime_properties_kvpairs":       reflect.TypeOf(DeltaRuntimePropertiesKvPairs{}),
		"effective_predictive_optimization_flag": reflect.TypeOf(EffectivePredictiveOptimizationFlag{}),
		"encryption_details":                     reflect.TypeOf(EncryptionDetails{}),
		"properties":                             reflect.TypeOf(types.String{}),
		"row_filter":                             reflect.TypeOf(TableRowFilter{}),
		"securable_kind_manifest":                reflect.TypeOf(SecurableKindManifest{}),
		"table_constraints":                      reflect.TypeOf(TableConstraint{}),
		"view_dependencies":                      reflect.TypeOf(DependencyList{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TableInfo
// only implements ToObjectValue() and Type().
func (m TableInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_point":                           m.AccessPoint,
			"browse_only":                            m.BrowseOnly,
			"catalog_name":                           m.CatalogName,
			"columns":                                m.Columns,
			"comment":                                m.Comment,
			"created_at":                             m.CreatedAt,
			"created_by":                             m.CreatedBy,
			"data_access_configuration_id":           m.DataAccessConfigurationId,
			"data_source_format":                     m.DataSourceFormat,
			"deleted_at":                             m.DeletedAt,
			"delta_runtime_properties_kvpairs":       m.DeltaRuntimePropertiesKvpairs,
			"effective_predictive_optimization_flag": m.EffectivePredictiveOptimizationFlag,
			"enable_predictive_optimization":         m.EnablePredictiveOptimization,
			"encryption_details":                     m.EncryptionDetails,
			"full_name":                              m.FullName,
			"metastore_id":                           m.MetastoreId,
			"name":                                   m.Name,
			"owner":                                  m.Owner,
			"pipeline_id":                            m.PipelineId,
			"properties":                             m.Properties,
			"row_filter":                             m.RowFilter,
			"schema_name":                            m.SchemaName,
			"securable_kind_manifest":                m.SecurableKindManifest,
			"sql_path":                               m.SqlPath,
			"storage_credential_name":                m.StorageCredentialName,
			"storage_location":                       m.StorageLocation,
			"table_constraints":                      m.TableConstraints,
			"table_id":                               m.TableId,
			"table_type":                             m.TableType,
			"updated_at":                             m.UpdatedAt,
			"updated_by":                             m.UpdatedBy,
			"view_definition":                        m.ViewDefinition,
			"view_dependencies":                      m.ViewDependencies,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TableInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_point": types.StringType,
			"browse_only":  types.BoolType,
			"catalog_name": types.StringType,
			"columns": basetypes.ListType{
				ElemType: ColumnInfo{}.Type(ctx),
			},
			"comment":                                types.StringType,
			"created_at":                             types.Int64Type,
			"created_by":                             types.StringType,
			"data_access_configuration_id":           types.StringType,
			"data_source_format":                     types.StringType,
			"deleted_at":                             types.Int64Type,
			"delta_runtime_properties_kvpairs":       DeltaRuntimePropertiesKvPairs{}.Type(ctx),
			"effective_predictive_optimization_flag": EffectivePredictiveOptimizationFlag{}.Type(ctx),
			"enable_predictive_optimization":         types.StringType,
			"encryption_details":                     EncryptionDetails{}.Type(ctx),
			"full_name":                              types.StringType,
			"metastore_id":                           types.StringType,
			"name":                                   types.StringType,
			"owner":                                  types.StringType,
			"pipeline_id":                            types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"row_filter":              TableRowFilter{}.Type(ctx),
			"schema_name":             types.StringType,
			"securable_kind_manifest": SecurableKindManifest{}.Type(ctx),
			"sql_path":                types.StringType,
			"storage_credential_name": types.StringType,
			"storage_location":        types.StringType,
			"table_constraints": basetypes.ListType{
				ElemType: TableConstraint{}.Type(ctx),
			},
			"table_id":          types.StringType,
			"table_type":        types.StringType,
			"updated_at":        types.Int64Type,
			"updated_by":        types.StringType,
			"view_definition":   types.StringType,
			"view_dependencies": DependencyList{}.Type(ctx),
		},
	}
}

// GetColumns returns the value of the Columns field in TableInfo as
// a slice of ColumnInfo values.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetColumns(ctx context.Context) ([]ColumnInfo, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []ColumnInfo
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in TableInfo.
func (m *TableInfo) SetColumns(ctx context.Context, v []ColumnInfo) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetDeltaRuntimePropertiesKvpairs returns the value of the DeltaRuntimePropertiesKvpairs field in TableInfo as
// a DeltaRuntimePropertiesKvPairs value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetDeltaRuntimePropertiesKvpairs(ctx context.Context) (DeltaRuntimePropertiesKvPairs, bool) {
	var e DeltaRuntimePropertiesKvPairs
	if m.DeltaRuntimePropertiesKvpairs.IsNull() || m.DeltaRuntimePropertiesKvpairs.IsUnknown() {
		return e, false
	}
	var v DeltaRuntimePropertiesKvPairs
	d := m.DeltaRuntimePropertiesKvpairs.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDeltaRuntimePropertiesKvpairs sets the value of the DeltaRuntimePropertiesKvpairs field in TableInfo.
func (m *TableInfo) SetDeltaRuntimePropertiesKvpairs(ctx context.Context, v DeltaRuntimePropertiesKvPairs) {
	vs := v.ToObjectValue(ctx)
	m.DeltaRuntimePropertiesKvpairs = vs
}

// GetEffectivePredictiveOptimizationFlag returns the value of the EffectivePredictiveOptimizationFlag field in TableInfo as
// a EffectivePredictiveOptimizationFlag value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetEffectivePredictiveOptimizationFlag(ctx context.Context) (EffectivePredictiveOptimizationFlag, bool) {
	var e EffectivePredictiveOptimizationFlag
	if m.EffectivePredictiveOptimizationFlag.IsNull() || m.EffectivePredictiveOptimizationFlag.IsUnknown() {
		return e, false
	}
	var v EffectivePredictiveOptimizationFlag
	d := m.EffectivePredictiveOptimizationFlag.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEffectivePredictiveOptimizationFlag sets the value of the EffectivePredictiveOptimizationFlag field in TableInfo.
func (m *TableInfo) SetEffectivePredictiveOptimizationFlag(ctx context.Context, v EffectivePredictiveOptimizationFlag) {
	vs := v.ToObjectValue(ctx)
	m.EffectivePredictiveOptimizationFlag = vs
}

// GetEncryptionDetails returns the value of the EncryptionDetails field in TableInfo as
// a EncryptionDetails value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetEncryptionDetails(ctx context.Context) (EncryptionDetails, bool) {
	var e EncryptionDetails
	if m.EncryptionDetails.IsNull() || m.EncryptionDetails.IsUnknown() {
		return e, false
	}
	var v EncryptionDetails
	d := m.EncryptionDetails.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEncryptionDetails sets the value of the EncryptionDetails field in TableInfo.
func (m *TableInfo) SetEncryptionDetails(ctx context.Context, v EncryptionDetails) {
	vs := v.ToObjectValue(ctx)
	m.EncryptionDetails = vs
}

// GetProperties returns the value of the Properties field in TableInfo as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in TableInfo.
func (m *TableInfo) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetRowFilter returns the value of the RowFilter field in TableInfo as
// a TableRowFilter value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetRowFilter(ctx context.Context) (TableRowFilter, bool) {
	var e TableRowFilter
	if m.RowFilter.IsNull() || m.RowFilter.IsUnknown() {
		return e, false
	}
	var v TableRowFilter
	d := m.RowFilter.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRowFilter sets the value of the RowFilter field in TableInfo.
func (m *TableInfo) SetRowFilter(ctx context.Context, v TableRowFilter) {
	vs := v.ToObjectValue(ctx)
	m.RowFilter = vs
}

// GetSecurableKindManifest returns the value of the SecurableKindManifest field in TableInfo as
// a SecurableKindManifest value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetSecurableKindManifest(ctx context.Context) (SecurableKindManifest, bool) {
	var e SecurableKindManifest
	if m.SecurableKindManifest.IsNull() || m.SecurableKindManifest.IsUnknown() {
		return e, false
	}
	var v SecurableKindManifest
	d := m.SecurableKindManifest.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSecurableKindManifest sets the value of the SecurableKindManifest field in TableInfo.
func (m *TableInfo) SetSecurableKindManifest(ctx context.Context, v SecurableKindManifest) {
	vs := v.ToObjectValue(ctx)
	m.SecurableKindManifest = vs
}

// GetTableConstraints returns the value of the TableConstraints field in TableInfo as
// a slice of TableConstraint values.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetTableConstraints(ctx context.Context) ([]TableConstraint, bool) {
	if m.TableConstraints.IsNull() || m.TableConstraints.IsUnknown() {
		return nil, false
	}
	var v []TableConstraint
	d := m.TableConstraints.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTableConstraints sets the value of the TableConstraints field in TableInfo.
func (m *TableInfo) SetTableConstraints(ctx context.Context, v []TableConstraint) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["table_constraints"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.TableConstraints = types.ListValueMust(t, vs)
}

// GetViewDependencies returns the value of the ViewDependencies field in TableInfo as
// a DependencyList value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableInfo) GetViewDependencies(ctx context.Context) (DependencyList, bool) {
	var e DependencyList
	if m.ViewDependencies.IsNull() || m.ViewDependencies.IsUnknown() {
		return e, false
	}
	var v DependencyList
	d := m.ViewDependencies.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetViewDependencies sets the value of the ViewDependencies field in TableInfo.
func (m *TableInfo) SetViewDependencies(ctx context.Context, v DependencyList) {
	vs := v.ToObjectValue(ctx)
	m.ViewDependencies = vs
}

type TableRowFilter struct {
	// The full name of the row filter SQL UDF.
	FunctionName types.String `tfsdk:"function_name"`
	// The list of table columns to be passed as input to the row filter
	// function. The column types should match the types of the filter function
	// arguments.
	InputColumnNames types.List `tfsdk:"input_column_names"`
}

func (to *TableRowFilter) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TableRowFilter) {
}

func (to *TableRowFilter) SyncFieldsDuringRead(ctx context.Context, from TableRowFilter) {
}

func (m TableRowFilter) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["function_name"] = attrs["function_name"].SetRequired()
	attrs["input_column_names"] = attrs["input_column_names"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TableRowFilter.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TableRowFilter) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"input_column_names": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TableRowFilter
// only implements ToObjectValue() and Type().
func (m TableRowFilter) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"function_name":      m.FunctionName,
			"input_column_names": m.InputColumnNames,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TableRowFilter) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"function_name": types.StringType,
			"input_column_names": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetInputColumnNames returns the value of the InputColumnNames field in TableRowFilter as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *TableRowFilter) GetInputColumnNames(ctx context.Context) ([]types.String, bool) {
	if m.InputColumnNames.IsNull() || m.InputColumnNames.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.InputColumnNames.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInputColumnNames sets the value of the InputColumnNames field in TableRowFilter.
func (m *TableRowFilter) SetInputColumnNames(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["input_column_names"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.InputColumnNames = types.ListValueMust(t, vs)
}

type TableSummary struct {
	// The full name of the table.
	FullName types.String `tfsdk:"full_name"`
	// SecurableKindManifest of table, including capabilities the table has.
	SecurableKindManifest types.Object `tfsdk:"securable_kind_manifest"`

	TableType types.String `tfsdk:"table_type"`
}

func (to *TableSummary) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TableSummary) {
	if !from.SecurableKindManifest.IsNull() && !from.SecurableKindManifest.IsUnknown() {
		if toSecurableKindManifest, ok := to.GetSecurableKindManifest(ctx); ok {
			if fromSecurableKindManifest, ok := from.GetSecurableKindManifest(ctx); ok {
				// Recursively sync the fields of SecurableKindManifest
				toSecurableKindManifest.SyncFieldsDuringCreateOrUpdate(ctx, fromSecurableKindManifest)
				to.SetSecurableKindManifest(ctx, toSecurableKindManifest)
			}
		}
	}
}

func (to *TableSummary) SyncFieldsDuringRead(ctx context.Context, from TableSummary) {
	if !from.SecurableKindManifest.IsNull() && !from.SecurableKindManifest.IsUnknown() {
		if toSecurableKindManifest, ok := to.GetSecurableKindManifest(ctx); ok {
			if fromSecurableKindManifest, ok := from.GetSecurableKindManifest(ctx); ok {
				toSecurableKindManifest.SyncFieldsDuringRead(ctx, fromSecurableKindManifest)
				to.SetSecurableKindManifest(ctx, toSecurableKindManifest)
			}
		}
	}
}

func (m TableSummary) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["full_name"] = attrs["full_name"].SetOptional()
	attrs["securable_kind_manifest"] = attrs["securable_kind_manifest"].SetOptional()
	attrs["table_type"] = attrs["table_type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TableSummary.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TableSummary) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"securable_kind_manifest": reflect.TypeOf(SecurableKindManifest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TableSummary
// only implements ToObjectValue() and Type().
func (m TableSummary) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name":               m.FullName,
			"securable_kind_manifest": m.SecurableKindManifest,
			"table_type":              m.TableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TableSummary) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name":               types.StringType,
			"securable_kind_manifest": SecurableKindManifest{}.Type(ctx),
			"table_type":              types.StringType,
		},
	}
}

// GetSecurableKindManifest returns the value of the SecurableKindManifest field in TableSummary as
// a SecurableKindManifest value.
// If the field is unknown or null, the boolean return value is false.
func (m *TableSummary) GetSecurableKindManifest(ctx context.Context) (SecurableKindManifest, bool) {
	var e SecurableKindManifest
	if m.SecurableKindManifest.IsNull() || m.SecurableKindManifest.IsUnknown() {
		return e, false
	}
	var v SecurableKindManifest
	d := m.SecurableKindManifest.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSecurableKindManifest sets the value of the SecurableKindManifest field in TableSummary.
func (m *TableSummary) SetSecurableKindManifest(ctx context.Context, v SecurableKindManifest) {
	vs := v.ToObjectValue(ctx)
	m.SecurableKindManifest = vs
}

type TagKeyValue struct {
	// name of the tag
	Key types.String `tfsdk:"key"`
	// value of the tag associated with the key, could be optional
	Value types.String `tfsdk:"value"`
}

func (to *TagKeyValue) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TagKeyValue) {
}

func (to *TagKeyValue) SyncFieldsDuringRead(ctx context.Context, from TagKeyValue) {
}

func (m TagKeyValue) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["key"] = attrs["key"].SetOptional()
	attrs["value"] = attrs["value"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TagKeyValue.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TagKeyValue) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TagKeyValue
// only implements ToObjectValue() and Type().
func (m TagKeyValue) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"key":   m.Key,
			"value": m.Value,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TagKeyValue) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"key":   types.StringType,
			"value": types.StringType,
		},
	}
}

type TemporaryCredentials struct {
	AwsTempCredentials types.Object `tfsdk:"aws_temp_credentials"`

	AzureAad types.Object `tfsdk:"azure_aad"`
	// Server time when the credential will expire, in epoch milliseconds. The
	// API client is advised to cache the credential given this expiration time.
	ExpirationTime types.Int64 `tfsdk:"expiration_time"`

	GcpOauthToken types.Object `tfsdk:"gcp_oauth_token"`
}

func (to *TemporaryCredentials) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TemporaryCredentials) {
	if !from.AwsTempCredentials.IsNull() && !from.AwsTempCredentials.IsUnknown() {
		if toAwsTempCredentials, ok := to.GetAwsTempCredentials(ctx); ok {
			if fromAwsTempCredentials, ok := from.GetAwsTempCredentials(ctx); ok {
				// Recursively sync the fields of AwsTempCredentials
				toAwsTempCredentials.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsTempCredentials)
				to.SetAwsTempCredentials(ctx, toAwsTempCredentials)
			}
		}
	}
	if !from.AzureAad.IsNull() && !from.AzureAad.IsUnknown() {
		if toAzureAad, ok := to.GetAzureAad(ctx); ok {
			if fromAzureAad, ok := from.GetAzureAad(ctx); ok {
				// Recursively sync the fields of AzureAad
				toAzureAad.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureAad)
				to.SetAzureAad(ctx, toAzureAad)
			}
		}
	}
	if !from.GcpOauthToken.IsNull() && !from.GcpOauthToken.IsUnknown() {
		if toGcpOauthToken, ok := to.GetGcpOauthToken(ctx); ok {
			if fromGcpOauthToken, ok := from.GetGcpOauthToken(ctx); ok {
				// Recursively sync the fields of GcpOauthToken
				toGcpOauthToken.SyncFieldsDuringCreateOrUpdate(ctx, fromGcpOauthToken)
				to.SetGcpOauthToken(ctx, toGcpOauthToken)
			}
		}
	}
}

func (to *TemporaryCredentials) SyncFieldsDuringRead(ctx context.Context, from TemporaryCredentials) {
	if !from.AwsTempCredentials.IsNull() && !from.AwsTempCredentials.IsUnknown() {
		if toAwsTempCredentials, ok := to.GetAwsTempCredentials(ctx); ok {
			if fromAwsTempCredentials, ok := from.GetAwsTempCredentials(ctx); ok {
				toAwsTempCredentials.SyncFieldsDuringRead(ctx, fromAwsTempCredentials)
				to.SetAwsTempCredentials(ctx, toAwsTempCredentials)
			}
		}
	}
	if !from.AzureAad.IsNull() && !from.AzureAad.IsUnknown() {
		if toAzureAad, ok := to.GetAzureAad(ctx); ok {
			if fromAzureAad, ok := from.GetAzureAad(ctx); ok {
				toAzureAad.SyncFieldsDuringRead(ctx, fromAzureAad)
				to.SetAzureAad(ctx, toAzureAad)
			}
		}
	}
	if !from.GcpOauthToken.IsNull() && !from.GcpOauthToken.IsUnknown() {
		if toGcpOauthToken, ok := to.GetGcpOauthToken(ctx); ok {
			if fromGcpOauthToken, ok := from.GetGcpOauthToken(ctx); ok {
				toGcpOauthToken.SyncFieldsDuringRead(ctx, fromGcpOauthToken)
				to.SetGcpOauthToken(ctx, toGcpOauthToken)
			}
		}
	}
}

func (m TemporaryCredentials) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_temp_credentials"] = attrs["aws_temp_credentials"].SetOptional()
	attrs["azure_aad"] = attrs["azure_aad"].SetOptional()
	attrs["expiration_time"] = attrs["expiration_time"].SetOptional()
	attrs["gcp_oauth_token"] = attrs["gcp_oauth_token"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TemporaryCredentials.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TemporaryCredentials) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_temp_credentials": reflect.TypeOf(AwsCredentials{}),
		"azure_aad":            reflect.TypeOf(AzureActiveDirectoryToken{}),
		"gcp_oauth_token":      reflect.TypeOf(GcpOauthToken{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TemporaryCredentials
// only implements ToObjectValue() and Type().
func (m TemporaryCredentials) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_temp_credentials": m.AwsTempCredentials,
			"azure_aad":            m.AzureAad,
			"expiration_time":      m.ExpirationTime,
			"gcp_oauth_token":      m.GcpOauthToken,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TemporaryCredentials) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_temp_credentials": AwsCredentials{}.Type(ctx),
			"azure_aad":            AzureActiveDirectoryToken{}.Type(ctx),
			"expiration_time":      types.Int64Type,
			"gcp_oauth_token":      GcpOauthToken{}.Type(ctx),
		},
	}
}

// GetAwsTempCredentials returns the value of the AwsTempCredentials field in TemporaryCredentials as
// a AwsCredentials value.
// If the field is unknown or null, the boolean return value is false.
func (m *TemporaryCredentials) GetAwsTempCredentials(ctx context.Context) (AwsCredentials, bool) {
	var e AwsCredentials
	if m.AwsTempCredentials.IsNull() || m.AwsTempCredentials.IsUnknown() {
		return e, false
	}
	var v AwsCredentials
	d := m.AwsTempCredentials.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsTempCredentials sets the value of the AwsTempCredentials field in TemporaryCredentials.
func (m *TemporaryCredentials) SetAwsTempCredentials(ctx context.Context, v AwsCredentials) {
	vs := v.ToObjectValue(ctx)
	m.AwsTempCredentials = vs
}

// GetAzureAad returns the value of the AzureAad field in TemporaryCredentials as
// a AzureActiveDirectoryToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *TemporaryCredentials) GetAzureAad(ctx context.Context) (AzureActiveDirectoryToken, bool) {
	var e AzureActiveDirectoryToken
	if m.AzureAad.IsNull() || m.AzureAad.IsUnknown() {
		return e, false
	}
	var v AzureActiveDirectoryToken
	d := m.AzureAad.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureAad sets the value of the AzureAad field in TemporaryCredentials.
func (m *TemporaryCredentials) SetAzureAad(ctx context.Context, v AzureActiveDirectoryToken) {
	vs := v.ToObjectValue(ctx)
	m.AzureAad = vs
}

// GetGcpOauthToken returns the value of the GcpOauthToken field in TemporaryCredentials as
// a GcpOauthToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *TemporaryCredentials) GetGcpOauthToken(ctx context.Context) (GcpOauthToken, bool) {
	var e GcpOauthToken
	if m.GcpOauthToken.IsNull() || m.GcpOauthToken.IsUnknown() {
		return e, false
	}
	var v GcpOauthToken
	d := m.GcpOauthToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetGcpOauthToken sets the value of the GcpOauthToken field in TemporaryCredentials.
func (m *TemporaryCredentials) SetGcpOauthToken(ctx context.Context, v GcpOauthToken) {
	vs := v.ToObjectValue(ctx)
	m.GcpOauthToken = vs
}

// Detailed status of an online table. Shown if the online table is in the
// ONLINE_TRIGGERED_UPDATE or the ONLINE_NO_PENDING_UPDATE state.
type TriggeredUpdateStatus struct {
	// The last source table Delta version that was synced to the online table.
	// Note that this Delta version may not be completely synced to the online
	// table yet.
	LastProcessedCommitVersion types.Int64 `tfsdk:"last_processed_commit_version"`
	// The timestamp of the last time any data was synchronized from the source
	// table to the online table.
	Timestamp types.String `tfsdk:"timestamp"`
	// Progress of the active data synchronization pipeline.
	TriggeredUpdateProgress types.Object `tfsdk:"triggered_update_progress"`
}

func (to *TriggeredUpdateStatus) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from TriggeredUpdateStatus) {
	if !from.TriggeredUpdateProgress.IsNull() && !from.TriggeredUpdateProgress.IsUnknown() {
		if toTriggeredUpdateProgress, ok := to.GetTriggeredUpdateProgress(ctx); ok {
			if fromTriggeredUpdateProgress, ok := from.GetTriggeredUpdateProgress(ctx); ok {
				// Recursively sync the fields of TriggeredUpdateProgress
				toTriggeredUpdateProgress.SyncFieldsDuringCreateOrUpdate(ctx, fromTriggeredUpdateProgress)
				to.SetTriggeredUpdateProgress(ctx, toTriggeredUpdateProgress)
			}
		}
	}
}

func (to *TriggeredUpdateStatus) SyncFieldsDuringRead(ctx context.Context, from TriggeredUpdateStatus) {
	if !from.TriggeredUpdateProgress.IsNull() && !from.TriggeredUpdateProgress.IsUnknown() {
		if toTriggeredUpdateProgress, ok := to.GetTriggeredUpdateProgress(ctx); ok {
			if fromTriggeredUpdateProgress, ok := from.GetTriggeredUpdateProgress(ctx); ok {
				toTriggeredUpdateProgress.SyncFieldsDuringRead(ctx, fromTriggeredUpdateProgress)
				to.SetTriggeredUpdateProgress(ctx, toTriggeredUpdateProgress)
			}
		}
	}
}

func (m TriggeredUpdateStatus) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["last_processed_commit_version"] = attrs["last_processed_commit_version"].SetOptional()
	attrs["timestamp"] = attrs["timestamp"].SetOptional()
	attrs["triggered_update_progress"] = attrs["triggered_update_progress"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in TriggeredUpdateStatus.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m TriggeredUpdateStatus) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"triggered_update_progress": reflect.TypeOf(PipelineProgress{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, TriggeredUpdateStatus
// only implements ToObjectValue() and Type().
func (m TriggeredUpdateStatus) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"last_processed_commit_version": m.LastProcessedCommitVersion,
			"timestamp":                     m.Timestamp,
			"triggered_update_progress":     m.TriggeredUpdateProgress,
		})
}

// Type implements basetypes.ObjectValuable.
func (m TriggeredUpdateStatus) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"last_processed_commit_version": types.Int64Type,
			"timestamp":                     types.StringType,
			"triggered_update_progress":     PipelineProgress{}.Type(ctx),
		},
	}
}

// GetTriggeredUpdateProgress returns the value of the TriggeredUpdateProgress field in TriggeredUpdateStatus as
// a PipelineProgress value.
// If the field is unknown or null, the boolean return value is false.
func (m *TriggeredUpdateStatus) GetTriggeredUpdateProgress(ctx context.Context) (PipelineProgress, bool) {
	var e PipelineProgress
	if m.TriggeredUpdateProgress.IsNull() || m.TriggeredUpdateProgress.IsUnknown() {
		return e, false
	}
	var v PipelineProgress
	d := m.TriggeredUpdateProgress.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTriggeredUpdateProgress sets the value of the TriggeredUpdateProgress field in TriggeredUpdateStatus.
func (m *TriggeredUpdateStatus) SetTriggeredUpdateProgress(ctx context.Context, v PipelineProgress) {
	vs := v.ToObjectValue(ctx)
	m.TriggeredUpdateProgress = vs
}

type UnassignRequest struct {
	// Query for the ID of the metastore to delete.
	MetastoreId types.String `tfsdk:"-"`
	// A workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *UnassignRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UnassignRequest) {
}

func (to *UnassignRequest) SyncFieldsDuringRead(ctx context.Context, from UnassignRequest) {
}

func (m UnassignRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()
	attrs["metastore_id"] = attrs["metastore_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UnassignRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UnassignRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UnassignRequest
// only implements ToObjectValue() and Type().
func (m UnassignRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"metastore_id": m.MetastoreId,
			"workspace_id": m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UnassignRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"metastore_id": types.StringType,
			"workspace_id": types.Int64Type,
		},
	}
}

type UnassignResponse struct {
}

func (to *UnassignResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UnassignResponse) {
}

func (to *UnassignResponse) SyncFieldsDuringRead(ctx context.Context, from UnassignResponse) {
}

func (m UnassignResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UnassignResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UnassignResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UnassignResponse
// only implements ToObjectValue() and Type().
func (m UnassignResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m UnassignResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type UpdateAccessRequestDestinationsRequest struct {
	// The access request destinations to assign to the securable. For each
	// destination, a **destination_id** and **destination_type** must be
	// defined.
	AccessRequestDestinations types.Object `tfsdk:"access_request_destinations"`
	// The field mask must be a single string, with multiple fields separated by
	// commas (no spaces). The field path is relative to the resource object,
	// using a dot (`.`) to navigate sub-fields (e.g., `author.given_name`).
	// Specification of elements in sequence or map fields is not allowed, as
	// only the entire collection field can be specified. Field names must
	// exactly match the resource field names.
	//
	// A field mask of `*` indicates full replacement. It’s recommended to
	// always explicitly list the fields being updated and avoid using `*`
	// wildcards, as it can lead to unintended results if the API changes in the
	// future.
	UpdateMask types.String `tfsdk:"-"`
}

func (to *UpdateAccessRequestDestinationsRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateAccessRequestDestinationsRequest) {
	if !from.AccessRequestDestinations.IsNull() && !from.AccessRequestDestinations.IsUnknown() {
		if toAccessRequestDestinations, ok := to.GetAccessRequestDestinations(ctx); ok {
			if fromAccessRequestDestinations, ok := from.GetAccessRequestDestinations(ctx); ok {
				// Recursively sync the fields of AccessRequestDestinations
				toAccessRequestDestinations.SyncFieldsDuringCreateOrUpdate(ctx, fromAccessRequestDestinations)
				to.SetAccessRequestDestinations(ctx, toAccessRequestDestinations)
			}
		}
	}
}

func (to *UpdateAccessRequestDestinationsRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateAccessRequestDestinationsRequest) {
	if !from.AccessRequestDestinations.IsNull() && !from.AccessRequestDestinations.IsUnknown() {
		if toAccessRequestDestinations, ok := to.GetAccessRequestDestinations(ctx); ok {
			if fromAccessRequestDestinations, ok := from.GetAccessRequestDestinations(ctx); ok {
				toAccessRequestDestinations.SyncFieldsDuringRead(ctx, fromAccessRequestDestinations)
				to.SetAccessRequestDestinations(ctx, toAccessRequestDestinations)
			}
		}
	}
}

func (m UpdateAccessRequestDestinationsRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_request_destinations"] = attrs["access_request_destinations"].SetRequired()
	attrs["update_mask"] = attrs["update_mask"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateAccessRequestDestinationsRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateAccessRequestDestinationsRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"access_request_destinations": reflect.TypeOf(AccessRequestDestinations{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateAccessRequestDestinationsRequest
// only implements ToObjectValue() and Type().
func (m UpdateAccessRequestDestinationsRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_request_destinations": m.AccessRequestDestinations,
			"update_mask":                 m.UpdateMask,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateAccessRequestDestinationsRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_request_destinations": AccessRequestDestinations{}.Type(ctx),
			"update_mask":                 types.StringType,
		},
	}
}

// GetAccessRequestDestinations returns the value of the AccessRequestDestinations field in UpdateAccessRequestDestinationsRequest as
// a AccessRequestDestinations value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateAccessRequestDestinationsRequest) GetAccessRequestDestinations(ctx context.Context) (AccessRequestDestinations, bool) {
	var e AccessRequestDestinations
	if m.AccessRequestDestinations.IsNull() || m.AccessRequestDestinations.IsUnknown() {
		return e, false
	}
	var v AccessRequestDestinations
	d := m.AccessRequestDestinations.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAccessRequestDestinations sets the value of the AccessRequestDestinations field in UpdateAccessRequestDestinationsRequest.
func (m *UpdateAccessRequestDestinationsRequest) SetAccessRequestDestinations(ctx context.Context, v AccessRequestDestinations) {
	vs := v.ToObjectValue(ctx)
	m.AccessRequestDestinations = vs
}

type UpdateAccountsMetastore struct {
	// The organization name of a Delta Sharing entity, to be used in
	// Databricks-to-Databricks Delta Sharing as the official name.
	DeltaSharingOrganizationName types.String `tfsdk:"delta_sharing_organization_name"`
	// The lifetime of delta sharing recipient token in seconds.
	DeltaSharingRecipientTokenLifetimeInSeconds types.Int64 `tfsdk:"delta_sharing_recipient_token_lifetime_in_seconds"`
	// The scope of Delta Sharing enabled for the metastore.
	DeltaSharingScope types.String `tfsdk:"delta_sharing_scope"`
	// The owner of the metastore.
	Owner types.String `tfsdk:"owner"`
	// Privilege model version of the metastore, of the form `major.minor`
	// (e.g., `1.0`).
	PrivilegeModelVersion types.String `tfsdk:"privilege_model_version"`
	// UUID of storage credential to access the metastore storage_root.
	StorageRootCredentialId types.String `tfsdk:"storage_root_credential_id"`
}

func (to *UpdateAccountsMetastore) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateAccountsMetastore) {
}

func (to *UpdateAccountsMetastore) SyncFieldsDuringRead(ctx context.Context, from UpdateAccountsMetastore) {
}

func (m UpdateAccountsMetastore) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["delta_sharing_organization_name"] = attrs["delta_sharing_organization_name"].SetOptional()
	attrs["delta_sharing_recipient_token_lifetime_in_seconds"] = attrs["delta_sharing_recipient_token_lifetime_in_seconds"].SetOptional()
	attrs["delta_sharing_scope"] = attrs["delta_sharing_scope"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["privilege_model_version"] = attrs["privilege_model_version"].SetOptional()
	attrs["storage_root_credential_id"] = attrs["storage_root_credential_id"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateAccountsMetastore.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateAccountsMetastore) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateAccountsMetastore
// only implements ToObjectValue() and Type().
func (m UpdateAccountsMetastore) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"delta_sharing_organization_name":                   m.DeltaSharingOrganizationName,
			"delta_sharing_recipient_token_lifetime_in_seconds": m.DeltaSharingRecipientTokenLifetimeInSeconds,
			"delta_sharing_scope":                               m.DeltaSharingScope,
			"owner":                                             m.Owner,
			"privilege_model_version":                           m.PrivilegeModelVersion,
			"storage_root_credential_id":                        m.StorageRootCredentialId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateAccountsMetastore) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"delta_sharing_organization_name":                   types.StringType,
			"delta_sharing_recipient_token_lifetime_in_seconds": types.Int64Type,
			"delta_sharing_scope":                               types.StringType,
			"owner":                                             types.StringType,
			"privilege_model_version":                           types.StringType,
			"storage_root_credential_id":                        types.StringType,
		},
	}
}

type UpdateAccountsStorageCredential struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// The Cloudflare API token configuration.
	CloudflareApiToken types.Object `tfsdk:"cloudflare_api_token"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Username of current owner of credential.
	Owner types.String `tfsdk:"owner"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
}

func (to *UpdateAccountsStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateAccountsStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				// Recursively sync the fields of CloudflareApiToken
				toCloudflareApiToken.SyncFieldsDuringCreateOrUpdate(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *UpdateAccountsStorageCredential) SyncFieldsDuringRead(ctx context.Context, from UpdateAccountsStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				toCloudflareApiToken.SyncFieldsDuringRead(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m UpdateAccountsStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["cloudflare_api_token"] = attrs["cloudflare_api_token"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateAccountsStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateAccountsStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRoleRequest{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentityResponse{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"cloudflare_api_token":           reflect.TypeOf(CloudflareApiToken{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccountRequest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateAccountsStorageCredential
// only implements ToObjectValue() and Type().
func (m UpdateAccountsStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"cloudflare_api_token":           m.CloudflareApiToken,
			"comment":                        m.Comment,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"isolation_mode":                 m.IsolationMode,
			"owner":                          m.Owner,
			"read_only":                      m.ReadOnly,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateAccountsStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRoleRequest{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentityResponse{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"cloudflare_api_token":           CloudflareApiToken{}.Type(ctx),
			"comment":                        types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccountRequest{}.Type(ctx),
			"isolation_mode":                 types.StringType,
			"owner":                          types.StringType,
			"read_only":                      types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in UpdateAccountsStorageCredential as
// a AwsIamRoleRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateAccountsStorageCredential) GetAwsIamRole(ctx context.Context) (AwsIamRoleRequest, bool) {
	var e AwsIamRoleRequest
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRoleRequest
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in UpdateAccountsStorageCredential.
func (m *UpdateAccountsStorageCredential) SetAwsIamRole(ctx context.Context, v AwsIamRoleRequest) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in UpdateAccountsStorageCredential as
// a AzureManagedIdentityResponse value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateAccountsStorageCredential) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentityResponse, bool) {
	var e AzureManagedIdentityResponse
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentityResponse
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in UpdateAccountsStorageCredential.
func (m *UpdateAccountsStorageCredential) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentityResponse) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in UpdateAccountsStorageCredential as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateAccountsStorageCredential) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in UpdateAccountsStorageCredential.
func (m *UpdateAccountsStorageCredential) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetCloudflareApiToken returns the value of the CloudflareApiToken field in UpdateAccountsStorageCredential as
// a CloudflareApiToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateAccountsStorageCredential) GetCloudflareApiToken(ctx context.Context) (CloudflareApiToken, bool) {
	var e CloudflareApiToken
	if m.CloudflareApiToken.IsNull() || m.CloudflareApiToken.IsUnknown() {
		return e, false
	}
	var v CloudflareApiToken
	d := m.CloudflareApiToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCloudflareApiToken sets the value of the CloudflareApiToken field in UpdateAccountsStorageCredential.
func (m *UpdateAccountsStorageCredential) SetCloudflareApiToken(ctx context.Context, v CloudflareApiToken) {
	vs := v.ToObjectValue(ctx)
	m.CloudflareApiToken = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in UpdateAccountsStorageCredential as
// a DatabricksGcpServiceAccountRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateAccountsStorageCredential) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccountRequest, bool) {
	var e DatabricksGcpServiceAccountRequest
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccountRequest
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in UpdateAccountsStorageCredential.
func (m *UpdateAccountsStorageCredential) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccountRequest) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type UpdateAssignmentResponse struct {
}

func (to *UpdateAssignmentResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateAssignmentResponse) {
}

func (to *UpdateAssignmentResponse) SyncFieldsDuringRead(ctx context.Context, from UpdateAssignmentResponse) {
}

func (m UpdateAssignmentResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateAssignmentResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateAssignmentResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateAssignmentResponse
// only implements ToObjectValue() and Type().
func (m UpdateAssignmentResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateAssignmentResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type UpdateCatalog struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Whether predictive optimization should be enabled for this object and
	// objects under it.
	EnablePredictiveOptimization types.String `tfsdk:"enable_predictive_optimization"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// The name of the catalog.
	Name types.String `tfsdk:"-"`
	// New name for the catalog.
	NewName types.String `tfsdk:"new_name"`
	// A map of key-value properties attached to the securable.
	Options types.Map `tfsdk:"options"`
	// Username of current owner of catalog.
	Owner types.String `tfsdk:"owner"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
}

func (to *UpdateCatalog) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateCatalog) {
}

func (to *UpdateCatalog) SyncFieldsDuringRead(ctx context.Context, from UpdateCatalog) {
}

func (m UpdateCatalog) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["enable_predictive_optimization"] = attrs["enable_predictive_optimization"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["options"] = attrs["options"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateCatalog.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateCatalog) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"options":    reflect.TypeOf(types.String{}),
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateCatalog
// only implements ToObjectValue() and Type().
func (m UpdateCatalog) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":                        m.Comment,
			"enable_predictive_optimization": m.EnablePredictiveOptimization,
			"isolation_mode":                 m.IsolationMode,
			"name":                           m.Name,
			"new_name":                       m.NewName,
			"options":                        m.Options,
			"owner":                          m.Owner,
			"properties":                     m.Properties,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateCatalog) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":                        types.StringType,
			"enable_predictive_optimization": types.StringType,
			"isolation_mode":                 types.StringType,
			"name":                           types.StringType,
			"new_name":                       types.StringType,
			"options": basetypes.MapType{
				ElemType: types.StringType,
			},
			"owner": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetOptions returns the value of the Options field in UpdateCatalog as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCatalog) GetOptions(ctx context.Context) (map[string]types.String, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in UpdateCatalog.
func (m *UpdateCatalog) SetOptions(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.MapValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in UpdateCatalog as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCatalog) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in UpdateCatalog.
func (m *UpdateCatalog) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

type UpdateCatalogWorkspaceBindingsResponse struct {
	// A list of workspace IDs
	Workspaces types.List `tfsdk:"workspaces"`
}

func (to *UpdateCatalogWorkspaceBindingsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateCatalogWorkspaceBindingsResponse) {
	if !from.Workspaces.IsNull() && !from.Workspaces.IsUnknown() && to.Workspaces.IsNull() && len(from.Workspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Workspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Workspaces = from.Workspaces
	}
}

func (to *UpdateCatalogWorkspaceBindingsResponse) SyncFieldsDuringRead(ctx context.Context, from UpdateCatalogWorkspaceBindingsResponse) {
	if !from.Workspaces.IsNull() && !from.Workspaces.IsUnknown() && to.Workspaces.IsNull() && len(from.Workspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Workspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Workspaces = from.Workspaces
	}
}

func (m UpdateCatalogWorkspaceBindingsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["workspaces"] = attrs["workspaces"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateCatalogWorkspaceBindingsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateCatalogWorkspaceBindingsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"workspaces": reflect.TypeOf(types.Int64{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateCatalogWorkspaceBindingsResponse
// only implements ToObjectValue() and Type().
func (m UpdateCatalogWorkspaceBindingsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"workspaces": m.Workspaces,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateCatalogWorkspaceBindingsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"workspaces": basetypes.ListType{
				ElemType: types.Int64Type,
			},
		},
	}
}

// GetWorkspaces returns the value of the Workspaces field in UpdateCatalogWorkspaceBindingsResponse as
// a slice of types.Int64 values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCatalogWorkspaceBindingsResponse) GetWorkspaces(ctx context.Context) ([]types.Int64, bool) {
	if m.Workspaces.IsNull() || m.Workspaces.IsUnknown() {
		return nil, false
	}
	var v []types.Int64
	d := m.Workspaces.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetWorkspaces sets the value of the Workspaces field in UpdateCatalogWorkspaceBindingsResponse.
func (m *UpdateCatalogWorkspaceBindingsResponse) SetWorkspaces(ctx context.Context, v []types.Int64) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["workspaces"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Workspaces = types.ListValueMust(t, vs)
}

type UpdateConnection struct {
	// Name of the connection.
	Name types.String `tfsdk:"-"`
	// New name for the connection.
	NewName types.String `tfsdk:"new_name"`
	// A map of key-value properties attached to the securable.
	Options types.Map `tfsdk:"options"`
	// Username of current owner of the connection.
	Owner types.String `tfsdk:"owner"`
}

func (to *UpdateConnection) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateConnection) {
}

func (to *UpdateConnection) SyncFieldsDuringRead(ctx context.Context, from UpdateConnection) {
}

func (m UpdateConnection) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["options"] = attrs["options"].SetRequired()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateConnection.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateConnection) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"options": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateConnection
// only implements ToObjectValue() and Type().
func (m UpdateConnection) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":     m.Name,
			"new_name": m.NewName,
			"options":  m.Options,
			"owner":    m.Owner,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateConnection) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":     types.StringType,
			"new_name": types.StringType,
			"options": basetypes.MapType{
				ElemType: types.StringType,
			},
			"owner": types.StringType,
		},
	}
}

// GetOptions returns the value of the Options field in UpdateConnection as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateConnection) GetOptions(ctx context.Context) (map[string]types.String, bool) {
	if m.Options.IsNull() || m.Options.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Options.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetOptions sets the value of the Options field in UpdateConnection.
func (m *UpdateConnection) SetOptions(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["options"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Options = types.MapValueMust(t, vs)
}

type UpdateCredentialRequest struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// Force an update even if there are dependent services (when purpose is
	// **SERVICE**) or dependent external locations and external tables (when
	// purpose is **STORAGE**).
	Force types.Bool `tfsdk:"force"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Name of the credential.
	NameArg types.String `tfsdk:"-"`
	// New name of credential.
	NewName types.String `tfsdk:"new_name"`
	// Username of current owner of credential.
	Owner types.String `tfsdk:"owner"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Supply true to this argument to skip validation of the updated
	// credential.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
}

func (to *UpdateCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateCredentialRequest) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *UpdateCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateCredentialRequest) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m UpdateCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["force"] = attrs["force"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()
	attrs["name_arg"] = attrs["name_arg"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRole{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentity{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccount{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateCredentialRequest
// only implements ToObjectValue() and Type().
func (m UpdateCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"comment":                        m.Comment,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"force":                          m.Force,
			"isolation_mode":                 m.IsolationMode,
			"name_arg":                       m.NameArg,
			"new_name":                       m.NewName,
			"owner":                          m.Owner,
			"read_only":                      m.ReadOnly,
			"skip_validation":                m.SkipValidation,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRole{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentity{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"comment":                        types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccount{}.Type(ctx),
			"force":                          types.BoolType,
			"isolation_mode":                 types.StringType,
			"name_arg":                       types.StringType,
			"new_name":                       types.StringType,
			"owner":                          types.StringType,
			"read_only":                      types.BoolType,
			"skip_validation":                types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in UpdateCredentialRequest as
// a AwsIamRole value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCredentialRequest) GetAwsIamRole(ctx context.Context) (AwsIamRole, bool) {
	var e AwsIamRole
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRole
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in UpdateCredentialRequest.
func (m *UpdateCredentialRequest) SetAwsIamRole(ctx context.Context, v AwsIamRole) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in UpdateCredentialRequest as
// a AzureManagedIdentity value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCredentialRequest) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentity, bool) {
	var e AzureManagedIdentity
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentity
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in UpdateCredentialRequest.
func (m *UpdateCredentialRequest) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentity) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in UpdateCredentialRequest as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCredentialRequest) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in UpdateCredentialRequest.
func (m *UpdateCredentialRequest) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in UpdateCredentialRequest as
// a DatabricksGcpServiceAccount value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateCredentialRequest) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccount, bool) {
	var e DatabricksGcpServiceAccount
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccount
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in UpdateCredentialRequest.
func (m *UpdateCredentialRequest) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccount) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type UpdateEntityTagAssignmentRequest struct {
	// The fully qualified name of the entity to which the tag is assigned
	EntityName types.String `tfsdk:"-"`
	// The type of the entity to which the tag is assigned. Allowed values are:
	// catalogs, schemas, tables, columns, volumes.
	EntityType types.String `tfsdk:"-"`

	TagAssignment types.Object `tfsdk:"tag_assignment"`
	// The key of the tag
	TagKey types.String `tfsdk:"-"`
	// The field mask must be a single string, with multiple fields separated by
	// commas (no spaces). The field path is relative to the resource object,
	// using a dot (`.`) to navigate sub-fields (e.g., `author.given_name`).
	// Specification of elements in sequence or map fields is not allowed, as
	// only the entire collection field can be specified. Field names must
	// exactly match the resource field names.
	//
	// A field mask of `*` indicates full replacement. It’s recommended to
	// always explicitly list the fields being updated and avoid using `*`
	// wildcards, as it can lead to unintended results if the API changes in the
	// future.
	UpdateMask types.String `tfsdk:"-"`
}

func (to *UpdateEntityTagAssignmentRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateEntityTagAssignmentRequest) {
	if !from.TagAssignment.IsNull() && !from.TagAssignment.IsUnknown() {
		if toTagAssignment, ok := to.GetTagAssignment(ctx); ok {
			if fromTagAssignment, ok := from.GetTagAssignment(ctx); ok {
				// Recursively sync the fields of TagAssignment
				toTagAssignment.SyncFieldsDuringCreateOrUpdate(ctx, fromTagAssignment)
				to.SetTagAssignment(ctx, toTagAssignment)
			}
		}
	}
}

func (to *UpdateEntityTagAssignmentRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateEntityTagAssignmentRequest) {
	if !from.TagAssignment.IsNull() && !from.TagAssignment.IsUnknown() {
		if toTagAssignment, ok := to.GetTagAssignment(ctx); ok {
			if fromTagAssignment, ok := from.GetTagAssignment(ctx); ok {
				toTagAssignment.SyncFieldsDuringRead(ctx, fromTagAssignment)
				to.SetTagAssignment(ctx, toTagAssignment)
			}
		}
	}
}

func (m UpdateEntityTagAssignmentRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["tag_assignment"] = attrs["tag_assignment"].SetRequired()
	attrs["entity_type"] = attrs["entity_type"].SetRequired()
	attrs["entity_type"] = attrs["entity_type"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["entity_name"] = attrs["entity_name"].SetRequired()
	attrs["entity_name"] = attrs["entity_name"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["tag_key"] = attrs["tag_key"].SetRequired()
	attrs["tag_key"] = attrs["tag_key"].(tfschema.StringAttributeBuilder).AddPlanModifier(stringplanmodifier.RequiresReplace()).(tfschema.AttributeBuilder)
	attrs["update_mask"] = attrs["update_mask"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateEntityTagAssignmentRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateEntityTagAssignmentRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"tag_assignment": reflect.TypeOf(EntityTagAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateEntityTagAssignmentRequest
// only implements ToObjectValue() and Type().
func (m UpdateEntityTagAssignmentRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"entity_name":    m.EntityName,
			"entity_type":    m.EntityType,
			"tag_assignment": m.TagAssignment,
			"tag_key":        m.TagKey,
			"update_mask":    m.UpdateMask,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateEntityTagAssignmentRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"entity_name":    types.StringType,
			"entity_type":    types.StringType,
			"tag_assignment": EntityTagAssignment{}.Type(ctx),
			"tag_key":        types.StringType,
			"update_mask":    types.StringType,
		},
	}
}

// GetTagAssignment returns the value of the TagAssignment field in UpdateEntityTagAssignmentRequest as
// a EntityTagAssignment value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateEntityTagAssignmentRequest) GetTagAssignment(ctx context.Context) (EntityTagAssignment, bool) {
	var e EntityTagAssignment
	if m.TagAssignment.IsNull() || m.TagAssignment.IsUnknown() {
		return e, false
	}
	var v EntityTagAssignment
	d := m.TagAssignment.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTagAssignment sets the value of the TagAssignment field in UpdateEntityTagAssignmentRequest.
func (m *UpdateEntityTagAssignmentRequest) SetTagAssignment(ctx context.Context, v EntityTagAssignment) {
	vs := v.ToObjectValue(ctx)
	m.TagAssignment = vs
}

type UpdateExternalLineageRelationshipRequest struct {
	ExternalLineageRelationship types.Object `tfsdk:"external_lineage_relationship"`
	// The field mask must be a single string, with multiple fields separated by
	// commas (no spaces). The field path is relative to the resource object,
	// using a dot (`.`) to navigate sub-fields (e.g., `author.given_name`).
	// Specification of elements in sequence or map fields is not allowed, as
	// only the entire collection field can be specified. Field names must
	// exactly match the resource field names.
	//
	// A field mask of `*` indicates full replacement. It’s recommended to
	// always explicitly list the fields being updated and avoid using `*`
	// wildcards, as it can lead to unintended results if the API changes in the
	// future.
	UpdateMask types.String `tfsdk:"-"`
}

func (to *UpdateExternalLineageRelationshipRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateExternalLineageRelationshipRequest) {
	if !from.ExternalLineageRelationship.IsNull() && !from.ExternalLineageRelationship.IsUnknown() {
		if toExternalLineageRelationship, ok := to.GetExternalLineageRelationship(ctx); ok {
			if fromExternalLineageRelationship, ok := from.GetExternalLineageRelationship(ctx); ok {
				// Recursively sync the fields of ExternalLineageRelationship
				toExternalLineageRelationship.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalLineageRelationship)
				to.SetExternalLineageRelationship(ctx, toExternalLineageRelationship)
			}
		}
	}
}

func (to *UpdateExternalLineageRelationshipRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateExternalLineageRelationshipRequest) {
	if !from.ExternalLineageRelationship.IsNull() && !from.ExternalLineageRelationship.IsUnknown() {
		if toExternalLineageRelationship, ok := to.GetExternalLineageRelationship(ctx); ok {
			if fromExternalLineageRelationship, ok := from.GetExternalLineageRelationship(ctx); ok {
				toExternalLineageRelationship.SyncFieldsDuringRead(ctx, fromExternalLineageRelationship)
				to.SetExternalLineageRelationship(ctx, toExternalLineageRelationship)
			}
		}
	}
}

func (m UpdateExternalLineageRelationshipRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_lineage_relationship"] = attrs["external_lineage_relationship"].SetRequired()
	attrs["update_mask"] = attrs["update_mask"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateExternalLineageRelationshipRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateExternalLineageRelationshipRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_lineage_relationship": reflect.TypeOf(UpdateRequestExternalLineage{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateExternalLineageRelationshipRequest
// only implements ToObjectValue() and Type().
func (m UpdateExternalLineageRelationshipRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_lineage_relationship": m.ExternalLineageRelationship,
			"update_mask":                   m.UpdateMask,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateExternalLineageRelationshipRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_lineage_relationship": UpdateRequestExternalLineage{}.Type(ctx),
			"update_mask":                   types.StringType,
		},
	}
}

// GetExternalLineageRelationship returns the value of the ExternalLineageRelationship field in UpdateExternalLineageRelationshipRequest as
// a UpdateRequestExternalLineage value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateExternalLineageRelationshipRequest) GetExternalLineageRelationship(ctx context.Context) (UpdateRequestExternalLineage, bool) {
	var e UpdateRequestExternalLineage
	if m.ExternalLineageRelationship.IsNull() || m.ExternalLineageRelationship.IsUnknown() {
		return e, false
	}
	var v UpdateRequestExternalLineage
	d := m.ExternalLineageRelationship.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalLineageRelationship sets the value of the ExternalLineageRelationship field in UpdateExternalLineageRelationshipRequest.
func (m *UpdateExternalLineageRelationshipRequest) SetExternalLineageRelationship(ctx context.Context, v UpdateRequestExternalLineage) {
	vs := v.ToObjectValue(ctx)
	m.ExternalLineageRelationship = vs
}

type UpdateExternalLocation struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Name of the storage credential used with this location.
	CredentialName types.String `tfsdk:"credential_name"`
	// Whether to enable file events on this external location.
	EnableFileEvents types.Bool `tfsdk:"enable_file_events"`

	EncryptionDetails types.Object `tfsdk:"encryption_details"`
	// Indicates whether fallback mode is enabled for this external location.
	// When fallback mode is enabled, the access to the location falls back to
	// cluster credentials if UC credentials are not sufficient.
	Fallback types.Bool `tfsdk:"fallback"`
	// File event queue settings. If `enable_file_events` is `true`, must be
	// defined and have exactly one of the documented properties.
	FileEventQueue types.Object `tfsdk:"file_event_queue"`
	// Force update even if changing url invalidates dependent external tables
	// or mounts.
	Force types.Bool `tfsdk:"force"`

	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Name of the external location.
	Name types.String `tfsdk:"-"`
	// New name for the external location.
	NewName types.String `tfsdk:"new_name"`
	// The owner of the external location.
	Owner types.String `tfsdk:"owner"`
	// Indicates whether the external location is read-only.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Skips validation of the storage credential associated with the external
	// location.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
	// Path URL of the external location.
	Url types.String `tfsdk:"url"`
}

func (to *UpdateExternalLocation) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateExternalLocation) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				// Recursively sync the fields of EncryptionDetails
				toEncryptionDetails.SyncFieldsDuringCreateOrUpdate(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.FileEventQueue.IsNull() && !from.FileEventQueue.IsUnknown() {
		if toFileEventQueue, ok := to.GetFileEventQueue(ctx); ok {
			if fromFileEventQueue, ok := from.GetFileEventQueue(ctx); ok {
				// Recursively sync the fields of FileEventQueue
				toFileEventQueue.SyncFieldsDuringCreateOrUpdate(ctx, fromFileEventQueue)
				to.SetFileEventQueue(ctx, toFileEventQueue)
			}
		}
	}
}

func (to *UpdateExternalLocation) SyncFieldsDuringRead(ctx context.Context, from UpdateExternalLocation) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				toEncryptionDetails.SyncFieldsDuringRead(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
	if !from.FileEventQueue.IsNull() && !from.FileEventQueue.IsUnknown() {
		if toFileEventQueue, ok := to.GetFileEventQueue(ctx); ok {
			if fromFileEventQueue, ok := from.GetFileEventQueue(ctx); ok {
				toFileEventQueue.SyncFieldsDuringRead(ctx, fromFileEventQueue)
				to.SetFileEventQueue(ctx, toFileEventQueue)
			}
		}
	}
}

func (m UpdateExternalLocation) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["credential_name"] = attrs["credential_name"].SetOptional()
	attrs["enable_file_events"] = attrs["enable_file_events"].SetOptional()
	attrs["encryption_details"] = attrs["encryption_details"].SetOptional()
	attrs["fallback"] = attrs["fallback"].SetOptional()
	attrs["file_event_queue"] = attrs["file_event_queue"].SetOptional()
	attrs["force"] = attrs["force"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateExternalLocation.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateExternalLocation) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"encryption_details": reflect.TypeOf(EncryptionDetails{}),
		"file_event_queue":   reflect.TypeOf(FileEventQueue{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateExternalLocation
// only implements ToObjectValue() and Type().
func (m UpdateExternalLocation) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":            m.Comment,
			"credential_name":    m.CredentialName,
			"enable_file_events": m.EnableFileEvents,
			"encryption_details": m.EncryptionDetails,
			"fallback":           m.Fallback,
			"file_event_queue":   m.FileEventQueue,
			"force":              m.Force,
			"isolation_mode":     m.IsolationMode,
			"name":               m.Name,
			"new_name":           m.NewName,
			"owner":              m.Owner,
			"read_only":          m.ReadOnly,
			"skip_validation":    m.SkipValidation,
			"url":                m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateExternalLocation) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":            types.StringType,
			"credential_name":    types.StringType,
			"enable_file_events": types.BoolType,
			"encryption_details": EncryptionDetails{}.Type(ctx),
			"fallback":           types.BoolType,
			"file_event_queue":   FileEventQueue{}.Type(ctx),
			"force":              types.BoolType,
			"isolation_mode":     types.StringType,
			"name":               types.StringType,
			"new_name":           types.StringType,
			"owner":              types.StringType,
			"read_only":          types.BoolType,
			"skip_validation":    types.BoolType,
			"url":                types.StringType,
		},
	}
}

// GetEncryptionDetails returns the value of the EncryptionDetails field in UpdateExternalLocation as
// a EncryptionDetails value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateExternalLocation) GetEncryptionDetails(ctx context.Context) (EncryptionDetails, bool) {
	var e EncryptionDetails
	if m.EncryptionDetails.IsNull() || m.EncryptionDetails.IsUnknown() {
		return e, false
	}
	var v EncryptionDetails
	d := m.EncryptionDetails.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEncryptionDetails sets the value of the EncryptionDetails field in UpdateExternalLocation.
func (m *UpdateExternalLocation) SetEncryptionDetails(ctx context.Context, v EncryptionDetails) {
	vs := v.ToObjectValue(ctx)
	m.EncryptionDetails = vs
}

// GetFileEventQueue returns the value of the FileEventQueue field in UpdateExternalLocation as
// a FileEventQueue value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateExternalLocation) GetFileEventQueue(ctx context.Context) (FileEventQueue, bool) {
	var e FileEventQueue
	if m.FileEventQueue.IsNull() || m.FileEventQueue.IsUnknown() {
		return e, false
	}
	var v FileEventQueue
	d := m.FileEventQueue.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetFileEventQueue sets the value of the FileEventQueue field in UpdateExternalLocation.
func (m *UpdateExternalLocation) SetFileEventQueue(ctx context.Context, v FileEventQueue) {
	vs := v.ToObjectValue(ctx)
	m.FileEventQueue = vs
}

type UpdateExternalMetadataRequest struct {
	ExternalMetadata types.Object `tfsdk:"external_metadata"`
	// Name of the external metadata object.
	Name types.String `tfsdk:"-"`
	// The field mask must be a single string, with multiple fields separated by
	// commas (no spaces). The field path is relative to the resource object,
	// using a dot (`.`) to navigate sub-fields (e.g., `author.given_name`).
	// Specification of elements in sequence or map fields is not allowed, as
	// only the entire collection field can be specified. Field names must
	// exactly match the resource field names.
	//
	// A field mask of `*` indicates full replacement. It’s recommended to
	// always explicitly list the fields being updated and avoid using `*`
	// wildcards, as it can lead to unintended results if the API changes in the
	// future.
	UpdateMask types.String `tfsdk:"-"`
}

func (to *UpdateExternalMetadataRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateExternalMetadataRequest) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() {
		if toExternalMetadata, ok := to.GetExternalMetadata(ctx); ok {
			if fromExternalMetadata, ok := from.GetExternalMetadata(ctx); ok {
				// Recursively sync the fields of ExternalMetadata
				toExternalMetadata.SyncFieldsDuringCreateOrUpdate(ctx, fromExternalMetadata)
				to.SetExternalMetadata(ctx, toExternalMetadata)
			}
		}
	}
}

func (to *UpdateExternalMetadataRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateExternalMetadataRequest) {
	if !from.ExternalMetadata.IsNull() && !from.ExternalMetadata.IsUnknown() {
		if toExternalMetadata, ok := to.GetExternalMetadata(ctx); ok {
			if fromExternalMetadata, ok := from.GetExternalMetadata(ctx); ok {
				toExternalMetadata.SyncFieldsDuringRead(ctx, fromExternalMetadata)
				to.SetExternalMetadata(ctx, toExternalMetadata)
			}
		}
	}
}

func (m UpdateExternalMetadataRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["external_metadata"] = attrs["external_metadata"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["update_mask"] = attrs["update_mask"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateExternalMetadataRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateExternalMetadataRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"external_metadata": reflect.TypeOf(ExternalMetadata{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateExternalMetadataRequest
// only implements ToObjectValue() and Type().
func (m UpdateExternalMetadataRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"external_metadata": m.ExternalMetadata,
			"name":              m.Name,
			"update_mask":       m.UpdateMask,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateExternalMetadataRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"external_metadata": ExternalMetadata{}.Type(ctx),
			"name":              types.StringType,
			"update_mask":       types.StringType,
		},
	}
}

// GetExternalMetadata returns the value of the ExternalMetadata field in UpdateExternalMetadataRequest as
// a ExternalMetadata value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateExternalMetadataRequest) GetExternalMetadata(ctx context.Context) (ExternalMetadata, bool) {
	var e ExternalMetadata
	if m.ExternalMetadata.IsNull() || m.ExternalMetadata.IsUnknown() {
		return e, false
	}
	var v ExternalMetadata
	d := m.ExternalMetadata.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetExternalMetadata sets the value of the ExternalMetadata field in UpdateExternalMetadataRequest.
func (m *UpdateExternalMetadataRequest) SetExternalMetadata(ctx context.Context, v ExternalMetadata) {
	vs := v.ToObjectValue(ctx)
	m.ExternalMetadata = vs
}

type UpdateFunction struct {
	// The fully-qualified name of the function (of the form
	// __catalog_name__.__schema_name__.__function__name__).
	Name types.String `tfsdk:"-"`
	// Username of current owner of the function.
	Owner types.String `tfsdk:"owner"`
}

func (to *UpdateFunction) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateFunction) {
}

func (to *UpdateFunction) SyncFieldsDuringRead(ctx context.Context, from UpdateFunction) {
}

func (m UpdateFunction) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateFunction.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateFunction) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateFunction
// only implements ToObjectValue() and Type().
func (m UpdateFunction) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":  m.Name,
			"owner": m.Owner,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateFunction) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":  types.StringType,
			"owner": types.StringType,
		},
	}
}

type UpdateMetastore struct {
	// The organization name of a Delta Sharing entity, to be used in
	// Databricks-to-Databricks Delta Sharing as the official name.
	DeltaSharingOrganizationName types.String `tfsdk:"delta_sharing_organization_name"`
	// The lifetime of delta sharing recipient token in seconds.
	DeltaSharingRecipientTokenLifetimeInSeconds types.Int64 `tfsdk:"delta_sharing_recipient_token_lifetime_in_seconds"`
	// The scope of Delta Sharing enabled for the metastore.
	DeltaSharingScope types.String `tfsdk:"delta_sharing_scope"`
	// Unique ID of the metastore.
	Id types.String `tfsdk:"-"`
	// New name for the metastore.
	NewName types.String `tfsdk:"new_name"`
	// The owner of the metastore.
	Owner types.String `tfsdk:"owner"`
	// Privilege model version of the metastore, of the form `major.minor`
	// (e.g., `1.0`).
	PrivilegeModelVersion types.String `tfsdk:"privilege_model_version"`
	// UUID of storage credential to access the metastore storage_root.
	StorageRootCredentialId types.String `tfsdk:"storage_root_credential_id"`
}

func (to *UpdateMetastore) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateMetastore) {
}

func (to *UpdateMetastore) SyncFieldsDuringRead(ctx context.Context, from UpdateMetastore) {
}

func (m UpdateMetastore) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["delta_sharing_organization_name"] = attrs["delta_sharing_organization_name"].SetOptional()
	attrs["delta_sharing_recipient_token_lifetime_in_seconds"] = attrs["delta_sharing_recipient_token_lifetime_in_seconds"].SetOptional()
	attrs["delta_sharing_scope"] = attrs["delta_sharing_scope"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["privilege_model_version"] = attrs["privilege_model_version"].SetOptional()
	attrs["storage_root_credential_id"] = attrs["storage_root_credential_id"].SetOptional()
	attrs["id"] = attrs["id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateMetastore.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateMetastore) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateMetastore
// only implements ToObjectValue() and Type().
func (m UpdateMetastore) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"delta_sharing_organization_name":                   m.DeltaSharingOrganizationName,
			"delta_sharing_recipient_token_lifetime_in_seconds": m.DeltaSharingRecipientTokenLifetimeInSeconds,
			"delta_sharing_scope":                               m.DeltaSharingScope,
			"id":                                                m.Id,
			"new_name":                                          m.NewName,
			"owner":                                             m.Owner,
			"privilege_model_version":                           m.PrivilegeModelVersion,
			"storage_root_credential_id":                        m.StorageRootCredentialId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateMetastore) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"delta_sharing_organization_name":                   types.StringType,
			"delta_sharing_recipient_token_lifetime_in_seconds": types.Int64Type,
			"delta_sharing_scope":                               types.StringType,
			"id":                                                types.StringType,
			"new_name":                                          types.StringType,
			"owner":                                             types.StringType,
			"privilege_model_version":                           types.StringType,
			"storage_root_credential_id":                        types.StringType,
		},
	}
}

type UpdateMetastoreAssignment struct {
	// The name of the default catalog in the metastore. This field is
	// deprecated. Please use "Default Namespace API" to configure the default
	// catalog for a Databricks workspace.
	DefaultCatalogName types.String `tfsdk:"default_catalog_name"`
	// The unique ID of the metastore.
	MetastoreId types.String `tfsdk:"metastore_id"`
	// A workspace ID.
	WorkspaceId types.Int64 `tfsdk:"-"`
}

func (to *UpdateMetastoreAssignment) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateMetastoreAssignment) {
}

func (to *UpdateMetastoreAssignment) SyncFieldsDuringRead(ctx context.Context, from UpdateMetastoreAssignment) {
}

func (m UpdateMetastoreAssignment) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["default_catalog_name"] = attrs["default_catalog_name"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateMetastoreAssignment.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateMetastoreAssignment) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateMetastoreAssignment
// only implements ToObjectValue() and Type().
func (m UpdateMetastoreAssignment) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"default_catalog_name": m.DefaultCatalogName,
			"metastore_id":         m.MetastoreId,
			"workspace_id":         m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateMetastoreAssignment) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"default_catalog_name": types.StringType,
			"metastore_id":         types.StringType,
			"workspace_id":         types.Int64Type,
		},
	}
}

type UpdateModelVersionRequest struct {
	// List of aliases associated with the model version
	Aliases types.List `tfsdk:"aliases"`
	// The name of the catalog containing the model version
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the model version
	Comment types.String `tfsdk:"comment"`

	CreatedAt types.Int64 `tfsdk:"created_at"`
	// The identifier of the user who created the model version
	CreatedBy types.String `tfsdk:"created_by"`
	// The three-level (fully qualified) name of the model version
	FullName types.String `tfsdk:"-"`
	// The unique identifier of the model version
	Id types.String `tfsdk:"id"`
	// The unique identifier of the metastore containing the model version
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The name of the parent registered model of the model version, relative to
	// parent schema
	ModelName types.String `tfsdk:"model_name"`
	// Model version dependencies, for feature-store packaged models
	ModelVersionDependencies types.Object `tfsdk:"model_version_dependencies"`
	// MLflow run ID used when creating the model version, if ``source`` was
	// generated by an experiment run stored in an MLflow tracking server
	RunId types.String `tfsdk:"run_id"`
	// ID of the Databricks workspace containing the MLflow run that generated
	// this model version, if applicable
	RunWorkspaceId types.Int64 `tfsdk:"run_workspace_id"`
	// The name of the schema containing the model version, relative to parent
	// catalog
	SchemaName types.String `tfsdk:"schema_name"`
	// URI indicating the location of the source artifacts (files) for the model
	// version
	Source types.String `tfsdk:"source"`
	// Current status of the model version. Newly created model versions start
	// in PENDING_REGISTRATION status, then move to READY status once the model
	// version files are uploaded and the model version is finalized. Only model
	// versions in READY status can be loaded for inference or served.
	Status types.String `tfsdk:"status"`
	// The storage location on the cloud under which model version data files
	// are stored
	StorageLocation types.String `tfsdk:"storage_location"`

	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// The identifier of the user who updated the model version last time
	UpdatedBy types.String `tfsdk:"updated_by"`
	// The integer version number of the model version
	Version types.Int64 `tfsdk:"-"`
}

func (to *UpdateModelVersionRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateModelVersionRequest) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
	if !from.ModelVersionDependencies.IsNull() && !from.ModelVersionDependencies.IsUnknown() {
		if toModelVersionDependencies, ok := to.GetModelVersionDependencies(ctx); ok {
			if fromModelVersionDependencies, ok := from.GetModelVersionDependencies(ctx); ok {
				// Recursively sync the fields of ModelVersionDependencies
				toModelVersionDependencies.SyncFieldsDuringCreateOrUpdate(ctx, fromModelVersionDependencies)
				to.SetModelVersionDependencies(ctx, toModelVersionDependencies)
			}
		}
	}
}

func (to *UpdateModelVersionRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateModelVersionRequest) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
	if !from.ModelVersionDependencies.IsNull() && !from.ModelVersionDependencies.IsUnknown() {
		if toModelVersionDependencies, ok := to.GetModelVersionDependencies(ctx); ok {
			if fromModelVersionDependencies, ok := from.GetModelVersionDependencies(ctx); ok {
				toModelVersionDependencies.SyncFieldsDuringRead(ctx, fromModelVersionDependencies)
				to.SetModelVersionDependencies(ctx, toModelVersionDependencies)
			}
		}
	}
}

func (m UpdateModelVersionRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aliases"] = attrs["aliases"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["id"] = attrs["id"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["model_name"] = attrs["model_name"].SetOptional()
	attrs["model_version_dependencies"] = attrs["model_version_dependencies"].SetOptional()
	attrs["run_id"] = attrs["run_id"].SetOptional()
	attrs["run_workspace_id"] = attrs["run_workspace_id"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["source"] = attrs["source"].SetOptional()
	attrs["status"] = attrs["status"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetRequired()
	attrs["version"] = attrs["version"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateModelVersionRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateModelVersionRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aliases":                    reflect.TypeOf(RegisteredModelAlias{}),
		"model_version_dependencies": reflect.TypeOf(DependencyList{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateModelVersionRequest
// only implements ToObjectValue() and Type().
func (m UpdateModelVersionRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aliases":                    m.Aliases,
			"catalog_name":               m.CatalogName,
			"comment":                    m.Comment,
			"created_at":                 m.CreatedAt,
			"created_by":                 m.CreatedBy,
			"full_name":                  m.FullName,
			"id":                         m.Id,
			"metastore_id":               m.MetastoreId,
			"model_name":                 m.ModelName,
			"model_version_dependencies": m.ModelVersionDependencies,
			"run_id":                     m.RunId,
			"run_workspace_id":           m.RunWorkspaceId,
			"schema_name":                m.SchemaName,
			"source":                     m.Source,
			"status":                     m.Status,
			"storage_location":           m.StorageLocation,
			"updated_at":                 m.UpdatedAt,
			"updated_by":                 m.UpdatedBy,
			"version":                    m.Version,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateModelVersionRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aliases": basetypes.ListType{
				ElemType: RegisteredModelAlias{}.Type(ctx),
			},
			"catalog_name":               types.StringType,
			"comment":                    types.StringType,
			"created_at":                 types.Int64Type,
			"created_by":                 types.StringType,
			"full_name":                  types.StringType,
			"id":                         types.StringType,
			"metastore_id":               types.StringType,
			"model_name":                 types.StringType,
			"model_version_dependencies": DependencyList{}.Type(ctx),
			"run_id":                     types.StringType,
			"run_workspace_id":           types.Int64Type,
			"schema_name":                types.StringType,
			"source":                     types.StringType,
			"status":                     types.StringType,
			"storage_location":           types.StringType,
			"updated_at":                 types.Int64Type,
			"updated_by":                 types.StringType,
			"version":                    types.Int64Type,
		},
	}
}

// GetAliases returns the value of the Aliases field in UpdateModelVersionRequest as
// a slice of RegisteredModelAlias values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateModelVersionRequest) GetAliases(ctx context.Context) ([]RegisteredModelAlias, bool) {
	if m.Aliases.IsNull() || m.Aliases.IsUnknown() {
		return nil, false
	}
	var v []RegisteredModelAlias
	d := m.Aliases.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAliases sets the value of the Aliases field in UpdateModelVersionRequest.
func (m *UpdateModelVersionRequest) SetAliases(ctx context.Context, v []RegisteredModelAlias) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["aliases"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Aliases = types.ListValueMust(t, vs)
}

// GetModelVersionDependencies returns the value of the ModelVersionDependencies field in UpdateModelVersionRequest as
// a DependencyList value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateModelVersionRequest) GetModelVersionDependencies(ctx context.Context) (DependencyList, bool) {
	var e DependencyList
	if m.ModelVersionDependencies.IsNull() || m.ModelVersionDependencies.IsUnknown() {
		return e, false
	}
	var v DependencyList
	d := m.ModelVersionDependencies.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetModelVersionDependencies sets the value of the ModelVersionDependencies field in UpdateModelVersionRequest.
func (m *UpdateModelVersionRequest) SetModelVersionDependencies(ctx context.Context, v DependencyList) {
	vs := v.ToObjectValue(ctx)
	m.ModelVersionDependencies = vs
}

type UpdateMonitor struct {
	// [Create:OPT Update:OPT] Baseline table name. Baseline data is used to
	// compute drift from the data in the monitored `table_name`. The baseline
	// table and the monitored table shall have the same schema.
	BaselineTableName types.String `tfsdk:"baseline_table_name"`
	// [Create:OPT Update:OPT] Custom metrics.
	CustomMetrics types.List `tfsdk:"custom_metrics"`
	// [Create:ERR Update:OPT] Id of dashboard that visualizes the computed
	// metrics. This can be empty if the monitor is in PENDING state.
	DashboardId types.String `tfsdk:"dashboard_id"`
	// [Create:OPT Update:OPT] Data classification related config.
	DataClassificationConfig types.Object `tfsdk:"data_classification_config"`

	InferenceLog types.Object `tfsdk:"inference_log"`
	// [Create:ERR Update:IGN] The latest error message for a monitor failure.
	LatestMonitorFailureMsg types.String `tfsdk:"latest_monitor_failure_msg"`
	// [Create:OPT Update:OPT] Field for specifying notification settings.
	Notifications types.Object `tfsdk:"notifications"`
	// [Create:REQ Update:REQ] Schema where output tables are created. Needs to
	// be in 2-level format {catalog}.{schema}
	OutputSchemaName types.String `tfsdk:"output_schema_name"`
	// [Create:OPT Update:OPT] The monitor schedule.
	Schedule types.Object `tfsdk:"schedule"`
	// [Create:OPT Update:OPT] List of column expressions to slice data with for
	// targeted analysis. The data is grouped by each expression independently,
	// resulting in a separate slice for each predicate and its complements. For
	// example `slicing_exprs=[“col_1”, “col_2 > 10”]` will generate the
	// following slices: two slices for `col_2 > 10` (True and False), and one
	// slice per unique value in `col1`. For high-cardinality columns, only the
	// top 100 unique values by frequency will generate slices.
	SlicingExprs types.List `tfsdk:"slicing_exprs"`
	// Configuration for monitoring snapshot tables.
	Snapshot types.Object `tfsdk:"snapshot"`
	// UC table name in format `catalog.schema.table_name`. This field
	// corresponds to the {full_table_name_arg} arg in the endpoint path.
	TableName types.String `tfsdk:"-"`
	// Configuration for monitoring time series tables.
	TimeSeries types.Object `tfsdk:"time_series"`
}

func (to *UpdateMonitor) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateMonitor) {
	if !from.CustomMetrics.IsNull() && !from.CustomMetrics.IsUnknown() && to.CustomMetrics.IsNull() && len(from.CustomMetrics.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomMetrics, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomMetrics = from.CustomMetrics
	}
	if !from.DataClassificationConfig.IsNull() && !from.DataClassificationConfig.IsUnknown() {
		if toDataClassificationConfig, ok := to.GetDataClassificationConfig(ctx); ok {
			if fromDataClassificationConfig, ok := from.GetDataClassificationConfig(ctx); ok {
				// Recursively sync the fields of DataClassificationConfig
				toDataClassificationConfig.SyncFieldsDuringCreateOrUpdate(ctx, fromDataClassificationConfig)
				to.SetDataClassificationConfig(ctx, toDataClassificationConfig)
			}
		}
	}
	if !from.InferenceLog.IsNull() && !from.InferenceLog.IsUnknown() {
		if toInferenceLog, ok := to.GetInferenceLog(ctx); ok {
			if fromInferenceLog, ok := from.GetInferenceLog(ctx); ok {
				// Recursively sync the fields of InferenceLog
				toInferenceLog.SyncFieldsDuringCreateOrUpdate(ctx, fromInferenceLog)
				to.SetInferenceLog(ctx, toInferenceLog)
			}
		}
	}
	if !from.Notifications.IsNull() && !from.Notifications.IsUnknown() {
		if toNotifications, ok := to.GetNotifications(ctx); ok {
			if fromNotifications, ok := from.GetNotifications(ctx); ok {
				// Recursively sync the fields of Notifications
				toNotifications.SyncFieldsDuringCreateOrUpdate(ctx, fromNotifications)
				to.SetNotifications(ctx, toNotifications)
			}
		}
	}
	if !from.Schedule.IsNull() && !from.Schedule.IsUnknown() {
		if toSchedule, ok := to.GetSchedule(ctx); ok {
			if fromSchedule, ok := from.GetSchedule(ctx); ok {
				// Recursively sync the fields of Schedule
				toSchedule.SyncFieldsDuringCreateOrUpdate(ctx, fromSchedule)
				to.SetSchedule(ctx, toSchedule)
			}
		}
	}
	if !from.SlicingExprs.IsNull() && !from.SlicingExprs.IsUnknown() && to.SlicingExprs.IsNull() && len(from.SlicingExprs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SlicingExprs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SlicingExprs = from.SlicingExprs
	}
	if !from.Snapshot.IsNull() && !from.Snapshot.IsUnknown() {
		if toSnapshot, ok := to.GetSnapshot(ctx); ok {
			if fromSnapshot, ok := from.GetSnapshot(ctx); ok {
				// Recursively sync the fields of Snapshot
				toSnapshot.SyncFieldsDuringCreateOrUpdate(ctx, fromSnapshot)
				to.SetSnapshot(ctx, toSnapshot)
			}
		}
	}
	if !from.TimeSeries.IsNull() && !from.TimeSeries.IsUnknown() {
		if toTimeSeries, ok := to.GetTimeSeries(ctx); ok {
			if fromTimeSeries, ok := from.GetTimeSeries(ctx); ok {
				// Recursively sync the fields of TimeSeries
				toTimeSeries.SyncFieldsDuringCreateOrUpdate(ctx, fromTimeSeries)
				to.SetTimeSeries(ctx, toTimeSeries)
			}
		}
	}
}

func (to *UpdateMonitor) SyncFieldsDuringRead(ctx context.Context, from UpdateMonitor) {
	if !from.CustomMetrics.IsNull() && !from.CustomMetrics.IsUnknown() && to.CustomMetrics.IsNull() && len(from.CustomMetrics.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for CustomMetrics, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.CustomMetrics = from.CustomMetrics
	}
	if !from.DataClassificationConfig.IsNull() && !from.DataClassificationConfig.IsUnknown() {
		if toDataClassificationConfig, ok := to.GetDataClassificationConfig(ctx); ok {
			if fromDataClassificationConfig, ok := from.GetDataClassificationConfig(ctx); ok {
				toDataClassificationConfig.SyncFieldsDuringRead(ctx, fromDataClassificationConfig)
				to.SetDataClassificationConfig(ctx, toDataClassificationConfig)
			}
		}
	}
	if !from.InferenceLog.IsNull() && !from.InferenceLog.IsUnknown() {
		if toInferenceLog, ok := to.GetInferenceLog(ctx); ok {
			if fromInferenceLog, ok := from.GetInferenceLog(ctx); ok {
				toInferenceLog.SyncFieldsDuringRead(ctx, fromInferenceLog)
				to.SetInferenceLog(ctx, toInferenceLog)
			}
		}
	}
	if !from.Notifications.IsNull() && !from.Notifications.IsUnknown() {
		if toNotifications, ok := to.GetNotifications(ctx); ok {
			if fromNotifications, ok := from.GetNotifications(ctx); ok {
				toNotifications.SyncFieldsDuringRead(ctx, fromNotifications)
				to.SetNotifications(ctx, toNotifications)
			}
		}
	}
	if !from.Schedule.IsNull() && !from.Schedule.IsUnknown() {
		if toSchedule, ok := to.GetSchedule(ctx); ok {
			if fromSchedule, ok := from.GetSchedule(ctx); ok {
				toSchedule.SyncFieldsDuringRead(ctx, fromSchedule)
				to.SetSchedule(ctx, toSchedule)
			}
		}
	}
	if !from.SlicingExprs.IsNull() && !from.SlicingExprs.IsUnknown() && to.SlicingExprs.IsNull() && len(from.SlicingExprs.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for SlicingExprs, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.SlicingExprs = from.SlicingExprs
	}
	if !from.Snapshot.IsNull() && !from.Snapshot.IsUnknown() {
		if toSnapshot, ok := to.GetSnapshot(ctx); ok {
			if fromSnapshot, ok := from.GetSnapshot(ctx); ok {
				toSnapshot.SyncFieldsDuringRead(ctx, fromSnapshot)
				to.SetSnapshot(ctx, toSnapshot)
			}
		}
	}
	if !from.TimeSeries.IsNull() && !from.TimeSeries.IsUnknown() {
		if toTimeSeries, ok := to.GetTimeSeries(ctx); ok {
			if fromTimeSeries, ok := from.GetTimeSeries(ctx); ok {
				toTimeSeries.SyncFieldsDuringRead(ctx, fromTimeSeries)
				to.SetTimeSeries(ctx, toTimeSeries)
			}
		}
	}
}

func (m UpdateMonitor) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["baseline_table_name"] = attrs["baseline_table_name"].SetOptional()
	attrs["custom_metrics"] = attrs["custom_metrics"].SetOptional()
	attrs["dashboard_id"] = attrs["dashboard_id"].SetOptional()
	attrs["data_classification_config"] = attrs["data_classification_config"].SetOptional()
	attrs["inference_log"] = attrs["inference_log"].SetOptional()
	attrs["latest_monitor_failure_msg"] = attrs["latest_monitor_failure_msg"].SetOptional()
	attrs["notifications"] = attrs["notifications"].SetOptional()
	attrs["output_schema_name"] = attrs["output_schema_name"].SetRequired()
	attrs["schedule"] = attrs["schedule"].SetOptional()
	attrs["slicing_exprs"] = attrs["slicing_exprs"].SetOptional()
	attrs["snapshot"] = attrs["snapshot"].SetOptional()
	attrs["time_series"] = attrs["time_series"].SetOptional()
	attrs["table_name"] = attrs["table_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateMonitor.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateMonitor) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"custom_metrics":             reflect.TypeOf(MonitorMetric{}),
		"data_classification_config": reflect.TypeOf(MonitorDataClassificationConfig{}),
		"inference_log":              reflect.TypeOf(MonitorInferenceLog{}),
		"notifications":              reflect.TypeOf(MonitorNotifications{}),
		"schedule":                   reflect.TypeOf(MonitorCronSchedule{}),
		"slicing_exprs":              reflect.TypeOf(types.String{}),
		"snapshot":                   reflect.TypeOf(MonitorSnapshot{}),
		"time_series":                reflect.TypeOf(MonitorTimeSeries{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateMonitor
// only implements ToObjectValue() and Type().
func (m UpdateMonitor) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"baseline_table_name":        m.BaselineTableName,
			"custom_metrics":             m.CustomMetrics,
			"dashboard_id":               m.DashboardId,
			"data_classification_config": m.DataClassificationConfig,
			"inference_log":              m.InferenceLog,
			"latest_monitor_failure_msg": m.LatestMonitorFailureMsg,
			"notifications":              m.Notifications,
			"output_schema_name":         m.OutputSchemaName,
			"schedule":                   m.Schedule,
			"slicing_exprs":              m.SlicingExprs,
			"snapshot":                   m.Snapshot,
			"table_name":                 m.TableName,
			"time_series":                m.TimeSeries,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateMonitor) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"baseline_table_name": types.StringType,
			"custom_metrics": basetypes.ListType{
				ElemType: MonitorMetric{}.Type(ctx),
			},
			"dashboard_id":               types.StringType,
			"data_classification_config": MonitorDataClassificationConfig{}.Type(ctx),
			"inference_log":              MonitorInferenceLog{}.Type(ctx),
			"latest_monitor_failure_msg": types.StringType,
			"notifications":              MonitorNotifications{}.Type(ctx),
			"output_schema_name":         types.StringType,
			"schedule":                   MonitorCronSchedule{}.Type(ctx),
			"slicing_exprs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"snapshot":    MonitorSnapshot{}.Type(ctx),
			"table_name":  types.StringType,
			"time_series": MonitorTimeSeries{}.Type(ctx),
		},
	}
}

// GetCustomMetrics returns the value of the CustomMetrics field in UpdateMonitor as
// a slice of MonitorMetric values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetCustomMetrics(ctx context.Context) ([]MonitorMetric, bool) {
	if m.CustomMetrics.IsNull() || m.CustomMetrics.IsUnknown() {
		return nil, false
	}
	var v []MonitorMetric
	d := m.CustomMetrics.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCustomMetrics sets the value of the CustomMetrics field in UpdateMonitor.
func (m *UpdateMonitor) SetCustomMetrics(ctx context.Context, v []MonitorMetric) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["custom_metrics"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.CustomMetrics = types.ListValueMust(t, vs)
}

// GetDataClassificationConfig returns the value of the DataClassificationConfig field in UpdateMonitor as
// a MonitorDataClassificationConfig value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetDataClassificationConfig(ctx context.Context) (MonitorDataClassificationConfig, bool) {
	var e MonitorDataClassificationConfig
	if m.DataClassificationConfig.IsNull() || m.DataClassificationConfig.IsUnknown() {
		return e, false
	}
	var v MonitorDataClassificationConfig
	d := m.DataClassificationConfig.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDataClassificationConfig sets the value of the DataClassificationConfig field in UpdateMonitor.
func (m *UpdateMonitor) SetDataClassificationConfig(ctx context.Context, v MonitorDataClassificationConfig) {
	vs := v.ToObjectValue(ctx)
	m.DataClassificationConfig = vs
}

// GetInferenceLog returns the value of the InferenceLog field in UpdateMonitor as
// a MonitorInferenceLog value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetInferenceLog(ctx context.Context) (MonitorInferenceLog, bool) {
	var e MonitorInferenceLog
	if m.InferenceLog.IsNull() || m.InferenceLog.IsUnknown() {
		return e, false
	}
	var v MonitorInferenceLog
	d := m.InferenceLog.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetInferenceLog sets the value of the InferenceLog field in UpdateMonitor.
func (m *UpdateMonitor) SetInferenceLog(ctx context.Context, v MonitorInferenceLog) {
	vs := v.ToObjectValue(ctx)
	m.InferenceLog = vs
}

// GetNotifications returns the value of the Notifications field in UpdateMonitor as
// a MonitorNotifications value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetNotifications(ctx context.Context) (MonitorNotifications, bool) {
	var e MonitorNotifications
	if m.Notifications.IsNull() || m.Notifications.IsUnknown() {
		return e, false
	}
	var v MonitorNotifications
	d := m.Notifications.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetNotifications sets the value of the Notifications field in UpdateMonitor.
func (m *UpdateMonitor) SetNotifications(ctx context.Context, v MonitorNotifications) {
	vs := v.ToObjectValue(ctx)
	m.Notifications = vs
}

// GetSchedule returns the value of the Schedule field in UpdateMonitor as
// a MonitorCronSchedule value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetSchedule(ctx context.Context) (MonitorCronSchedule, bool) {
	var e MonitorCronSchedule
	if m.Schedule.IsNull() || m.Schedule.IsUnknown() {
		return e, false
	}
	var v MonitorCronSchedule
	d := m.Schedule.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSchedule sets the value of the Schedule field in UpdateMonitor.
func (m *UpdateMonitor) SetSchedule(ctx context.Context, v MonitorCronSchedule) {
	vs := v.ToObjectValue(ctx)
	m.Schedule = vs
}

// GetSlicingExprs returns the value of the SlicingExprs field in UpdateMonitor as
// a slice of types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetSlicingExprs(ctx context.Context) ([]types.String, bool) {
	if m.SlicingExprs.IsNull() || m.SlicingExprs.IsUnknown() {
		return nil, false
	}
	var v []types.String
	d := m.SlicingExprs.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSlicingExprs sets the value of the SlicingExprs field in UpdateMonitor.
func (m *UpdateMonitor) SetSlicingExprs(ctx context.Context, v []types.String) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["slicing_exprs"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.SlicingExprs = types.ListValueMust(t, vs)
}

// GetSnapshot returns the value of the Snapshot field in UpdateMonitor as
// a MonitorSnapshot value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetSnapshot(ctx context.Context) (MonitorSnapshot, bool) {
	var e MonitorSnapshot
	if m.Snapshot.IsNull() || m.Snapshot.IsUnknown() {
		return e, false
	}
	var v MonitorSnapshot
	d := m.Snapshot.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSnapshot sets the value of the Snapshot field in UpdateMonitor.
func (m *UpdateMonitor) SetSnapshot(ctx context.Context, v MonitorSnapshot) {
	vs := v.ToObjectValue(ctx)
	m.Snapshot = vs
}

// GetTimeSeries returns the value of the TimeSeries field in UpdateMonitor as
// a MonitorTimeSeries value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateMonitor) GetTimeSeries(ctx context.Context) (MonitorTimeSeries, bool) {
	var e MonitorTimeSeries
	if m.TimeSeries.IsNull() || m.TimeSeries.IsUnknown() {
		return e, false
	}
	var v MonitorTimeSeries
	d := m.TimeSeries.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTimeSeries sets the value of the TimeSeries field in UpdateMonitor.
func (m *UpdateMonitor) SetTimeSeries(ctx context.Context, v MonitorTimeSeries) {
	vs := v.ToObjectValue(ctx)
	m.TimeSeries = vs
}

type UpdatePermissions struct {
	// Array of permissions change objects.
	Changes types.List `tfsdk:"changes"`
	// Full name of securable.
	FullName types.String `tfsdk:"-"`
	// Type of securable.
	SecurableType types.String `tfsdk:"-"`
}

func (to *UpdatePermissions) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdatePermissions) {
	if !from.Changes.IsNull() && !from.Changes.IsUnknown() && to.Changes.IsNull() && len(from.Changes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Changes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Changes = from.Changes
	}
}

func (to *UpdatePermissions) SyncFieldsDuringRead(ctx context.Context, from UpdatePermissions) {
	if !from.Changes.IsNull() && !from.Changes.IsUnknown() && to.Changes.IsNull() && len(from.Changes.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Changes, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Changes = from.Changes
	}
}

func (m UpdatePermissions) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["changes"] = attrs["changes"].SetOptional()
	attrs["securable_type"] = attrs["securable_type"].SetRequired()
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdatePermissions.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdatePermissions) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"changes": reflect.TypeOf(PermissionsChange{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdatePermissions
// only implements ToObjectValue() and Type().
func (m UpdatePermissions) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"changes":        m.Changes,
			"full_name":      m.FullName,
			"securable_type": m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdatePermissions) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"changes": basetypes.ListType{
				ElemType: PermissionsChange{}.Type(ctx),
			},
			"full_name":      types.StringType,
			"securable_type": types.StringType,
		},
	}
}

// GetChanges returns the value of the Changes field in UpdatePermissions as
// a slice of PermissionsChange values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdatePermissions) GetChanges(ctx context.Context) ([]PermissionsChange, bool) {
	if m.Changes.IsNull() || m.Changes.IsUnknown() {
		return nil, false
	}
	var v []PermissionsChange
	d := m.Changes.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetChanges sets the value of the Changes field in UpdatePermissions.
func (m *UpdatePermissions) SetChanges(ctx context.Context, v []PermissionsChange) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["changes"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Changes = types.ListValueMust(t, vs)
}

type UpdatePermissionsResponse struct {
	// The privileges assigned to each principal
	PrivilegeAssignments types.List `tfsdk:"privilege_assignments"`
}

func (to *UpdatePermissionsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdatePermissionsResponse) {
	if !from.PrivilegeAssignments.IsNull() && !from.PrivilegeAssignments.IsUnknown() && to.PrivilegeAssignments.IsNull() && len(from.PrivilegeAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrivilegeAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrivilegeAssignments = from.PrivilegeAssignments
	}
}

func (to *UpdatePermissionsResponse) SyncFieldsDuringRead(ctx context.Context, from UpdatePermissionsResponse) {
	if !from.PrivilegeAssignments.IsNull() && !from.PrivilegeAssignments.IsUnknown() && to.PrivilegeAssignments.IsNull() && len(from.PrivilegeAssignments.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for PrivilegeAssignments, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.PrivilegeAssignments = from.PrivilegeAssignments
	}
}

func (m UpdatePermissionsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["privilege_assignments"] = attrs["privilege_assignments"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdatePermissionsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdatePermissionsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"privilege_assignments": reflect.TypeOf(PrivilegeAssignment{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdatePermissionsResponse
// only implements ToObjectValue() and Type().
func (m UpdatePermissionsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"privilege_assignments": m.PrivilegeAssignments,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdatePermissionsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"privilege_assignments": basetypes.ListType{
				ElemType: PrivilegeAssignment{}.Type(ctx),
			},
		},
	}
}

// GetPrivilegeAssignments returns the value of the PrivilegeAssignments field in UpdatePermissionsResponse as
// a slice of PrivilegeAssignment values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdatePermissionsResponse) GetPrivilegeAssignments(ctx context.Context) ([]PrivilegeAssignment, bool) {
	if m.PrivilegeAssignments.IsNull() || m.PrivilegeAssignments.IsUnknown() {
		return nil, false
	}
	var v []PrivilegeAssignment
	d := m.PrivilegeAssignments.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPrivilegeAssignments sets the value of the PrivilegeAssignments field in UpdatePermissionsResponse.
func (m *UpdatePermissionsResponse) SetPrivilegeAssignments(ctx context.Context, v []PrivilegeAssignment) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["privilege_assignments"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.PrivilegeAssignments = types.ListValueMust(t, vs)
}

type UpdatePolicyRequest struct {
	// Required. The name of the policy to update.
	Name types.String `tfsdk:"-"`
	// Required. The fully qualified name of the securable to update the policy
	// for.
	OnSecurableFullname types.String `tfsdk:"-"`
	// Required. The type of the securable to update the policy for.
	OnSecurableType types.String `tfsdk:"-"`
	// Optional fields to update. This is the request body for updating a
	// policy. Use `update_mask` field to specify which fields in the request is
	// to be updated. - If `update_mask` is empty or "*", all specified fields
	// will be updated. - If `update_mask` is specified, only the fields
	// specified in the `update_mask` will be updated. If a field is specified
	// in `update_mask` and not set in the request, the field will be cleared.
	// Users can use the update mask to explicitly unset optional fields such as
	// `exception_principals` and `when_condition`.
	PolicyInfo types.Object `tfsdk:"policy_info"`
	// Optional. The update mask field for specifying user intentions on which
	// fields to update in the request.
	UpdateMask types.String `tfsdk:"-"`
}

func (to *UpdatePolicyRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdatePolicyRequest) {
	if !from.PolicyInfo.IsNull() && !from.PolicyInfo.IsUnknown() {
		if toPolicyInfo, ok := to.GetPolicyInfo(ctx); ok {
			if fromPolicyInfo, ok := from.GetPolicyInfo(ctx); ok {
				// Recursively sync the fields of PolicyInfo
				toPolicyInfo.SyncFieldsDuringCreateOrUpdate(ctx, fromPolicyInfo)
				to.SetPolicyInfo(ctx, toPolicyInfo)
			}
		}
	}
}

func (to *UpdatePolicyRequest) SyncFieldsDuringRead(ctx context.Context, from UpdatePolicyRequest) {
	if !from.PolicyInfo.IsNull() && !from.PolicyInfo.IsUnknown() {
		if toPolicyInfo, ok := to.GetPolicyInfo(ctx); ok {
			if fromPolicyInfo, ok := from.GetPolicyInfo(ctx); ok {
				toPolicyInfo.SyncFieldsDuringRead(ctx, fromPolicyInfo)
				to.SetPolicyInfo(ctx, toPolicyInfo)
			}
		}
	}
}

func (m UpdatePolicyRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["policy_info"] = attrs["policy_info"].SetRequired()
	attrs["on_securable_type"] = attrs["on_securable_type"].SetRequired()
	attrs["on_securable_fullname"] = attrs["on_securable_fullname"].SetRequired()
	attrs["name"] = attrs["name"].SetRequired()
	attrs["update_mask"] = attrs["update_mask"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdatePolicyRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdatePolicyRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"policy_info": reflect.TypeOf(PolicyInfo{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdatePolicyRequest
// only implements ToObjectValue() and Type().
func (m UpdatePolicyRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"name":                  m.Name,
			"on_securable_fullname": m.OnSecurableFullname,
			"on_securable_type":     m.OnSecurableType,
			"policy_info":           m.PolicyInfo,
			"update_mask":           m.UpdateMask,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdatePolicyRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"name":                  types.StringType,
			"on_securable_fullname": types.StringType,
			"on_securable_type":     types.StringType,
			"policy_info":           PolicyInfo{}.Type(ctx),
			"update_mask":           types.StringType,
		},
	}
}

// GetPolicyInfo returns the value of the PolicyInfo field in UpdatePolicyRequest as
// a PolicyInfo value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdatePolicyRequest) GetPolicyInfo(ctx context.Context) (PolicyInfo, bool) {
	var e PolicyInfo
	if m.PolicyInfo.IsNull() || m.PolicyInfo.IsUnknown() {
		return e, false
	}
	var v PolicyInfo
	d := m.PolicyInfo.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetPolicyInfo sets the value of the PolicyInfo field in UpdatePolicyRequest.
func (m *UpdatePolicyRequest) SetPolicyInfo(ctx context.Context, v PolicyInfo) {
	vs := v.ToObjectValue(ctx)
	m.PolicyInfo = vs
}

type UpdateRegisteredModelRequest struct {
	// List of aliases associated with the registered model
	Aliases types.List `tfsdk:"aliases"`
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// The name of the catalog where the schema and the registered model reside
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the registered model
	Comment types.String `tfsdk:"comment"`
	// Creation timestamp of the registered model in milliseconds since the Unix
	// epoch
	CreatedAt types.Int64 `tfsdk:"created_at"`
	// The identifier of the user who created the registered model
	CreatedBy types.String `tfsdk:"created_by"`
	// The three-level (fully qualified) name of the registered model
	FullName types.String `tfsdk:"-"`
	// The unique identifier of the metastore
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The name of the registered model
	Name types.String `tfsdk:"name"`
	// New name for the registered model.
	NewName types.String `tfsdk:"new_name"`
	// The identifier of the user who owns the registered model
	Owner types.String `tfsdk:"owner"`
	// The name of the schema where the registered model resides
	SchemaName types.String `tfsdk:"schema_name"`
	// The storage location on the cloud under which model version data files
	// are stored
	StorageLocation types.String `tfsdk:"storage_location"`
	// Last-update timestamp of the registered model in milliseconds since the
	// Unix epoch
	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// The identifier of the user who updated the registered model last time
	UpdatedBy types.String `tfsdk:"updated_by"`
}

func (to *UpdateRegisteredModelRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateRegisteredModelRequest) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
}

func (to *UpdateRegisteredModelRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateRegisteredModelRequest) {
	if !from.Aliases.IsNull() && !from.Aliases.IsUnknown() && to.Aliases.IsNull() && len(from.Aliases.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Aliases, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Aliases = from.Aliases
	}
}

func (m UpdateRegisteredModelRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aliases"] = attrs["aliases"].SetOptional()
	attrs["browse_only"] = attrs["browse_only"].SetOptional()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetOptional()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["metastore_id"] = attrs["metastore_id"].SetOptional()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetOptional()
	attrs["updated_by"] = attrs["updated_by"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateRegisteredModelRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateRegisteredModelRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aliases": reflect.TypeOf(RegisteredModelAlias{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateRegisteredModelRequest
// only implements ToObjectValue() and Type().
func (m UpdateRegisteredModelRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aliases":          m.Aliases,
			"browse_only":      m.BrowseOnly,
			"catalog_name":     m.CatalogName,
			"comment":          m.Comment,
			"created_at":       m.CreatedAt,
			"created_by":       m.CreatedBy,
			"full_name":        m.FullName,
			"metastore_id":     m.MetastoreId,
			"name":             m.Name,
			"new_name":         m.NewName,
			"owner":            m.Owner,
			"schema_name":      m.SchemaName,
			"storage_location": m.StorageLocation,
			"updated_at":       m.UpdatedAt,
			"updated_by":       m.UpdatedBy,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateRegisteredModelRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aliases": basetypes.ListType{
				ElemType: RegisteredModelAlias{}.Type(ctx),
			},
			"browse_only":      types.BoolType,
			"catalog_name":     types.StringType,
			"comment":          types.StringType,
			"created_at":       types.Int64Type,
			"created_by":       types.StringType,
			"full_name":        types.StringType,
			"metastore_id":     types.StringType,
			"name":             types.StringType,
			"new_name":         types.StringType,
			"owner":            types.StringType,
			"schema_name":      types.StringType,
			"storage_location": types.StringType,
			"updated_at":       types.Int64Type,
			"updated_by":       types.StringType,
		},
	}
}

// GetAliases returns the value of the Aliases field in UpdateRegisteredModelRequest as
// a slice of RegisteredModelAlias values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateRegisteredModelRequest) GetAliases(ctx context.Context) ([]RegisteredModelAlias, bool) {
	if m.Aliases.IsNull() || m.Aliases.IsUnknown() {
		return nil, false
	}
	var v []RegisteredModelAlias
	d := m.Aliases.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAliases sets the value of the Aliases field in UpdateRegisteredModelRequest.
func (m *UpdateRegisteredModelRequest) SetAliases(ctx context.Context, v []RegisteredModelAlias) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["aliases"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Aliases = types.ListValueMust(t, vs)
}

type UpdateRequestExternalLineage struct {
	// List of column relationships between source and target objects.
	Columns types.List `tfsdk:"columns"`
	// Unique identifier of the external lineage relationship.
	Id types.String `tfsdk:"id"`
	// Key-value properties associated with the external lineage relationship.
	Properties types.Map `tfsdk:"properties"`
	// Source object of the external lineage relationship.
	Source types.Object `tfsdk:"source"`
	// Target object of the external lineage relationship.
	Target types.Object `tfsdk:"target"`
}

func (to *UpdateRequestExternalLineage) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateRequestExternalLineage) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				// Recursively sync the fields of Source
				toSource.SyncFieldsDuringCreateOrUpdate(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				// Recursively sync the fields of Target
				toTarget.SyncFieldsDuringCreateOrUpdate(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (to *UpdateRequestExternalLineage) SyncFieldsDuringRead(ctx context.Context, from UpdateRequestExternalLineage) {
	if !from.Columns.IsNull() && !from.Columns.IsUnknown() && to.Columns.IsNull() && len(from.Columns.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Columns, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Columns = from.Columns
	}
	if !from.Source.IsNull() && !from.Source.IsUnknown() {
		if toSource, ok := to.GetSource(ctx); ok {
			if fromSource, ok := from.GetSource(ctx); ok {
				toSource.SyncFieldsDuringRead(ctx, fromSource)
				to.SetSource(ctx, toSource)
			}
		}
	}
	if !from.Target.IsNull() && !from.Target.IsUnknown() {
		if toTarget, ok := to.GetTarget(ctx); ok {
			if fromTarget, ok := from.GetTarget(ctx); ok {
				toTarget.SyncFieldsDuringRead(ctx, fromTarget)
				to.SetTarget(ctx, toTarget)
			}
		}
	}
}

func (m UpdateRequestExternalLineage) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["columns"] = attrs["columns"].SetOptional()
	attrs["id"] = attrs["id"].SetComputed()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["source"] = attrs["source"].SetRequired()
	attrs["target"] = attrs["target"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateRequestExternalLineage.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateRequestExternalLineage) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"columns":    reflect.TypeOf(ColumnRelationship{}),
		"properties": reflect.TypeOf(types.String{}),
		"source":     reflect.TypeOf(ExternalLineageObject{}),
		"target":     reflect.TypeOf(ExternalLineageObject{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateRequestExternalLineage
// only implements ToObjectValue() and Type().
func (m UpdateRequestExternalLineage) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"columns":    m.Columns,
			"id":         m.Id,
			"properties": m.Properties,
			"source":     m.Source,
			"target":     m.Target,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateRequestExternalLineage) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"columns": basetypes.ListType{
				ElemType: ColumnRelationship{}.Type(ctx),
			},
			"id": types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"source": ExternalLineageObject{}.Type(ctx),
			"target": ExternalLineageObject{}.Type(ctx),
		},
	}
}

// GetColumns returns the value of the Columns field in UpdateRequestExternalLineage as
// a slice of ColumnRelationship values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateRequestExternalLineage) GetColumns(ctx context.Context) ([]ColumnRelationship, bool) {
	if m.Columns.IsNull() || m.Columns.IsUnknown() {
		return nil, false
	}
	var v []ColumnRelationship
	d := m.Columns.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetColumns sets the value of the Columns field in UpdateRequestExternalLineage.
func (m *UpdateRequestExternalLineage) SetColumns(ctx context.Context, v []ColumnRelationship) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["columns"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Columns = types.ListValueMust(t, vs)
}

// GetProperties returns the value of the Properties field in UpdateRequestExternalLineage as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateRequestExternalLineage) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in UpdateRequestExternalLineage.
func (m *UpdateRequestExternalLineage) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

// GetSource returns the value of the Source field in UpdateRequestExternalLineage as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateRequestExternalLineage) GetSource(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Source.IsNull() || m.Source.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Source.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetSource sets the value of the Source field in UpdateRequestExternalLineage.
func (m *UpdateRequestExternalLineage) SetSource(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Source = vs
}

// GetTarget returns the value of the Target field in UpdateRequestExternalLineage as
// a ExternalLineageObject value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateRequestExternalLineage) GetTarget(ctx context.Context) (ExternalLineageObject, bool) {
	var e ExternalLineageObject
	if m.Target.IsNull() || m.Target.IsUnknown() {
		return e, false
	}
	var v ExternalLineageObject
	d := m.Target.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetTarget sets the value of the Target field in UpdateRequestExternalLineage.
func (m *UpdateRequestExternalLineage) SetTarget(ctx context.Context, v ExternalLineageObject) {
	vs := v.ToObjectValue(ctx)
	m.Target = vs
}

type UpdateResponse struct {
}

func (to *UpdateResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateResponse) {
}

func (to *UpdateResponse) SyncFieldsDuringRead(ctx context.Context, from UpdateResponse) {
}

func (m UpdateResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateResponse
// only implements ToObjectValue() and Type().
func (m UpdateResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{},
	}
}

type UpdateSchema struct {
	// User-provided free-form text description.
	Comment types.String `tfsdk:"comment"`
	// Whether predictive optimization should be enabled for this object and
	// objects under it.
	EnablePredictiveOptimization types.String `tfsdk:"enable_predictive_optimization"`
	// Full name of the schema.
	FullName types.String `tfsdk:"-"`
	// New name for the schema.
	NewName types.String `tfsdk:"new_name"`
	// Username of current owner of schema.
	Owner types.String `tfsdk:"owner"`
	// A map of key-value properties attached to the securable.
	Properties types.Map `tfsdk:"properties"`
}

func (to *UpdateSchema) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateSchema) {
}

func (to *UpdateSchema) SyncFieldsDuringRead(ctx context.Context, from UpdateSchema) {
}

func (m UpdateSchema) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["enable_predictive_optimization"] = attrs["enable_predictive_optimization"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["properties"] = attrs["properties"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateSchema.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateSchema) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"properties": reflect.TypeOf(types.String{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateSchema
// only implements ToObjectValue() and Type().
func (m UpdateSchema) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":                        m.Comment,
			"enable_predictive_optimization": m.EnablePredictiveOptimization,
			"full_name":                      m.FullName,
			"new_name":                       m.NewName,
			"owner":                          m.Owner,
			"properties":                     m.Properties,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateSchema) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":                        types.StringType,
			"enable_predictive_optimization": types.StringType,
			"full_name":                      types.StringType,
			"new_name":                       types.StringType,
			"owner":                          types.StringType,
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
		},
	}
}

// GetProperties returns the value of the Properties field in UpdateSchema as
// a map of string to types.String values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateSchema) GetProperties(ctx context.Context) (map[string]types.String, bool) {
	if m.Properties.IsNull() || m.Properties.IsUnknown() {
		return nil, false
	}
	var v map[string]types.String
	d := m.Properties.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetProperties sets the value of the Properties field in UpdateSchema.
func (m *UpdateSchema) SetProperties(ctx context.Context, v map[string]types.String) {
	vs := make(map[string]attr.Value, len(v))
	for k, e := range v {
		vs[k] = e
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["properties"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Properties = types.MapValueMust(t, vs)
}

type UpdateStorageCredential struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// The Cloudflare API token configuration.
	CloudflareApiToken types.Object `tfsdk:"cloudflare_api_token"`
	// Comment associated with the credential.
	Comment types.String `tfsdk:"comment"`
	// The Databricks managed GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// Force update even if there are dependent external locations or external
	// tables.
	Force types.Bool `tfsdk:"force"`
	// Whether the current securable is accessible from all workspaces or a
	// specific set of workspaces.
	IsolationMode types.String `tfsdk:"isolation_mode"`
	// Name of the storage credential.
	Name types.String `tfsdk:"-"`
	// New name for the storage credential.
	NewName types.String `tfsdk:"new_name"`
	// Username of current owner of credential.
	Owner types.String `tfsdk:"owner"`
	// Whether the credential is usable only for read operations. Only
	// applicable when purpose is **STORAGE**.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Supplying true to this argument skips validation of the updated
	// credential.
	SkipValidation types.Bool `tfsdk:"skip_validation"`
}

func (to *UpdateStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				// Recursively sync the fields of CloudflareApiToken
				toCloudflareApiToken.SyncFieldsDuringCreateOrUpdate(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *UpdateStorageCredential) SyncFieldsDuringRead(ctx context.Context, from UpdateStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				toCloudflareApiToken.SyncFieldsDuringRead(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m UpdateStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["cloudflare_api_token"] = attrs["cloudflare_api_token"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["force"] = attrs["force"].SetOptional()
	attrs["isolation_mode"] = attrs["isolation_mode"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["skip_validation"] = attrs["skip_validation"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRoleRequest{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentityResponse{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"cloudflare_api_token":           reflect.TypeOf(CloudflareApiToken{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccountRequest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateStorageCredential
// only implements ToObjectValue() and Type().
func (m UpdateStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"cloudflare_api_token":           m.CloudflareApiToken,
			"comment":                        m.Comment,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"force":                          m.Force,
			"isolation_mode":                 m.IsolationMode,
			"name":                           m.Name,
			"new_name":                       m.NewName,
			"owner":                          m.Owner,
			"read_only":                      m.ReadOnly,
			"skip_validation":                m.SkipValidation,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRoleRequest{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentityResponse{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"cloudflare_api_token":           CloudflareApiToken{}.Type(ctx),
			"comment":                        types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccountRequest{}.Type(ctx),
			"force":                          types.BoolType,
			"isolation_mode":                 types.StringType,
			"name":                           types.StringType,
			"new_name":                       types.StringType,
			"owner":                          types.StringType,
			"read_only":                      types.BoolType,
			"skip_validation":                types.BoolType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in UpdateStorageCredential as
// a AwsIamRoleRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateStorageCredential) GetAwsIamRole(ctx context.Context) (AwsIamRoleRequest, bool) {
	var e AwsIamRoleRequest
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRoleRequest
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in UpdateStorageCredential.
func (m *UpdateStorageCredential) SetAwsIamRole(ctx context.Context, v AwsIamRoleRequest) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in UpdateStorageCredential as
// a AzureManagedIdentityResponse value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateStorageCredential) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentityResponse, bool) {
	var e AzureManagedIdentityResponse
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentityResponse
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in UpdateStorageCredential.
func (m *UpdateStorageCredential) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentityResponse) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in UpdateStorageCredential as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateStorageCredential) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in UpdateStorageCredential.
func (m *UpdateStorageCredential) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetCloudflareApiToken returns the value of the CloudflareApiToken field in UpdateStorageCredential as
// a CloudflareApiToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateStorageCredential) GetCloudflareApiToken(ctx context.Context) (CloudflareApiToken, bool) {
	var e CloudflareApiToken
	if m.CloudflareApiToken.IsNull() || m.CloudflareApiToken.IsUnknown() {
		return e, false
	}
	var v CloudflareApiToken
	d := m.CloudflareApiToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCloudflareApiToken sets the value of the CloudflareApiToken field in UpdateStorageCredential.
func (m *UpdateStorageCredential) SetCloudflareApiToken(ctx context.Context, v CloudflareApiToken) {
	vs := v.ToObjectValue(ctx)
	m.CloudflareApiToken = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in UpdateStorageCredential as
// a DatabricksGcpServiceAccountRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateStorageCredential) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccountRequest, bool) {
	var e DatabricksGcpServiceAccountRequest
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccountRequest
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in UpdateStorageCredential.
func (m *UpdateStorageCredential) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccountRequest) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type UpdateTableRequest struct {
	// Full name of the table.
	FullName types.String `tfsdk:"-"`
	// Username of current owner of table.
	Owner types.String `tfsdk:"owner"`
}

func (to *UpdateTableRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateTableRequest) {
}

func (to *UpdateTableRequest) SyncFieldsDuringRead(ctx context.Context, from UpdateTableRequest) {
}

func (m UpdateTableRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["full_name"] = attrs["full_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateTableRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateTableRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateTableRequest
// only implements ToObjectValue() and Type().
func (m UpdateTableRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"full_name": m.FullName,
			"owner":     m.Owner,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateTableRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"full_name": types.StringType,
			"owner":     types.StringType,
		},
	}
}

type UpdateVolumeRequestContent struct {
	// The comment attached to the volume
	Comment types.String `tfsdk:"comment"`
	// The three-level (fully qualified) name of the volume
	Name types.String `tfsdk:"-"`
	// New name for the volume.
	NewName types.String `tfsdk:"new_name"`
	// The identifier of the user who owns the volume
	Owner types.String `tfsdk:"owner"`
}

func (to *UpdateVolumeRequestContent) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateVolumeRequestContent) {
}

func (to *UpdateVolumeRequestContent) SyncFieldsDuringRead(ctx context.Context, from UpdateVolumeRequestContent) {
}

func (m UpdateVolumeRequestContent) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["new_name"] = attrs["new_name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateVolumeRequestContent.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateVolumeRequestContent) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateVolumeRequestContent
// only implements ToObjectValue() and Type().
func (m UpdateVolumeRequestContent) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"comment":  m.Comment,
			"name":     m.Name,
			"new_name": m.NewName,
			"owner":    m.Owner,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateVolumeRequestContent) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"comment":  types.StringType,
			"name":     types.StringType,
			"new_name": types.StringType,
			"owner":    types.StringType,
		},
	}
}

type UpdateWorkspaceBindings struct {
	// A list of workspace IDs.
	AssignWorkspaces types.List `tfsdk:"assign_workspaces"`
	// The name of the catalog.
	Name types.String `tfsdk:"-"`
	// A list of workspace IDs.
	UnassignWorkspaces types.List `tfsdk:"unassign_workspaces"`
}

func (to *UpdateWorkspaceBindings) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateWorkspaceBindings) {
	if !from.AssignWorkspaces.IsNull() && !from.AssignWorkspaces.IsUnknown() && to.AssignWorkspaces.IsNull() && len(from.AssignWorkspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for AssignWorkspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.AssignWorkspaces = from.AssignWorkspaces
	}
	if !from.UnassignWorkspaces.IsNull() && !from.UnassignWorkspaces.IsUnknown() && to.UnassignWorkspaces.IsNull() && len(from.UnassignWorkspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for UnassignWorkspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.UnassignWorkspaces = from.UnassignWorkspaces
	}
}

func (to *UpdateWorkspaceBindings) SyncFieldsDuringRead(ctx context.Context, from UpdateWorkspaceBindings) {
	if !from.AssignWorkspaces.IsNull() && !from.AssignWorkspaces.IsUnknown() && to.AssignWorkspaces.IsNull() && len(from.AssignWorkspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for AssignWorkspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.AssignWorkspaces = from.AssignWorkspaces
	}
	if !from.UnassignWorkspaces.IsNull() && !from.UnassignWorkspaces.IsUnknown() && to.UnassignWorkspaces.IsNull() && len(from.UnassignWorkspaces.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for UnassignWorkspaces, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.UnassignWorkspaces = from.UnassignWorkspaces
	}
}

func (m UpdateWorkspaceBindings) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["assign_workspaces"] = attrs["assign_workspaces"].SetOptional()
	attrs["unassign_workspaces"] = attrs["unassign_workspaces"].SetOptional()
	attrs["name"] = attrs["name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateWorkspaceBindings.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateWorkspaceBindings) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"assign_workspaces":   reflect.TypeOf(types.Int64{}),
		"unassign_workspaces": reflect.TypeOf(types.Int64{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateWorkspaceBindings
// only implements ToObjectValue() and Type().
func (m UpdateWorkspaceBindings) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"assign_workspaces":   m.AssignWorkspaces,
			"name":                m.Name,
			"unassign_workspaces": m.UnassignWorkspaces,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateWorkspaceBindings) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"assign_workspaces": basetypes.ListType{
				ElemType: types.Int64Type,
			},
			"name": types.StringType,
			"unassign_workspaces": basetypes.ListType{
				ElemType: types.Int64Type,
			},
		},
	}
}

// GetAssignWorkspaces returns the value of the AssignWorkspaces field in UpdateWorkspaceBindings as
// a slice of types.Int64 values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateWorkspaceBindings) GetAssignWorkspaces(ctx context.Context) ([]types.Int64, bool) {
	if m.AssignWorkspaces.IsNull() || m.AssignWorkspaces.IsUnknown() {
		return nil, false
	}
	var v []types.Int64
	d := m.AssignWorkspaces.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAssignWorkspaces sets the value of the AssignWorkspaces field in UpdateWorkspaceBindings.
func (m *UpdateWorkspaceBindings) SetAssignWorkspaces(ctx context.Context, v []types.Int64) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["assign_workspaces"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.AssignWorkspaces = types.ListValueMust(t, vs)
}

// GetUnassignWorkspaces returns the value of the UnassignWorkspaces field in UpdateWorkspaceBindings as
// a slice of types.Int64 values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateWorkspaceBindings) GetUnassignWorkspaces(ctx context.Context) ([]types.Int64, bool) {
	if m.UnassignWorkspaces.IsNull() || m.UnassignWorkspaces.IsUnknown() {
		return nil, false
	}
	var v []types.Int64
	d := m.UnassignWorkspaces.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetUnassignWorkspaces sets the value of the UnassignWorkspaces field in UpdateWorkspaceBindings.
func (m *UpdateWorkspaceBindings) SetUnassignWorkspaces(ctx context.Context, v []types.Int64) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e)
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["unassign_workspaces"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.UnassignWorkspaces = types.ListValueMust(t, vs)
}

type UpdateWorkspaceBindingsParameters struct {
	// List of workspace bindings to add. If a binding for the workspace already
	// exists with a different binding_type, adding it again with a new
	// binding_type will update the existing binding (e.g., from READ_WRITE to
	// READ_ONLY).
	Add types.List `tfsdk:"add"`
	// List of workspace bindings to remove.
	Remove types.List `tfsdk:"remove"`
	// The name of the securable.
	SecurableName types.String `tfsdk:"-"`
	// The type of the securable to bind to a workspace (catalog,
	// storage_credential, credential, or external_location).
	SecurableType types.String `tfsdk:"-"`
}

func (to *UpdateWorkspaceBindingsParameters) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateWorkspaceBindingsParameters) {
	if !from.Add.IsNull() && !from.Add.IsUnknown() && to.Add.IsNull() && len(from.Add.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Add, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Add = from.Add
	}
	if !from.Remove.IsNull() && !from.Remove.IsUnknown() && to.Remove.IsNull() && len(from.Remove.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Remove, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Remove = from.Remove
	}
}

func (to *UpdateWorkspaceBindingsParameters) SyncFieldsDuringRead(ctx context.Context, from UpdateWorkspaceBindingsParameters) {
	if !from.Add.IsNull() && !from.Add.IsUnknown() && to.Add.IsNull() && len(from.Add.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Add, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Add = from.Add
	}
	if !from.Remove.IsNull() && !from.Remove.IsUnknown() && to.Remove.IsNull() && len(from.Remove.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Remove, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Remove = from.Remove
	}
}

func (m UpdateWorkspaceBindingsParameters) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["add"] = attrs["add"].SetOptional()
	attrs["remove"] = attrs["remove"].SetOptional()
	attrs["securable_type"] = attrs["securable_type"].SetRequired()
	attrs["securable_name"] = attrs["securable_name"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateWorkspaceBindingsParameters.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateWorkspaceBindingsParameters) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"add":    reflect.TypeOf(WorkspaceBinding{}),
		"remove": reflect.TypeOf(WorkspaceBinding{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateWorkspaceBindingsParameters
// only implements ToObjectValue() and Type().
func (m UpdateWorkspaceBindingsParameters) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"add":            m.Add,
			"remove":         m.Remove,
			"securable_name": m.SecurableName,
			"securable_type": m.SecurableType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateWorkspaceBindingsParameters) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"add": basetypes.ListType{
				ElemType: WorkspaceBinding{}.Type(ctx),
			},
			"remove": basetypes.ListType{
				ElemType: WorkspaceBinding{}.Type(ctx),
			},
			"securable_name": types.StringType,
			"securable_type": types.StringType,
		},
	}
}

// GetAdd returns the value of the Add field in UpdateWorkspaceBindingsParameters as
// a slice of WorkspaceBinding values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateWorkspaceBindingsParameters) GetAdd(ctx context.Context) ([]WorkspaceBinding, bool) {
	if m.Add.IsNull() || m.Add.IsUnknown() {
		return nil, false
	}
	var v []WorkspaceBinding
	d := m.Add.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAdd sets the value of the Add field in UpdateWorkspaceBindingsParameters.
func (m *UpdateWorkspaceBindingsParameters) SetAdd(ctx context.Context, v []WorkspaceBinding) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["add"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Add = types.ListValueMust(t, vs)
}

// GetRemove returns the value of the Remove field in UpdateWorkspaceBindingsParameters as
// a slice of WorkspaceBinding values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateWorkspaceBindingsParameters) GetRemove(ctx context.Context) ([]WorkspaceBinding, bool) {
	if m.Remove.IsNull() || m.Remove.IsUnknown() {
		return nil, false
	}
	var v []WorkspaceBinding
	d := m.Remove.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetRemove sets the value of the Remove field in UpdateWorkspaceBindingsParameters.
func (m *UpdateWorkspaceBindingsParameters) SetRemove(ctx context.Context, v []WorkspaceBinding) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["remove"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Remove = types.ListValueMust(t, vs)
}

// A list of workspace IDs that are bound to the securable
type UpdateWorkspaceBindingsResponse struct {
	// List of workspace bindings.
	Bindings types.List `tfsdk:"bindings"`
}

func (to *UpdateWorkspaceBindingsResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from UpdateWorkspaceBindingsResponse) {
	if !from.Bindings.IsNull() && !from.Bindings.IsUnknown() && to.Bindings.IsNull() && len(from.Bindings.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Bindings, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Bindings = from.Bindings
	}
}

func (to *UpdateWorkspaceBindingsResponse) SyncFieldsDuringRead(ctx context.Context, from UpdateWorkspaceBindingsResponse) {
	if !from.Bindings.IsNull() && !from.Bindings.IsUnknown() && to.Bindings.IsNull() && len(from.Bindings.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Bindings, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Bindings = from.Bindings
	}
}

func (m UpdateWorkspaceBindingsResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["bindings"] = attrs["bindings"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in UpdateWorkspaceBindingsResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m UpdateWorkspaceBindingsResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"bindings": reflect.TypeOf(WorkspaceBinding{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, UpdateWorkspaceBindingsResponse
// only implements ToObjectValue() and Type().
func (m UpdateWorkspaceBindingsResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"bindings": m.Bindings,
		})
}

// Type implements basetypes.ObjectValuable.
func (m UpdateWorkspaceBindingsResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"bindings": basetypes.ListType{
				ElemType: WorkspaceBinding{}.Type(ctx),
			},
		},
	}
}

// GetBindings returns the value of the Bindings field in UpdateWorkspaceBindingsResponse as
// a slice of WorkspaceBinding values.
// If the field is unknown or null, the boolean return value is false.
func (m *UpdateWorkspaceBindingsResponse) GetBindings(ctx context.Context) ([]WorkspaceBinding, bool) {
	if m.Bindings.IsNull() || m.Bindings.IsUnknown() {
		return nil, false
	}
	var v []WorkspaceBinding
	d := m.Bindings.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetBindings sets the value of the Bindings field in UpdateWorkspaceBindingsResponse.
func (m *UpdateWorkspaceBindingsResponse) SetBindings(ctx context.Context, v []WorkspaceBinding) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["bindings"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Bindings = types.ListValueMust(t, vs)
}

// Next ID: 17
type ValidateCredentialRequest struct {
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`

	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// Required. The name of an existing credential or long-lived cloud
	// credential to validate.
	CredentialName types.String `tfsdk:"credential_name"`

	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The name of an existing external location to validate. Only applicable
	// for storage credentials (purpose is **STORAGE**.)
	ExternalLocationName types.String `tfsdk:"external_location_name"`
	// The purpose of the credential. This should only be used when the
	// credential is specified.
	Purpose types.String `tfsdk:"purpose"`
	// Whether the credential is only usable for read operations. Only
	// applicable for storage credentials (purpose is **STORAGE**.)
	ReadOnly types.Bool `tfsdk:"read_only"`
	// The external location url to validate. Only applicable when purpose is
	// **STORAGE**.
	Url types.String `tfsdk:"url"`
}

func (to *ValidateCredentialRequest) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ValidateCredentialRequest) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *ValidateCredentialRequest) SyncFieldsDuringRead(ctx context.Context, from ValidateCredentialRequest) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m ValidateCredentialRequest) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["credential_name"] = attrs["credential_name"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["external_location_name"] = attrs["external_location_name"].SetOptional()
	attrs["purpose"] = attrs["purpose"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ValidateCredentialRequest.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ValidateCredentialRequest) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRole{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentity{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccount{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ValidateCredentialRequest
// only implements ToObjectValue() and Type().
func (m ValidateCredentialRequest) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"credential_name":                m.CredentialName,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"external_location_name":         m.ExternalLocationName,
			"purpose":                        m.Purpose,
			"read_only":                      m.ReadOnly,
			"url":                            m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ValidateCredentialRequest) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRole{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentity{}.Type(ctx),
			"credential_name":                types.StringType,
			"databricks_gcp_service_account": DatabricksGcpServiceAccount{}.Type(ctx),
			"external_location_name":         types.StringType,
			"purpose":                        types.StringType,
			"read_only":                      types.BoolType,
			"url":                            types.StringType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in ValidateCredentialRequest as
// a AwsIamRole value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateCredentialRequest) GetAwsIamRole(ctx context.Context) (AwsIamRole, bool) {
	var e AwsIamRole
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRole
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in ValidateCredentialRequest.
func (m *ValidateCredentialRequest) SetAwsIamRole(ctx context.Context, v AwsIamRole) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in ValidateCredentialRequest as
// a AzureManagedIdentity value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateCredentialRequest) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentity, bool) {
	var e AzureManagedIdentity
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentity
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in ValidateCredentialRequest.
func (m *ValidateCredentialRequest) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentity) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in ValidateCredentialRequest as
// a DatabricksGcpServiceAccount value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateCredentialRequest) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccount, bool) {
	var e DatabricksGcpServiceAccount
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccount
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in ValidateCredentialRequest.
func (m *ValidateCredentialRequest) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccount) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type ValidateCredentialResponse struct {
	// Whether the tested location is a directory in cloud storage. Only
	// applicable for when purpose is **STORAGE**.
	IsDir types.Bool `tfsdk:"is_dir"`
	// The results of the validation check.
	Results types.List `tfsdk:"results"`
}

func (to *ValidateCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ValidateCredentialResponse) {
	if !from.Results.IsNull() && !from.Results.IsUnknown() && to.Results.IsNull() && len(from.Results.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Results, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Results = from.Results
	}
}

func (to *ValidateCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from ValidateCredentialResponse) {
	if !from.Results.IsNull() && !from.Results.IsUnknown() && to.Results.IsNull() && len(from.Results.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Results, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Results = from.Results
	}
}

func (m ValidateCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["is_dir"] = attrs["is_dir"].SetOptional()
	attrs["results"] = attrs["results"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ValidateCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ValidateCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"results": reflect.TypeOf(CredentialValidationResult{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ValidateCredentialResponse
// only implements ToObjectValue() and Type().
func (m ValidateCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"is_dir":  m.IsDir,
			"results": m.Results,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ValidateCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"is_dir": types.BoolType,
			"results": basetypes.ListType{
				ElemType: CredentialValidationResult{}.Type(ctx),
			},
		},
	}
}

// GetResults returns the value of the Results field in ValidateCredentialResponse as
// a slice of CredentialValidationResult values.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateCredentialResponse) GetResults(ctx context.Context) ([]CredentialValidationResult, bool) {
	if m.Results.IsNull() || m.Results.IsUnknown() {
		return nil, false
	}
	var v []CredentialValidationResult
	d := m.Results.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetResults sets the value of the Results field in ValidateCredentialResponse.
func (m *ValidateCredentialResponse) SetResults(ctx context.Context, v []CredentialValidationResult) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["results"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Results = types.ListValueMust(t, vs)
}

type ValidateStorageCredential struct {
	// The AWS IAM role configuration.
	AwsIamRole types.Object `tfsdk:"aws_iam_role"`
	// The Azure managed identity configuration.
	AzureManagedIdentity types.Object `tfsdk:"azure_managed_identity"`
	// The Azure service principal configuration.
	AzureServicePrincipal types.Object `tfsdk:"azure_service_principal"`
	// The Cloudflare API token configuration.
	CloudflareApiToken types.Object `tfsdk:"cloudflare_api_token"`
	// The Databricks created GCP service account configuration.
	DatabricksGcpServiceAccount types.Object `tfsdk:"databricks_gcp_service_account"`
	// The name of an existing external location to validate.
	ExternalLocationName types.String `tfsdk:"external_location_name"`
	// Whether the storage credential is only usable for read operations.
	ReadOnly types.Bool `tfsdk:"read_only"`
	// Required. The name of an existing credential or long-lived cloud
	// credential to validate.
	StorageCredentialName types.String `tfsdk:"storage_credential_name"`
	// The external location url to validate.
	Url types.String `tfsdk:"url"`
}

func (to *ValidateStorageCredential) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ValidateStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				// Recursively sync the fields of AwsIamRole
				toAwsIamRole.SyncFieldsDuringCreateOrUpdate(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				// Recursively sync the fields of AzureManagedIdentity
				toAzureManagedIdentity.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				// Recursively sync the fields of AzureServicePrincipal
				toAzureServicePrincipal.SyncFieldsDuringCreateOrUpdate(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				// Recursively sync the fields of CloudflareApiToken
				toCloudflareApiToken.SyncFieldsDuringCreateOrUpdate(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				// Recursively sync the fields of DatabricksGcpServiceAccount
				toDatabricksGcpServiceAccount.SyncFieldsDuringCreateOrUpdate(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (to *ValidateStorageCredential) SyncFieldsDuringRead(ctx context.Context, from ValidateStorageCredential) {
	if !from.AwsIamRole.IsNull() && !from.AwsIamRole.IsUnknown() {
		if toAwsIamRole, ok := to.GetAwsIamRole(ctx); ok {
			if fromAwsIamRole, ok := from.GetAwsIamRole(ctx); ok {
				toAwsIamRole.SyncFieldsDuringRead(ctx, fromAwsIamRole)
				to.SetAwsIamRole(ctx, toAwsIamRole)
			}
		}
	}
	if !from.AzureManagedIdentity.IsNull() && !from.AzureManagedIdentity.IsUnknown() {
		if toAzureManagedIdentity, ok := to.GetAzureManagedIdentity(ctx); ok {
			if fromAzureManagedIdentity, ok := from.GetAzureManagedIdentity(ctx); ok {
				toAzureManagedIdentity.SyncFieldsDuringRead(ctx, fromAzureManagedIdentity)
				to.SetAzureManagedIdentity(ctx, toAzureManagedIdentity)
			}
		}
	}
	if !from.AzureServicePrincipal.IsNull() && !from.AzureServicePrincipal.IsUnknown() {
		if toAzureServicePrincipal, ok := to.GetAzureServicePrincipal(ctx); ok {
			if fromAzureServicePrincipal, ok := from.GetAzureServicePrincipal(ctx); ok {
				toAzureServicePrincipal.SyncFieldsDuringRead(ctx, fromAzureServicePrincipal)
				to.SetAzureServicePrincipal(ctx, toAzureServicePrincipal)
			}
		}
	}
	if !from.CloudflareApiToken.IsNull() && !from.CloudflareApiToken.IsUnknown() {
		if toCloudflareApiToken, ok := to.GetCloudflareApiToken(ctx); ok {
			if fromCloudflareApiToken, ok := from.GetCloudflareApiToken(ctx); ok {
				toCloudflareApiToken.SyncFieldsDuringRead(ctx, fromCloudflareApiToken)
				to.SetCloudflareApiToken(ctx, toCloudflareApiToken)
			}
		}
	}
	if !from.DatabricksGcpServiceAccount.IsNull() && !from.DatabricksGcpServiceAccount.IsUnknown() {
		if toDatabricksGcpServiceAccount, ok := to.GetDatabricksGcpServiceAccount(ctx); ok {
			if fromDatabricksGcpServiceAccount, ok := from.GetDatabricksGcpServiceAccount(ctx); ok {
				toDatabricksGcpServiceAccount.SyncFieldsDuringRead(ctx, fromDatabricksGcpServiceAccount)
				to.SetDatabricksGcpServiceAccount(ctx, toDatabricksGcpServiceAccount)
			}
		}
	}
}

func (m ValidateStorageCredential) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["aws_iam_role"] = attrs["aws_iam_role"].SetOptional()
	attrs["azure_managed_identity"] = attrs["azure_managed_identity"].SetOptional()
	attrs["azure_service_principal"] = attrs["azure_service_principal"].SetOptional()
	attrs["cloudflare_api_token"] = attrs["cloudflare_api_token"].SetOptional()
	attrs["databricks_gcp_service_account"] = attrs["databricks_gcp_service_account"].SetOptional()
	attrs["external_location_name"] = attrs["external_location_name"].SetOptional()
	attrs["read_only"] = attrs["read_only"].SetOptional()
	attrs["storage_credential_name"] = attrs["storage_credential_name"].SetOptional()
	attrs["url"] = attrs["url"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ValidateStorageCredential.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ValidateStorageCredential) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"aws_iam_role":                   reflect.TypeOf(AwsIamRoleRequest{}),
		"azure_managed_identity":         reflect.TypeOf(AzureManagedIdentityRequest{}),
		"azure_service_principal":        reflect.TypeOf(AzureServicePrincipal{}),
		"cloudflare_api_token":           reflect.TypeOf(CloudflareApiToken{}),
		"databricks_gcp_service_account": reflect.TypeOf(DatabricksGcpServiceAccountRequest{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ValidateStorageCredential
// only implements ToObjectValue() and Type().
func (m ValidateStorageCredential) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"aws_iam_role":                   m.AwsIamRole,
			"azure_managed_identity":         m.AzureManagedIdentity,
			"azure_service_principal":        m.AzureServicePrincipal,
			"cloudflare_api_token":           m.CloudflareApiToken,
			"databricks_gcp_service_account": m.DatabricksGcpServiceAccount,
			"external_location_name":         m.ExternalLocationName,
			"read_only":                      m.ReadOnly,
			"storage_credential_name":        m.StorageCredentialName,
			"url":                            m.Url,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ValidateStorageCredential) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"aws_iam_role":                   AwsIamRoleRequest{}.Type(ctx),
			"azure_managed_identity":         AzureManagedIdentityRequest{}.Type(ctx),
			"azure_service_principal":        AzureServicePrincipal{}.Type(ctx),
			"cloudflare_api_token":           CloudflareApiToken{}.Type(ctx),
			"databricks_gcp_service_account": DatabricksGcpServiceAccountRequest{}.Type(ctx),
			"external_location_name":         types.StringType,
			"read_only":                      types.BoolType,
			"storage_credential_name":        types.StringType,
			"url":                            types.StringType,
		},
	}
}

// GetAwsIamRole returns the value of the AwsIamRole field in ValidateStorageCredential as
// a AwsIamRoleRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateStorageCredential) GetAwsIamRole(ctx context.Context) (AwsIamRoleRequest, bool) {
	var e AwsIamRoleRequest
	if m.AwsIamRole.IsNull() || m.AwsIamRole.IsUnknown() {
		return e, false
	}
	var v AwsIamRoleRequest
	d := m.AwsIamRole.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAwsIamRole sets the value of the AwsIamRole field in ValidateStorageCredential.
func (m *ValidateStorageCredential) SetAwsIamRole(ctx context.Context, v AwsIamRoleRequest) {
	vs := v.ToObjectValue(ctx)
	m.AwsIamRole = vs
}

// GetAzureManagedIdentity returns the value of the AzureManagedIdentity field in ValidateStorageCredential as
// a AzureManagedIdentityRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateStorageCredential) GetAzureManagedIdentity(ctx context.Context) (AzureManagedIdentityRequest, bool) {
	var e AzureManagedIdentityRequest
	if m.AzureManagedIdentity.IsNull() || m.AzureManagedIdentity.IsUnknown() {
		return e, false
	}
	var v AzureManagedIdentityRequest
	d := m.AzureManagedIdentity.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureManagedIdentity sets the value of the AzureManagedIdentity field in ValidateStorageCredential.
func (m *ValidateStorageCredential) SetAzureManagedIdentity(ctx context.Context, v AzureManagedIdentityRequest) {
	vs := v.ToObjectValue(ctx)
	m.AzureManagedIdentity = vs
}

// GetAzureServicePrincipal returns the value of the AzureServicePrincipal field in ValidateStorageCredential as
// a AzureServicePrincipal value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateStorageCredential) GetAzureServicePrincipal(ctx context.Context) (AzureServicePrincipal, bool) {
	var e AzureServicePrincipal
	if m.AzureServicePrincipal.IsNull() || m.AzureServicePrincipal.IsUnknown() {
		return e, false
	}
	var v AzureServicePrincipal
	d := m.AzureServicePrincipal.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetAzureServicePrincipal sets the value of the AzureServicePrincipal field in ValidateStorageCredential.
func (m *ValidateStorageCredential) SetAzureServicePrincipal(ctx context.Context, v AzureServicePrincipal) {
	vs := v.ToObjectValue(ctx)
	m.AzureServicePrincipal = vs
}

// GetCloudflareApiToken returns the value of the CloudflareApiToken field in ValidateStorageCredential as
// a CloudflareApiToken value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateStorageCredential) GetCloudflareApiToken(ctx context.Context) (CloudflareApiToken, bool) {
	var e CloudflareApiToken
	if m.CloudflareApiToken.IsNull() || m.CloudflareApiToken.IsUnknown() {
		return e, false
	}
	var v CloudflareApiToken
	d := m.CloudflareApiToken.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetCloudflareApiToken sets the value of the CloudflareApiToken field in ValidateStorageCredential.
func (m *ValidateStorageCredential) SetCloudflareApiToken(ctx context.Context, v CloudflareApiToken) {
	vs := v.ToObjectValue(ctx)
	m.CloudflareApiToken = vs
}

// GetDatabricksGcpServiceAccount returns the value of the DatabricksGcpServiceAccount field in ValidateStorageCredential as
// a DatabricksGcpServiceAccountRequest value.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateStorageCredential) GetDatabricksGcpServiceAccount(ctx context.Context) (DatabricksGcpServiceAccountRequest, bool) {
	var e DatabricksGcpServiceAccountRequest
	if m.DatabricksGcpServiceAccount.IsNull() || m.DatabricksGcpServiceAccount.IsUnknown() {
		return e, false
	}
	var v DatabricksGcpServiceAccountRequest
	d := m.DatabricksGcpServiceAccount.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetDatabricksGcpServiceAccount sets the value of the DatabricksGcpServiceAccount field in ValidateStorageCredential.
func (m *ValidateStorageCredential) SetDatabricksGcpServiceAccount(ctx context.Context, v DatabricksGcpServiceAccountRequest) {
	vs := v.ToObjectValue(ctx)
	m.DatabricksGcpServiceAccount = vs
}

type ValidateStorageCredentialResponse struct {
	// Whether the tested location is a directory in cloud storage.
	IsDir types.Bool `tfsdk:"is_dir"`
	// The results of the validation check.
	Results types.List `tfsdk:"results"`
}

func (to *ValidateStorageCredentialResponse) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ValidateStorageCredentialResponse) {
	if !from.Results.IsNull() && !from.Results.IsUnknown() && to.Results.IsNull() && len(from.Results.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Results, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Results = from.Results
	}
}

func (to *ValidateStorageCredentialResponse) SyncFieldsDuringRead(ctx context.Context, from ValidateStorageCredentialResponse) {
	if !from.Results.IsNull() && !from.Results.IsUnknown() && to.Results.IsNull() && len(from.Results.Elements()) == 0 {
		// The default representation of an empty list for TF autogenerated resources in the resource state is Null.
		// If a user specified a non-Null, empty list for Results, and the deserialized field value is Null,
		// set the resulting resource state to the empty list to match the planned value.
		to.Results = from.Results
	}
}

func (m ValidateStorageCredentialResponse) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["is_dir"] = attrs["is_dir"].SetOptional()
	attrs["results"] = attrs["results"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ValidateStorageCredentialResponse.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ValidateStorageCredentialResponse) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"results": reflect.TypeOf(ValidationResult{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ValidateStorageCredentialResponse
// only implements ToObjectValue() and Type().
func (m ValidateStorageCredentialResponse) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"is_dir":  m.IsDir,
			"results": m.Results,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ValidateStorageCredentialResponse) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"is_dir": types.BoolType,
			"results": basetypes.ListType{
				ElemType: ValidationResult{}.Type(ctx),
			},
		},
	}
}

// GetResults returns the value of the Results field in ValidateStorageCredentialResponse as
// a slice of ValidationResult values.
// If the field is unknown or null, the boolean return value is false.
func (m *ValidateStorageCredentialResponse) GetResults(ctx context.Context) ([]ValidationResult, bool) {
	if m.Results.IsNull() || m.Results.IsUnknown() {
		return nil, false
	}
	var v []ValidationResult
	d := m.Results.ElementsAs(ctx, &v, true)
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetResults sets the value of the Results field in ValidateStorageCredentialResponse.
func (m *ValidateStorageCredentialResponse) SetResults(ctx context.Context, v []ValidationResult) {
	vs := make([]attr.Value, 0, len(v))
	for _, e := range v {
		vs = append(vs, e.ToObjectValue(ctx))
	}
	t := m.Type(ctx).(basetypes.ObjectType).AttrTypes["results"]
	t = t.(attr.TypeWithElementType).ElementType()
	m.Results = types.ListValueMust(t, vs)
}

type ValidationResult struct {
	// Error message would exist when the result does not equal to **PASS**.
	Message types.String `tfsdk:"message"`
	// The operation tested.
	Operation types.String `tfsdk:"operation"`
	// The results of the tested operation.
	Result types.String `tfsdk:"result"`
}

func (to *ValidationResult) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from ValidationResult) {
}

func (to *ValidationResult) SyncFieldsDuringRead(ctx context.Context, from ValidationResult) {
}

func (m ValidationResult) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["message"] = attrs["message"].SetOptional()
	attrs["operation"] = attrs["operation"].SetOptional()
	attrs["result"] = attrs["result"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in ValidationResult.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m ValidationResult) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, ValidationResult
// only implements ToObjectValue() and Type().
func (m ValidationResult) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"message":   m.Message,
			"operation": m.Operation,
			"result":    m.Result,
		})
}

// Type implements basetypes.ObjectValuable.
func (m ValidationResult) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"message":   types.StringType,
			"operation": types.StringType,
			"result":    types.StringType,
		},
	}
}

type VolumeInfo struct {
	// The AWS access point to use when accesing s3 for this external location.
	AccessPoint types.String `tfsdk:"access_point"`
	// Indicates whether the principal is limited to retrieving metadata for the
	// associated object through the BROWSE privilege when include_browse is
	// enabled in the request.
	BrowseOnly types.Bool `tfsdk:"browse_only"`
	// The name of the catalog where the schema and the volume are
	CatalogName types.String `tfsdk:"catalog_name"`
	// The comment attached to the volume
	Comment types.String `tfsdk:"comment"`

	CreatedAt types.Int64 `tfsdk:"created_at"`
	// The identifier of the user who created the volume
	CreatedBy types.String `tfsdk:"created_by"`

	EncryptionDetails types.Object `tfsdk:"encryption_details"`
	// The three-level (fully qualified) name of the volume
	FullName types.String `tfsdk:"full_name"`
	// The unique identifier of the metastore
	MetastoreId types.String `tfsdk:"metastore_id"`
	// The name of the volume
	Name types.String `tfsdk:"name"`
	// The identifier of the user who owns the volume
	Owner types.String `tfsdk:"owner"`
	// The name of the schema where the volume is
	SchemaName types.String `tfsdk:"schema_name"`
	// The storage location on the cloud
	StorageLocation types.String `tfsdk:"storage_location"`

	UpdatedAt types.Int64 `tfsdk:"updated_at"`
	// The identifier of the user who updated the volume last time
	UpdatedBy types.String `tfsdk:"updated_by"`
	// The unique identifier of the volume
	VolumeId types.String `tfsdk:"volume_id"`
	// The type of the volume. An external volume is located in the specified
	// external location. A managed volume is located in the default location
	// which is specified by the parent schema, or the parent catalog, or the
	// Metastore. [Learn more]
	//
	// [Learn more]: https://docs.databricks.com/aws/en/volumes/managed-vs-external
	VolumeType types.String `tfsdk:"volume_type"`
}

func (to *VolumeInfo) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from VolumeInfo) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				// Recursively sync the fields of EncryptionDetails
				toEncryptionDetails.SyncFieldsDuringCreateOrUpdate(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
}

func (to *VolumeInfo) SyncFieldsDuringRead(ctx context.Context, from VolumeInfo) {
	if !from.EncryptionDetails.IsNull() && !from.EncryptionDetails.IsUnknown() {
		if toEncryptionDetails, ok := to.GetEncryptionDetails(ctx); ok {
			if fromEncryptionDetails, ok := from.GetEncryptionDetails(ctx); ok {
				toEncryptionDetails.SyncFieldsDuringRead(ctx, fromEncryptionDetails)
				to.SetEncryptionDetails(ctx, toEncryptionDetails)
			}
		}
	}
}

func (m VolumeInfo) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["access_point"] = attrs["access_point"].SetComputed()
	attrs["browse_only"] = attrs["browse_only"].SetComputed()
	attrs["catalog_name"] = attrs["catalog_name"].SetOptional()
	attrs["comment"] = attrs["comment"].SetOptional()
	attrs["created_at"] = attrs["created_at"].SetComputed()
	attrs["created_by"] = attrs["created_by"].SetOptional()
	attrs["encryption_details"] = attrs["encryption_details"].SetComputed()
	attrs["full_name"] = attrs["full_name"].SetComputed()
	attrs["metastore_id"] = attrs["metastore_id"].SetComputed()
	attrs["name"] = attrs["name"].SetOptional()
	attrs["owner"] = attrs["owner"].SetOptional()
	attrs["schema_name"] = attrs["schema_name"].SetOptional()
	attrs["storage_location"] = attrs["storage_location"].SetOptional()
	attrs["updated_at"] = attrs["updated_at"].SetComputed()
	attrs["updated_by"] = attrs["updated_by"].SetComputed()
	attrs["volume_id"] = attrs["volume_id"].SetComputed()
	attrs["volume_type"] = attrs["volume_type"].SetOptional()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in VolumeInfo.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m VolumeInfo) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{
		"encryption_details": reflect.TypeOf(EncryptionDetails{}),
	}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, VolumeInfo
// only implements ToObjectValue() and Type().
func (m VolumeInfo) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"access_point":       m.AccessPoint,
			"browse_only":        m.BrowseOnly,
			"catalog_name":       m.CatalogName,
			"comment":            m.Comment,
			"created_at":         m.CreatedAt,
			"created_by":         m.CreatedBy,
			"encryption_details": m.EncryptionDetails,
			"full_name":          m.FullName,
			"metastore_id":       m.MetastoreId,
			"name":               m.Name,
			"owner":              m.Owner,
			"schema_name":        m.SchemaName,
			"storage_location":   m.StorageLocation,
			"updated_at":         m.UpdatedAt,
			"updated_by":         m.UpdatedBy,
			"volume_id":          m.VolumeId,
			"volume_type":        m.VolumeType,
		})
}

// Type implements basetypes.ObjectValuable.
func (m VolumeInfo) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"access_point":       types.StringType,
			"browse_only":        types.BoolType,
			"catalog_name":       types.StringType,
			"comment":            types.StringType,
			"created_at":         types.Int64Type,
			"created_by":         types.StringType,
			"encryption_details": EncryptionDetails{}.Type(ctx),
			"full_name":          types.StringType,
			"metastore_id":       types.StringType,
			"name":               types.StringType,
			"owner":              types.StringType,
			"schema_name":        types.StringType,
			"storage_location":   types.StringType,
			"updated_at":         types.Int64Type,
			"updated_by":         types.StringType,
			"volume_id":          types.StringType,
			"volume_type":        types.StringType,
		},
	}
}

// GetEncryptionDetails returns the value of the EncryptionDetails field in VolumeInfo as
// a EncryptionDetails value.
// If the field is unknown or null, the boolean return value is false.
func (m *VolumeInfo) GetEncryptionDetails(ctx context.Context) (EncryptionDetails, bool) {
	var e EncryptionDetails
	if m.EncryptionDetails.IsNull() || m.EncryptionDetails.IsUnknown() {
		return e, false
	}
	var v EncryptionDetails
	d := m.EncryptionDetails.As(ctx, &v, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})
	if d.HasError() {
		panic(pluginfwcommon.DiagToString(d))
	}
	return v, true
}

// SetEncryptionDetails sets the value of the EncryptionDetails field in VolumeInfo.
func (m *VolumeInfo) SetEncryptionDetails(ctx context.Context, v EncryptionDetails) {
	vs := v.ToObjectValue(ctx)
	m.EncryptionDetails = vs
}

type WorkspaceBinding struct {
	// One of READ_WRITE/READ_ONLY. Default is READ_WRITE.
	BindingType types.String `tfsdk:"binding_type"`
	// Required
	WorkspaceId types.Int64 `tfsdk:"workspace_id"`
}

func (to *WorkspaceBinding) SyncFieldsDuringCreateOrUpdate(ctx context.Context, from WorkspaceBinding) {
}

func (to *WorkspaceBinding) SyncFieldsDuringRead(ctx context.Context, from WorkspaceBinding) {
}

func (m WorkspaceBinding) ApplySchemaCustomizations(attrs map[string]tfschema.AttributeBuilder) map[string]tfschema.AttributeBuilder {
	attrs["binding_type"] = attrs["binding_type"].SetOptional()
	attrs["workspace_id"] = attrs["workspace_id"].SetRequired()

	return attrs
}

// GetComplexFieldTypes returns a map of the types of elements in complex fields in WorkspaceBinding.
// Container types (types.Map, types.List, types.Set) and object types (types.Object) do not carry
// the type information of their elements in the Go type system. This function provides a way to
// retrieve the type information of the elements in complex fields at runtime. The values of the map
// are the reflected types of the contained elements. They must be either primitive values from the
// plugin framework type system (types.String{}, types.Bool{}, types.Int64{}, types.Float64{}) or TF
// SDK values.
func (m WorkspaceBinding) GetComplexFieldTypes(ctx context.Context) map[string]reflect.Type {
	return map[string]reflect.Type{}
}

// TFSDK types cannot implement the ObjectValuable interface directly, as it would otherwise
// interfere with how the plugin framework retrieves and sets values in state. Thus, WorkspaceBinding
// only implements ToObjectValue() and Type().
func (m WorkspaceBinding) ToObjectValue(ctx context.Context) basetypes.ObjectValue {
	return types.ObjectValueMust(
		m.Type(ctx).(basetypes.ObjectType).AttrTypes,
		map[string]attr.Value{
			"binding_type": m.BindingType,
			"workspace_id": m.WorkspaceId,
		})
}

// Type implements basetypes.ObjectValuable.
func (m WorkspaceBinding) Type(ctx context.Context) attr.Type {
	return types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"binding_type": types.StringType,
			"workspace_id": types.Int64Type,
		},
	}
}
